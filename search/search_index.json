{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"About","text":"<p>Stuff about whow this was created, how to contribute code or documentation</p>"},{"location":"api/dispatch/console_dispatcher/","title":"Console Dispatcher","text":"<p>The ConsoleDispatcher is used to route console related messages to callback functions. Generally this is done to classes.</p>"},{"location":"api/dispatch/console_dispatcher/#artemis-cosmos-console-system","title":"Artemis Cosmos console system","text":"<p>Artemis Cosmos calls the script function HandleConsoleObjectSelection when an item is selected on a console.</p> <p>Artemis Cosmos calls the script function HandleCommsButton when a button is pressed on a comms console.</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils-console-system","title":"sbs_utils console system","text":"<p>The ConsoleDispatcher is intended receive these and route them to callback functions. This can further be used to direct these to classes that represent the ships enabling the handling of this code to be handled in context of the ship(s) involved.</p> <p>The HandleConsoleObjectSelection should call meth:<code>~sbs_utils.consoledispatcher.ConsoleDispatcher.dispatch_select</code> The HandleCommsButton should call meth:<code>~sbs_utils.consoledispatcher.ConsoleDispatcher.dispatch_comms_message</code></p> Python <pre><code>def HandleConsoleObjectSelection(sim, console, obj_selected_id, ship_id):\n   ConsoleDispatcher.dispatch_select(sim,ship_id, console,obj_selected_id)\n\ndef HandleCommsButton(sim, button_tag, ship_id, obj_selected_id):\n   ConsoleDispatcher.dispatch_comms_message(sim, button_tag, ship_id, obj_selected_id)\n</code></pre> <p>Importing the hookhandlers module it does by default.</p> <p>=== \"Python\"    <pre><code>from sbs_utils.handlerhooks import *\n# no longer need to implement handlers in script.py\n</code></pre></p>"},{"location":"api/dispatch/console_dispatcher/#example-adding-comms-to-a-class","title":"Example: Adding Comms to a class","text":"<p>The best way to use the ConsoleDispatcher is to add comms to a class:<code>~sbs_utils.spaceobject.SpaceObject</code> using the class:<code>~sbs_utils.consoledispatcher.ConsoleDispatcher</code> and class:<code>~sbs_utils.consoledispatcher.MCommunications</code> mixin class. and provide an implementation of  meth:<code>~sbs_utils.consoledispatcher.MCommunications.comms_selected</code> and meth:<code>~sbs_utils.consoledispatcher.MCommunications.comms_message</code> methods.</p> <p>To enable comms call meth:<code>~sbs_utils.consoledispatcher.MCommunications.enable_comms</code>. This should be called after the SpaceObject has spawned and has an id.</p> <p>meth:<code>~sbs_utils.consoledispatcher.MCommunications.enable_comms</code> takes a face description and it will set self.face_desc. </p> <p>You can use :doc:<code>faces</code> to get some face descriptions.</p> <p>This can be done on a non-player ship and a PlayerShip. The system will send the proper information.</p> <p>For a non-player ship the player id is sent.</p> Python <p>``` py    class Harvester(SpaceObject, MSpawnActive, MCommunications):       def some_method(self):          self.enable_comms(some_face_desc)</p> <pre><code>  def comms_selected(self, sim, player_id):\n     pass\n\n  def comms_message(self, sim, message, player_id):\n     pass\n</code></pre> <p>For a PlayerShip the other ship id is sent.</p> Python <pre><code>class Player(PlayerShip, MCommunications):\n   def some_method(self):\n      self.enable_comms(some_face_desc)\n\n   def comms_selected(self, sim, other_id):\n      pass\n\n   def comms_message(self, sim, message, other_id):\n      pass\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#example-sending-selection-info","title":"Example: Sending selection info","text":"<p>A non player ship should send its selection info in comms_selected. This will update the comms to show the name and face of the ship when selected. The self.face_desc can be used, or the face can be altered based on game conditions e.g. change to angry, changed to new face (change of command) etc.</p> Python <pre><code>class Harvester(SpaceObject, MSpawnActive, MCommunications):\n   def comms_selected(self, sim, player_id):\n      sbs.send_comms_selection_info(player_id, self.face_desc, \"green\", self.comms_id)\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#example-sending-comms-buttons","title":"Example: Sending comms buttons","text":"<p>comms_select is also the place where comms button could be sent to the comms console. This can be done based on the state of the ship.</p> Python <pre><code>class Harvester(SpaceObject, MSpawnActive, MCommunications):\n   def comms_selected(self, sim, player_id):\n      sbs.send_comms_selection_info(player_id, self.face_desc, \"green\", self.comms_id)\n\n     # if Empty it is waiting for what to harvest\n     if self.state == HarvesterState.EMPTY_WAITING:\n         sbs.send_comms_button_info(player_id, \"blue\", \"Harvest energy\", \"get_energy\")\n         sbs.send_comms_button_info(player_id, \"red\", \"Harvest minerals\", \"get_mineral\")\n         sbs.send_comms_button_info(player_id, \"gold\", \"Harvest rare metals\", \"get_rare\")\n         sbs.send_comms_button_info(player_id, \"silver\", \"Harvest alloys\", \"get_alloy\")\n         sbs.send_comms_button_info(player_id, \"green\", \"Harvest replicator fuel\", \"get_food\")\n\n     if self.state == HarvesterState.FULL_WAITING:\n         for base in self.find_close_list(sim, 'Spacedock'):\n             sbs.send_comms_button_info(player_id, \"yellow\", f\"Head to {base.obj.comms_id}\", f\"{base.obj.id}\")\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#example-handling-comms-button-messages","title":"Example: handling comms button messages","text":"<p>comms_message is called when a comms button is pressed. The message is the button_tag.</p> Python <pre><code>class Harvester(SpaceObject, MSpawnActive, MCommunications):\n  def comms_message(self, sim, message, player_id):\n\n     if message.isnumeric():\n         other_id = int(message)\n         self.target(sim,other_id, False)\n         # every ten seconds r\n         self.tsk = TickDispatcher.do_interval(sim,self.think, 5)\n         self.tsk.base_id = other_id\n         self.state = HarvesterState.RETURNING\n         return\n\n     match message:\n         case 'get_energy':\n             self.resource_type = ResourceTypes.ENERGY\n             self.send_comms('Gathering energy', 'green', player_id)\n             self.state = HarvesterState.HARVESTING\n             self.find_target(sim)\n         case 'get_mineral':\n             self.resource_type = ResourceTypes.MINERAL\n             self.send_comms('Gathering minerals', 'green', player_id)\n             self.state = HarvesterState.HARVESTING\n             self.find_target(sim)\n         case 'get_rare':\n             self.resource_type = ResourceTypes.RARE_METAL\n             self.send_comms('Gathering rare metals', 'green', player_id)\n             self.state = HarvesterState.HARVESTING\n             self.find_target(sim)\n         case 'get_alloy':\n             self.resource_type = ResourceTypes.ALLOY\n             self.send_comms('Gathering alloys', 'green', player_id)\n             self.state = HarvesterState.HARVESTING\n             self.find_target(sim)\n         case 'get_food':\n             self.resource_type = ResourceTypes.FOOD\n             self.send_comms('Gathering replicator fuel', 'green', player_id)\n             self.state = HarvesterState.HARVESTING\n             self.find_target(sim)\n         case '_':\n             return\n\n     # Clear buttons?\n     sbs.send_comms_selection_info(player_id, self.face_desc, \"green\", self.comms_id)\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#non-class-console-handling","title":"non class console handling","text":"<p>MCommunications is useful for any class. However, if their is another way desired to handle console messages.</p> <p>meth:<code>~sbs_utils.consoledispatcher.ConsoleDispatcher.add_select</code> adds any callback to the console dispatcher system for handling selection.</p> <p>meth:<code>~sbs_utils.consoledispatcher.ConsoleDispatcher.add_message</code> adds any callback to the console dispatcher system for handling messages.</p> Python <pre><code>def some_select_handler(self, sim, other_id):\n   pass\n\ndef some_message_handler(self, sim, message, other_id):\n   pass\n\ndef some_function(self, sim, message, player_id):\n   ConsoleDispatcher.add_select(some_id, 'comms_targetUID', some_select_handler)\n   ConsoleDispatcher.add_message(some_id, 'comms_targetUID', some_message_handler)\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#api-consoledispatcher-module","title":"API consoledispatcher module","text":""},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher","title":"<code>ConsoleDispatcher</code>","text":""},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.add_always_select","title":"<code>add_always_select(console, cb)</code>","text":"<p>add a target for console selection :param console: The consoles unique ID :type console: string :param cb: call back function :type cb:  should have arguments of other ctx and object's id</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.add_default_message","title":"<code>add_default_message(console, cb)</code>","text":"<p>add a target for console message</p> <p>:param console: The consoles unique ID :type console: string :param cb: call back function :type cb:  should have arguments of other ctx, message and object's id</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.add_default_select","title":"<code>add_default_select(console, cb)</code>","text":"<p>add a target for console selection :param console: The consoles unique ID :type console: string :param cb: call back function :type cb:  should have arguments of other ctx and object's id</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.add_message","title":"<code>add_message(an_id, console, cb)</code>","text":"<p>add a target for console message</p> <p>:param an_id: A ships ID player or non-player :type an_id: int :param console: The consoles unique ID :type console: string :param cb: call back function :type cb:  should have arguments of other ctx, message and object's id</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.add_message_pair","title":"<code>add_message_pair(an_id, another, console, cb)</code>","text":"<p>add a target for console message</p> <p>:param an_id: A ships ID player or non-player :type an_id: int :param console: The consoles unique ID :type console: string :param cb: call back function :type cb:  should have arguments of other ctx, message and object's id</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.add_select","title":"<code>add_select(an_id, console, cb)</code>","text":"<p>add a target for console selection</p> <p>:param an_id: A ships ID player or non-player :type an_id: int :param console: The consoles unique ID :type console: string :param cb: call back function :type cb:  should have arguments of other ctx and object's id</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.add_select_pair","title":"<code>add_select_pair(an_id, another_id, console, cb)</code>","text":"<p>add a target for console selection</p> <p>:param an_id: A ships ID player or non-player :type an_id: int :param console: The consoles unique ID :type console: string :param cb: call back function :type cb:  should have arguments of other ctx and object's id</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.dispatch_message","title":"<code>dispatch_message(event, console)</code>","text":"<p>dispatches a console message</p> <p>:param message_tag: The message :type message_tag: string :param player_id: A player ship ID :type player_id: int :param console: The consoles unique ID :type console: string :param other_id: A non player ship ID player :type other_id: int</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.dispatch_select","title":"<code>dispatch_select(event)</code>","text":"<p>dispatches a console selection</p> <p>:param player_id: A player ship ID :type player_id: int :param console: The consoles unique ID :type console: string :param other_id: A non player ship ID player :type other_id: int</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.remove_message","title":"<code>remove_message(an_id, console, cb=None)</code>","text":"<p>remove a target for console messages</p> <p>:param an_id: A ships ID player or non-player :type an_id: int :param console: The consoles unique ID :type console: string</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.remove_message_pair","title":"<code>remove_message_pair(an_id, another_id, console)</code>","text":"<p>remove a target for console messages</p> <p>:param an_id: A ships ID player or non-player :type an_id: int :param console: The consoles unique ID :type console: string</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.remove_select","title":"<code>remove_select(an_id, console, cb=None)</code>","text":"<p>remove a target for console selection</p> <p>:param an_id: A ships ID player or non-player :type an_id: int :param console: The consoles unique ID :type console: string</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.remove_select_pair","title":"<code>remove_select_pair(an_id, another_id, console)</code>","text":"<p>remove a target for console selection</p> <p>:param an_id: A ships ID player or non-player :type an_id: int :param console: The consoles unique ID :type console: string</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.MCommunications","title":"<code>MCommunications</code>","text":""},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.MCommunications.comms_message","title":"<code>comms_message(message, an_id, event)</code>","text":"<p>handle a comms message</p> <p>:param message_tag: The message :type message_tag: string :param an_id: The other ship involved :type an_id: int</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.MCommunications.comms_selected","title":"<code>comms_selected(an_id, event)</code>","text":"<p>handle a comms selection :param an_id: The other ship involved :type an_id: int</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.MCommunications.enable_comms","title":"<code>enable_comms(face_desc=None)</code>","text":"<p>includes in ConsoleDispatch system</p> <p>:param face_desc: Face Description :type face_desc: string</p>"},{"location":"api/dispatch/damage_dispatcher/","title":"The Damage Dispatcher","text":"<p>The DamageDispatcher is used to route damage events to an object interested in the damage.</p>"},{"location":"api/dispatch/damage_dispatcher/#artemis-cosmos-damage-system","title":"Artemis Cosmos damage system","text":"<p>Artemis Cosmos calls the script function HandleDamageEvent when an item receives damage.</p>"},{"location":"api/dispatch/damage_dispatcher/#sbs_utils-damage-system","title":"sbs_utils damage system","text":"<p>The DispatcherDispatcher is intended receive these and route them to callback functions. This can further be used to direct these to classes that represent the ships enabling the handling of this code to be handled in context of the ship(s) involved.</p> <p>The HandleDamage should call </p> Python <pre><code>def HandleDamageEvent(sim, damage_event):\n DamageDispatcher.dispatch_damage(sim,damage_event)\n</code></pre> <p>Importing the hookhandlers module it does by default.</p> Python <pre><code>from sbs_utils.handlerhooks import *\n# no longer need to implement handlers in script.py\n</code></pre>"},{"location":"api/dispatch/damage_dispatcher/#being-notified-of-damage","title":"Being notified of damage","text":""},{"location":"api/dispatch/damage_dispatcher/#source-of-damage","title":"Source of damage","text":"Python <pre><code>class Harvester(SpaceObject, MSpawnActive):\n\n   def spawn(self, sim, v, side):\n      ship = super().spawn_v(sim,v, None, side,  \"Cargo\", \"behav_npcship\")\n      DamageDispatcher.add_source(self.id, self.on_damage_source)\n      return ship\n\n   def on_damage_source(self, sim, damage_event):\n      pass\n</code></pre>"},{"location":"api/dispatch/damage_dispatcher/#target-of-damage","title":"Target of damage","text":"Python <pre><code>class Asteroid(SpaceObject, MSpawnActive):\n\n   def spawn(self, sim, v, side):\n      ship = super().spawn_v(sim,v, None, side,  \"Asteroid 1\", \"behav_asteroid\")\n      DamageDispatcher.add_target(self.id, self.on_damage_target)\n      return ship\n\n   def on_damage_target(self, sim, damage_event):\n      pass\n</code></pre> <p>damage_amount: float, how much damage was done  damage_type: string, tag of damage type. 'destroyed' means that this event is really a dead event, not a damage event  event_time: long int, time this damage occured, compare to simulation.time_tick_counter  source_id: int, ID of unit that caused the damage.  Might be zero.  source_parent_id: int, ID of PARENT of unit that caused the damage.  Might be zero.  target_id: int, ID of unit that suffered the damage</p>"},{"location":"api/dispatch/damage_dispatcher/#api-damagedispatcher-module","title":"API: damagedispatcher module","text":""},{"location":"api/dispatch/tick_dispatcher/","title":"TickDispatcher","text":"<p>Artemis Cosmos runs the python script at a set interval (currently once a second). This is done via the HandleSimulationTick method.</p>"},{"location":"api/dispatch/tick_dispatcher/#usage","title":"Usage","text":"<p>The TickDispatcher is used to create tasks that are called when the HandleSimulationTick is called. The function meth:<code>~sbs_utils.tickdispatcher.TickDispatcher.dispatch_tick</code> should be called in HandleSimulationTick, and ideally this is the only code that is needed.</p> Python <pre><code>   def  HandleSimulationTick(sim):\n      TickDispatcher.dispatch_tick(sim)\n</code></pre> <p>Importing the hookhandlers module it does by default.</p> Python <pre><code>   from sbs_utils.handlerhooks import *\n   # no longer need to implement handlers in script.py\n</code></pre> <p>One could implement their own way of handling time and tick related code, the goal of the TickDispatcher is to have a common way to organize this logic.</p> <p>A TickTask is similar to Artemis XML's timer events and are ideally more efficient since they only live while they are relevant.</p> <p>To create a TickTask you can use one of two functions.</p> <p> will schedule a task that is run only one time.</p> <p> will schedule to run multiple times or continuously.</p> <p>Both methods take the simulation used to track the start time, a callback function, a delay time. do_interval additionally optionally takes the number of times it should run. The default is None, which is meant to indicate run continuously.</p> <p>The callback functions will receive the simulation and the task as arguments. Class methods used as a callback will receive 'self' as the first argument.</p>"},{"location":"api/dispatch/tick_dispatcher/#example-run-a-function-once","title":"Example: run a function once","text":"<p>The following will run the function after 5 seconds.</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\ndef call_me_later(sim, task):\n   print('Hello, Tick Tasks')\n\n# Some other place\nTickDispatcher.do_once(sim, call_me_later, 5)   \n</code></pre> <p>The following will run a class method on an object after 5 seconds.</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\nclass MyPlayer(PlayerShip):\n   def call_me_later(self, sim, task):\n      print('Hello, Tick Tasks')\n\n# Some other place\nplayer_one = MyPlayer()\nTickDispatcher.do_once(sim, player_one.call_me_later, 5)   \n</code></pre> <p>The following will run a class method on an object after 5 seconds. This one show using self.</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\nclass MyPlayer(PlayerShip):\n   def call_me_later(self, sim, task):\n      print('Hello, Tick Tasks')\n\n   def some_other_method(self):      \n      TickDispatcher.do_once(sim, self.call_me_later, 5)   \n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#example-run-a-function-multiple-times","title":"Example: run a function multiple times","text":"<p>The following will run the function every 5 seconds, 4 times</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\ndef call_me_later(sim, task):\n   print('Hello, Tick Tasks')\n\n# Some other place\nTickDispatcher.do_interval(sim, call_me_later, 5, 4)   \n</code></pre> <p>The following will run a class method on an object after 5 seconds four times. This one show using self.</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\nclass MyPlayer(PlayerShip):\n   def call_me_later(self, sim, task):\n      print('Hello, Tick Tasks')\n\n   def some_other_method(self):      \n      TickDispatcher.do_interval(sim, self.call_me_later, 5,4)   \n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#example-run-continuously","title":"Example: run continuously","text":"<p>The following will run the function every tick. This can be done with classes as well, those examples will be similar to above.</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\ndef call_me_later(sim, task):\n   print('Hello, Tick Tasks')\n\n# Some other place\nTickDispatcher.do_interval(sim, call_me_later, 0)   \n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#example-stopping-a-task","title":"Example: Stopping a task","text":"<p>The following will run as task and stop it when a condition is met.</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\nclass MyPlayer(PlayerShip):\n   def call_me_later(self, sim, task):\n      print('Hello, Tick Tasks')\n      if some_thing_that_stops_it:\n         task.stop()\n\n   def some_other_method(self):      \n      TickDispatcher.do_interval(sim, self.call_me_later, 5)   \n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#example-passing-data","title":"Example: passing data","text":"<p>The following will run will pass data to the callback.</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\ndef call_me_later(sim, task):\n   print('Hello, Tick Tasks')\n   # use the data attached to the task\n   print(task.data)\n\n# Some other place\nthetask = TickDispatcher.do_interval(sim, call_me_later, 0)\n# attach data to the task\nthetask.data = 42\n</code></pre> <p>For completeness: using the object 'self' data</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\nclass MyPlayer(PlayerShip):\n   data = 42\n   def call_me_later(self, sim, task):\n      print('Hello, Tick Tasks')\n      print(self.data)\n\n   def some_other_method(self):      \n      TickDispatcher.do_interval(sim, self.call_me_later, 5)   \n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#api-tickdispatcher-module","title":"API: tickdispatcher module","text":""},{"location":"api/dispatch/tick_dispatcher/#sbs_utils.tickdispatcher.TickDispatcher","title":"<code>TickDispatcher</code>","text":"<p>The Tick Dispatcher is used to manager timed items via the HandleSimulationTick</p>"},{"location":"api/dispatch/tick_dispatcher/#sbs_utils.tickdispatcher.TickDispatcher.dispatch_tick","title":"<code>dispatch_tick()</code>","text":"<p>Process all the tasks The task is updated to see if it should be triggered,  and if it is completed</p>"},{"location":"api/dispatch/tick_dispatcher/#sbs_utils.tickdispatcher.TickDispatcher.do_interval","title":"<code>do_interval(cb, delay, count=None)</code>","text":"<p>Create and return a task that executes more than once</p> <p>:param ctx: The Artemis Cosmos simulation :param cb: call back function :param delay: the time in seconds for the task to delay :type delay: int :param count: The number of times to run None mean infinite :type count: int or None :return: The task is returned and can be used to attach data for future use. :rtype: TickFTask</p> <p>example:</p> <p>.. code-block:: python</p> <pre><code>def some_use():\n    t = TickDispatcher.do_interval(the_callback, 5)\n    t.data = some_data\n\ndef the_callback(t):\n    print(t.some_data)\n    if t.some_data.some_condition:\n        t.stop()\n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#sbs_utils.tickdispatcher.TickDispatcher.do_once","title":"<code>do_once(cb, delay)</code>","text":"<p>Create and return a task that executes once</p> <p>:param delay: the time in seconds for the task to delay :type delay: int :return: The task is returned and can be used to attach data for future use. :rtype: TickTask</p> example <p>def some_use():     t = TickDispatcher.do_once(the_callback, 5)     t.data = some_data</p> <p>def the_callback(t):     print(t.some_data)</p>"},{"location":"api/dispatch/tick_dispatcher/#sbs_utils.tickdispatcher.TickTask","title":"<code>TickTask</code>","text":"<p>               Bases: <code>Agent</code></p> <p>A task that is managed by the TickDispatcher</p>"},{"location":"api/dispatch/tick_dispatcher/#sbs_utils.tickdispatcher.TickTask.done","title":"<code>done: bool</code>  <code>property</code>","text":"<p>returns if this is the task will not run in the future</p>"},{"location":"api/dispatch/tick_dispatcher/#sbs_utils.tickdispatcher.TickTask.__init__","title":"<code>__init__(cb, delay, count)</code>","text":"<p>new TickTask</p> <p>:param sim: The Artemis Cosmos simulation :param cb: call back function :param delay: the time in seconds for the task to delay :type delay: int :param count: The number of times to run None mean infinite :type count: int or None</p>"},{"location":"api/dispatch/tick_dispatcher/#sbs_utils.tickdispatcher.TickTask.stop","title":"<code>stop()</code>","text":"<p>Stop a tasks The task is removed</p>"},{"location":"api/engine/sbs/","title":"The sbs module","text":"<p>The SBS Module is provided by the Artemis cosmos engine</p>"},{"location":"api/engine/sbs/#overview","title":"Overview","text":""},{"location":"api/engine/sbs/#api-sbs","title":"API: SBS","text":""},{"location":"api/engine/sbs/#mock.sbs.SHPSYS","title":"<code>SHPSYS</code>","text":"<p>               Bases: <code>object</code></p> <p>One of four ship systems to track damage</p> <p>Members:</p> <p>WEAPONS : the weapons index for system_damage</p> <p>ENGINES : the engines index for system_damage</p> <p>SENSORS : the sensors index for system_damage</p> <p>SHIELDS : the shields index for system_damage</p>"},{"location":"api/engine/sbs/#mock.sbs.TORPEDO","title":"<code>TORPEDO</code>","text":"<p>               Bases: <code>object</code></p> <p>enum of torpedo types</p> <p>Members:</p> <p>HOMING : a torpedo type index</p> <p>NUKE : a torpedo type index</p> <p>EMP : a torpedo type index</p> <p>MINE : a torpedo type index</p> <p>TORPTYPECOUNT : number of torpedo types</p>"},{"location":"api/engine/sbs/#mock.sbs.Writer","title":"<code>Writer</code>","text":"<p>               Bases: <code>object</code></p> <p>class Writer</p>"},{"location":"api/engine/sbs/#mock.sbs.event","title":"<code>event</code>","text":"<p>               Bases: <code>object</code></p> <p>class event</p>"},{"location":"api/engine/sbs/#mock.sbs.event.client_id","title":"<code>client_id: int</code>  <code>property</code>","text":"<p>id of computer this event came from.</p>"},{"location":"api/engine/sbs/#mock.sbs.event.event_time","title":"<code>event_time: int</code>  <code>property</code>","text":"<p>long int, time this damage occured, compare to simulation.time_tick_counter</p>"},{"location":"api/engine/sbs/#mock.sbs.event.origin_id","title":"<code>origin_id: int</code>  <code>property</code>","text":"<p>id of space object this event came from</p>"},{"location":"api/engine/sbs/#mock.sbs.event.parent_id","title":"<code>parent_id: int</code>  <code>property</code>","text":"<p>id of owner/creator of space object this event came from (like the ship that fired the missile)</p>"},{"location":"api/engine/sbs/#mock.sbs.event.selected_id","title":"<code>selected_id: int</code>  <code>property</code>","text":"<p>id of space object this event is talking about, or doing something to</p>"},{"location":"api/engine/sbs/#mock.sbs.event.source_point","title":"<code>source_point: vec3</code>  <code>property</code>","text":"<p>vec3, 3d point this event originated from</p>"},{"location":"api/engine/sbs/#mock.sbs.event.sub_float","title":"<code>sub_float: float</code>  <code>property</code>","text":"<p>float, numeric information</p>"},{"location":"api/engine/sbs/#mock.sbs.event.sub_tag","title":"<code>sub_tag: str</code>  <code>property</code>","text":"<p>string describing message sub-type</p>"},{"location":"api/engine/sbs/#mock.sbs.event.tag","title":"<code>tag: str</code>  <code>property</code>","text":"<p>string describing message type</p>"},{"location":"api/engine/sbs/#mock.sbs.event.value_tag","title":"<code>value_tag: str</code>  <code>property</code>","text":"<p>string, more information</p>"},{"location":"api/engine/sbs/#mock.sbs.grid_object","title":"<code>grid_object</code>","text":"<p>               Bases: <code>object</code></p> <p>class grid_object</p>"},{"location":"api/engine/sbs/#mock.sbs.grid_object.data_set","title":"<code>data_set: object_data_set</code>  <code>property</code>","text":"<p>object_data_set, read only, reference to the object_data_set of this particular grid object</p>"},{"location":"api/engine/sbs/#mock.sbs.grid_object.name","title":"<code>name: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, text name</p>"},{"location":"api/engine/sbs/#mock.sbs.grid_object.tag","title":"<code>tag: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, text tag</p>"},{"location":"api/engine/sbs/#mock.sbs.grid_object.type","title":"<code>type: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, text value, broad type of object</p>"},{"location":"api/engine/sbs/#mock.sbs.grid_object.unique_ID","title":"<code>unique_ID: int</code>  <code>property</code>","text":"<p>int32, read only, id of this particular grid object</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap","title":"<code>hullmap</code>","text":"<p>               Bases: <code>object</code></p> <p>class hullmap</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.art_file_root","title":"<code>art_file_root: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, file name, used to get top-down image from disk</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.desc","title":"<code>desc: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, description text</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.grid_scale","title":"<code>grid_scale: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, space between grid points</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.h","title":"<code>h: int</code>  <code>property</code> <code>writable</code>","text":"<p>int, total grid hieght</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.name","title":"<code>name: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, text name</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.symmetrical_flag","title":"<code>symmetrical_flag: int</code>  <code>property</code> <code>writable</code>","text":"<p>int, non-zero if the map is symmetrical</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.w","title":"<code>w: int</code>  <code>property</code> <code>writable</code>","text":"<p>int, total grid width</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.create_grid_object","title":"<code>create_grid_object(arg0, arg1, arg2)</code>","text":"<p>returns a gridobject, after creating it</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.delete_grid_object","title":"<code>delete_grid_object(arg0)</code>","text":"<p>deletes the grid object, returns true if deletion actually occured</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.get_grid_object_by_id","title":"<code>get_grid_object_by_id(arg0)</code>","text":"<p>returns a gridobject, by int32 ID</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.get_grid_object_by_index","title":"<code>get_grid_object_by_index(arg0)</code>","text":"<p>returns a gridobject, by position in the list</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.get_grid_object_by_name","title":"<code>get_grid_object_by_name(*args, **kwargs)</code>","text":"<p>Overloaded function.</p> <ol> <li>get_grid_object_by_name(self: hullmap, arg0: str) -&gt; grid_object</li> </ol> <p>returns a gridobject, by name</p> <ol> <li>get_grid_object_by_name(self: hullmap, arg0: str) -&gt; grid_object</li> </ol> <p>returns a gridobject, by text tag</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.get_grid_object_count","title":"<code>get_grid_object_count()</code>","text":"<p>get the number of grid objects in the list, within this hullmap</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.is_grid_point_open","title":"<code>is_grid_point_open(arg0, arg1)</code>","text":"<p>is the x/y point within this hullmap open (traversable)? 0 == no</p>"},{"location":"api/engine/sbs/#mock.sbs.navpoint","title":"<code>navpoint</code>","text":"<p>               Bases: <code>object</code></p>"},{"location":"api/engine/sbs/#mock.sbs.navpoint.color","title":"<code>color: vec4</code>  <code>property</code> <code>writable</code>","text":"<p>vec4, color on 2d radar</p>"},{"location":"api/engine/sbs/#mock.sbs.navpoint.pos","title":"<code>pos: vec3</code>  <code>property</code> <code>writable</code>","text":"<p>vec3, position in space</p>"},{"location":"api/engine/sbs/#mock.sbs.navpoint.text","title":"<code>text: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, text label</p>"},{"location":"api/engine/sbs/#mock.sbs.navpoint.SetColor","title":"<code>SetColor(arg0)</code>","text":"<p>use a string color description to set the color</p>"},{"location":"api/engine/sbs/#mock.sbs.object_data_set","title":"<code>object_data_set</code>","text":"<p>               Bases: <code>object</code></p> <p>class object_data_set</p>"},{"location":"api/engine/sbs/#mock.sbs.object_data_set.get","title":"<code>get(*args, **kwargs)</code>","text":"<p>Overloaded function.</p> <ol> <li>get(self: object_data_set, arg0: str, arg1: int) -&gt; object</li> </ol> <p>Get a value, by name</p> <ol> <li>get(self: object_data_set, arg0: int, arg1: int) -&gt; object</li> </ol> <p>Get a value, by ID</p>"},{"location":"api/engine/sbs/#mock.sbs.object_data_set.set","title":"<code>set(*args, **kwargs)</code>","text":"<p>Overloaded function.</p> <ol> <li>set(self: object_data_set, tag: str, in: int, index: int = 0, extraDocText: str = 'a') -&gt; int</li> </ol> <p>Set an int value, by name</p> <ol> <li>set(self: object_data_set, tag: str, in: int, index: int = 0, extraDocText: str = 'a') -&gt; int</li> </ol> <p>Set an int64 value, by name</p> <ol> <li>set(self: object_data_set, tag: str, in: float, index: int = 0, extraDocText: str = 'a') -&gt; int</li> </ol> <p>Set a float value, by name</p> <ol> <li>set(self: object_data_set, tag: str, in: str, index: int = 0, extraDocText: str = 'a') -&gt; int</li> </ol> <p>Set a string value, by name</p> <ol> <li>set(self: object_data_set, arg0: int, arg1: int, arg2: int) -&gt; int</li> </ol> <p>Set an int value, by ID</p> <ol> <li>set(self: object_data_set, arg0: int, arg1: int, arg2: int) -&gt; int</li> </ol> <p>Set an int64 value, by ID</p> <ol> <li>set(self: object_data_set, arg0: int, arg1: float, arg2: int) -&gt; int</li> </ol> <p>Set a float value, by ID</p> <ol> <li>set(self: object_data_set, arg0: int, arg1: str, arg2: int) -&gt; int</li> </ol> <p>Set a string value, by ID</p>"},{"location":"api/engine/sbs/#mock.sbs.quaternion","title":"<code>quaternion</code>","text":"<p>               Bases: <code>object</code></p> <p>class quaternion</p>"},{"location":"api/engine/sbs/#mock.sbs.quaternion.w","title":"<code>w: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.quaternion.x","title":"<code>x: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.quaternion.y","title":"<code>y: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.quaternion.z","title":"<code>z: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.quaternion.__init__","title":"<code>__init__(w, x=None, y=None, z=None, **kwargs)</code>","text":"<p>Overloaded function.</p> <ol> <li> <p>init(self: quaternion, arg0: float, arg1: float, arg2: float, arg3: float) -&gt; None</p> </li> <li> <p>init(self: quaternion, arg0: quaternion) -&gt; None</p> </li> <li> <p>init(self: quaternion) -&gt; None</p> </li> </ol>"},{"location":"api/engine/sbs/#mock.sbs.simulation","title":"<code>simulation</code>","text":"<p>               Bases: <code>object</code></p>"},{"location":"api/engine/sbs/#mock.sbs.simulation.time_tick_counter","title":"<code>time_tick_counter: int</code>  <code>property</code>","text":"<p>get current time value</p>"},{"location":"api/engine/sbs/#mock.sbs.simulation.AddTractorConnection","title":"<code>AddTractorConnection(arg0, arg1, arg2, arg3)</code>","text":"<p>makes a new connection between two space objects.  Args: uint32_t sourceID, uint32_t targetID, sbs::vec3 offsetPoint, float pullDistance</p>"},{"location":"api/engine/sbs/#mock.sbs.simulation.ClearTractorConnections","title":"<code>ClearTractorConnections()</code>","text":"<p>destroys all existing tractor connections right now.</p>"},{"location":"api/engine/sbs/#mock.sbs.simulation.DeleteTractorConnection","title":"<code>DeleteTractorConnection(arg0, arg1)</code>","text":"<p>finds and deletes an existing tractor connection.  Args: uint32_t sourceID, uint32_t targetID</p>"},{"location":"api/engine/sbs/#mock.sbs.simulation.add_navpoint","title":"<code>add_navpoint(arg0, arg1, arg2, arg3, arg4)</code>","text":"<p>adds a new navpoint to space; don't hold on to this Navpoint object in a global;  keep the name string instead   args:  float x, float y, float z, std::string text, std::string colorDesc</p>"},{"location":"api/engine/sbs/#mock.sbs.simulation.clear_navpoints","title":"<code>clear_navpoints()</code>","text":"<p>deletes all navpoints</p>"},{"location":"api/engine/sbs/#mock.sbs.simulation.create_space_object","title":"<code>create_space_object(arg0, arg1, abits)</code>","text":"<p>creates a new spaceobject</p>"},{"location":"api/engine/sbs/#mock.sbs.simulation.delete_navpoint_by_name","title":"<code>delete_navpoint_by_name(arg0)</code>","text":"<p>deletes navpoint by its name</p>"},{"location":"api/engine/sbs/#mock.sbs.simulation.delete_navpoint_by_reference","title":"<code>delete_navpoint_by_reference(arg0)</code>","text":"<p>deletes navpoint by its reference</p>"},{"location":"api/engine/sbs/#mock.sbs.simulation.get_hull_map","title":"<code>get_hull_map(arg0)</code>","text":"<p>gets the hull map object for this space object</p>"},{"location":"api/engine/sbs/#mock.sbs.simulation.get_navpoint_by_name","title":"<code>get_navpoint_by_name(arg0)</code>","text":"<p>takes a string name, returns the associated Navpoint object</p>"},{"location":"api/engine/sbs/#mock.sbs.simulation.get_space_object","title":"<code>get_space_object(arg0)</code>","text":"<p>returns the refence to a spaceobject, by ID</p>"},{"location":"api/engine/sbs/#mock.sbs.simulation.navpoint_exists","title":"<code>navpoint_exists(arg0)</code>","text":"<p>returns true if the navpoint exists, by name</p>"},{"location":"api/engine/sbs/#mock.sbs.simulation.reposition_space_object","title":"<code>reposition_space_object(arg0, arg1, arg2, arg3)</code>","text":"<p>immedaitely changes the position of a spaceobject</p>"},{"location":"api/engine/sbs/#mock.sbs.simulation.space_object_exists","title":"<code>space_object_exists(arg0)</code>","text":"<p>returns true if the spaceobject exists, by ID</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object","title":"<code>space_object</code>","text":"<p>               Bases: <code>object</code></p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.cur_speed","title":"<code>cur_speed: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, speed of object</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.data_set","title":"<code>data_set: object_data_set</code>  <code>property</code>","text":"<p>object_data_set, read only, refernce to the object_data_set of this particular object</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.data_tag","title":"<code>data_tag: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, name of data entry in shipData.json</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.exclusion_radius","title":"<code>exclusion_radius: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, other objects cannot be closer to me than this distance</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.fat_radius","title":"<code>fat_radius: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, radius of box for internal sorting calculations</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.pos","title":"<code>pos: vec3</code>  <code>property</code> <code>writable</code>","text":"<p>vec3, position in space</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.rot_quat","title":"<code>rot_quat: quaternion</code>  <code>property</code> <code>writable</code>","text":"<p>quaternion, heading and orientation of this object</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.side","title":"<code>side: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, friendly to other objects on this same side; leave empty for 'no side'</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.steer_pitch","title":"<code>steer_pitch: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, change to heading and orientation of this object, over time</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.steer_roll","title":"<code>steer_roll: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, change to heading and orientation of this object, over time</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.steer_yaw","title":"<code>steer_yaw: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, change to heading and orientation of this object, over time</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.tick_type","title":"<code>tick_type: str</code>  <code>property</code>","text":"<p>string, name of behavior module current available behavior modules : nebula, npcship, asteroid, playership, station</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.tick_type_ID","title":"<code>tick_type_ID: int</code>  <code>property</code>","text":"<p>int32, read only, internal representation of tick_type</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.type","title":"<code>type: int</code>  <code>property</code>","text":"<p>int, 0=passive, 1=active, 2=playerShip</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.unique_ID","title":"<code>unique_ID: int</code>  <code>property</code>","text":"<p>int32, read only, id of this particular object</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.set_behavior","title":"<code>set_behavior(arg0)</code>","text":"<p>set name of behavior module current available behavior modules : nebula, npcship, asteroid, playership, station</p>"},{"location":"api/engine/sbs/#mock.sbs.tractor_connection","title":"<code>tractor_connection</code>","text":"<p>               Bases: <code>object</code></p> <p>class tractor_connection</p>"},{"location":"api/engine/sbs/#mock.sbs.tractor_connection.offset","title":"<code>offset: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, how much the target is pulled towards the offset every tick. 0 = infinite pull, target locked to boss</p>"},{"location":"api/engine/sbs/#mock.sbs.tractor_connection.source_id","title":"<code>source_id: int</code>  <code>property</code>","text":"<p>int, ID of boss/master/major object</p>"},{"location":"api/engine/sbs/#mock.sbs.tractor_connection.target_id","title":"<code>target_id: int</code>  <code>property</code>","text":"<p>int, ID of object that is attached to the other</p>"},{"location":"api/engine/sbs/#mock.sbs.vec2","title":"<code>vec2</code>","text":"<p>               Bases: <code>object</code></p> <p>class vec2</p>"},{"location":"api/engine/sbs/#mock.sbs.vec2.x","title":"<code>x: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.vec2.y","title":"<code>y: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.vec2.__init__","title":"<code>__init__(x, y=None)</code>","text":"<p>Overloaded function.</p> <ol> <li> <p>init(self: vec2, arg0: float, arg1: float) -&gt; None</p> </li> <li> <p>init(self: vec2, arg0: vec2) -&gt; None</p> </li> <li> <p>init(self: vec2) -&gt; None</p> </li> </ol>"},{"location":"api/engine/sbs/#mock.sbs.vec3","title":"<code>vec3</code>","text":"<p>               Bases: <code>object</code></p> <p>class vec3</p>"},{"location":"api/engine/sbs/#mock.sbs.vec3.x","title":"<code>x: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.vec3.y","title":"<code>y: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.vec3.z","title":"<code>z: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.vec3.__init__","title":"<code>__init__(x, y=None, z=None)</code>","text":"<p>Overloaded function.</p> <ol> <li> <p>init(self: vec3, arg0: float, arg1: float, arg2: float) -&gt; None</p> </li> <li> <p>init(self: vec3, arg0: vec3) -&gt; None</p> </li> <li> <p>init(self: vec3) -&gt; None</p> </li> </ol>"},{"location":"api/engine/sbs/#mock.sbs.vec4","title":"<code>vec4</code>","text":"<p>               Bases: <code>object</code></p> <p>class vec4</p>"},{"location":"api/engine/sbs/#mock.sbs.vec4.a","title":"<code>a: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value (0.0-1.0)</p>"},{"location":"api/engine/sbs/#mock.sbs.vec4.b","title":"<code>b: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value (0.0-1.0)</p>"},{"location":"api/engine/sbs/#mock.sbs.vec4.g","title":"<code>g: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value (0.0-1.0)</p>"},{"location":"api/engine/sbs/#mock.sbs.vec4.r","title":"<code>r: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value (0.0-1.0)</p>"},{"location":"api/engine/sbs/#mock.sbs.vec4.__init__","title":"<code>__init__(r, g=None, b=None, a=None)</code>","text":"<p>Overloaded function.</p> <ol> <li> <p>init(self: vec4, arg0: float, arg1: float, arg2: float, arg3: float) -&gt; None</p> </li> <li> <p>init(self: vec4, arg0: vec4) -&gt; None</p> </li> <li> <p>init(self: vec4) -&gt; None</p> </li> </ol>"},{"location":"api/engine/sbs/#mock.sbs.add_client_tag","title":"<code>add_client_tag()</code>","text":"<p>return a list of client ids, for the computers that are currently connected to this server.</p>"},{"location":"api/engine/sbs/#mock.sbs.assign_client_to_alt_ship","title":"<code>assign_client_to_alt_ship(clientComputerID, controlledShipID)</code>","text":"<p>Tells a client computer that the 2d radar should focus on controlledShipID, instead of its assigned ship.  Turn this code off by providing zero as the second argument.</p>"},{"location":"api/engine/sbs/#mock.sbs.assign_client_to_ship","title":"<code>assign_client_to_ship(clientComputerID, controlledShipID)</code>","text":"<p>Tells a client computer which ship it should control.</p>"},{"location":"api/engine/sbs/#mock.sbs.broad_test","title":"<code>broad_test(x1, z1, x2, z2, tick_type)</code>","text":"<p>return a list of space objects that are currently inside an x/z 2d rect  ARGS: 2D bounding rect, and type value (0, 1, or 2, -1 = all)</p>"},{"location":"api/engine/sbs/#mock.sbs.clear_client_tags","title":"<code>clear_client_tags()</code>","text":"<p>return a list of client ids, for the computers that are currently connected to this server.</p>"},{"location":"api/engine/sbs/#mock.sbs.create_new_sim","title":"<code>create_new_sim()</code>","text":"<p>all space objects are deleted; a blank slate is born.</p>"},{"location":"api/engine/sbs/#mock.sbs.create_transient","title":"<code>create_transient(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)</code>","text":"<p>Generates a temporary graphical object, like an explosion.</p>"},{"location":"api/engine/sbs/#mock.sbs.delete_object","title":"<code>delete_object(arg0)</code>","text":"<p>deletes a space object by its ID</p>"},{"location":"api/engine/sbs/#mock.sbs.distance","title":"<code>distance(arg0, arg1)</code>","text":"<p>returns the distance between two space objects; arguments are two spaceObjects</p>"},{"location":"api/engine/sbs/#mock.sbs.distance_between_navpoints","title":"<code>distance_between_navpoints(arg0, arg1)</code>","text":"<p>returns the distance between two nav points; navpoints by name</p>"},{"location":"api/engine/sbs/#mock.sbs.distance_to_navpoint","title":"<code>distance_to_navpoint(arg0, arg1)</code>","text":"<p>returns the distance between a nav point and a space object; navpoint name, then object ID</p>"},{"location":"api/engine/sbs/#mock.sbs.get_client_ID_list","title":"<code>get_client_ID_list()</code>","text":"<p>return a list of client ids, for the computers that are currently connected to this server.</p>"},{"location":"api/engine/sbs/#mock.sbs.get_screen_size","title":"<code>get_screen_size()</code>","text":"<p>returns a VEC2, with the width and height of the display in pixels</p>"},{"location":"api/engine/sbs/#mock.sbs.pause_sim","title":"<code>pause_sim()</code>","text":"<p>the sim will now pause; HandlePresentGUI() and HandlePresentGUIMessage() are called.</p>"},{"location":"api/engine/sbs/#mock.sbs.play_music_file","title":"<code>play_music_file(arg0, arg1, arg2)</code>","text":"<p>Plays a music file now, for the specified ship.</p>"},{"location":"api/engine/sbs/#mock.sbs.query_client_tags","title":"<code>query_client_tags()</code>","text":"<p>return a list of client ids, for the computers that are currently connected to this server.</p>"},{"location":"api/engine/sbs/#mock.sbs.resume_sim","title":"<code>resume_sim()</code>","text":"<p>the sim will now run; HandleStartMission() and HandleTickMission() are called.</p>"},{"location":"api/engine/sbs/#mock.sbs.send_client_widget_list","title":"<code>send_client_widget_list(arg0, arg1, arg2)</code>","text":"<p>sends the gameplay widgets to draw, on the targeted client (0 = server screen)</p>"},{"location":"api/engine/sbs/#mock.sbs.send_comms_button_info","title":"<code>send_comms_button_info(arg0, arg1, arg2, arg3)</code>","text":"<p>sends a complex message to the comms console of a certain ship. args:  uint32_t playerID (0 = all ships), std::string color, std::string bodyText</p>"},{"location":"api/engine/sbs/#mock.sbs.send_comms_message_to_player_ship","title":"<code>send_comms_message_to_player_ship(playerID, sourceID, colorDesc, faceDesc, titleText, bodyText, messageTagSet='')</code>","text":"<p>sends a complex message to the comms console of a certain ship. args:  uint32_t playerID (0 = all ships), std::string color, std::string bodyText</p>"},{"location":"api/engine/sbs/#mock.sbs.send_comms_selection_info","title":"<code>send_comms_selection_info(arg0, arg1, arg2, arg3)</code>","text":"<p>sends a complex message to the comms console of a certain ship. args:  uint32_t playerID (0 = all ships), std::string color, std::string bodyText</p>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_3dship","title":"<code>send_gui_3dship(arg0, arg1, arg2, arg3, arg4, arg5, arg6)</code>","text":"<p>Creates a 3D ship box GUI element, on the targeted client (0 = server screen)</p>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_button","title":"<code>send_gui_button(arg0, arg1, arg2, arg3, arg4, arg5, arg6)</code>","text":"<p>Creates a button GUI element, on the targeted client (0 = server screen)</p>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_checkbox","title":"<code>send_gui_checkbox(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)</code>","text":"<p>Creates a checkbox GUI element, on the targeted client (0 = server screen)</p>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_clear","title":"<code>send_gui_clear(arg0)</code>","text":"<p>Clears all GUI elements from screen, on the targeted client (0 = server screen)</p>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_dropdown","title":"<code>send_gui_dropdown(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)</code>","text":"<p>Creates a dropdown GUI element, on the targeted client (0 = server screen)</p>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_face","title":"<code>send_gui_face(arg0, arg1, arg2, arg3, arg4, arg5, arg6)</code>","text":"<p>Creates a face box GUI element, on the targeted client (0 = server screen)</p>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_icon","title":"<code>send_gui_icon(arg0, arg1, arg2, arg3, arg4, arg5, arg6)</code>","text":"<p>Creates an icon art GUI element, on the targeted client (0 = server screen)</p>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_image","title":"<code>send_gui_image(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)</code>","text":"<p>Creates an icon art GUI element, on the targeted client (0 = server screen)</p>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_slider","title":"<code>send_gui_slider(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)</code>","text":"<p>Creates a slider bar GUI element, on the targeted client (0 = server screen) (long clientID, std::string tag, float low, float high, float current, float left, float top, float right, float bottom)</p>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_text","title":"<code>send_gui_text(arg0, arg1, arg2, arg3, arg4, arg5, arg6)</code>","text":"<p>Creates a text box GUI element, on the targeted client (0 = server screen)</p>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_typein","title":"<code>send_gui_typein(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)</code>","text":"<p>Creates a text entry GUI element, on the targeted client (0 = server screen)</p>"},{"location":"api/engine/sbs/#mock.sbs.send_message_to_player_ship","title":"<code>send_message_to_player_ship(arg0, arg1, arg2)</code>","text":"<p>sends a text message to the text box, on every client for a certain ship. args:  uint32_t playerID (0 = all ships), std::string color, std::string text</p>"},{"location":"api/engine/sbs/#mock.sbs.send_story_dialog","title":"<code>send_story_dialog(arg0, arg1, arg2, arg3, arg4)</code>","text":"<p>sends a story dialog to the targeted client (0 = server screen)</p>"},{"location":"api/engine/sbs/#mock.sbs.set_music_folder","title":"<code>set_music_folder(arg0, arg1, arg2)</code>","text":"<p>Sets the folder from which music is streamed, for the specified ship.</p>"},{"location":"api/engine/sbs/#mock.sbs.set_music_tension","title":"<code>set_music_tension(arg0, arg1, arg2)</code>","text":"<p>Sets the tension value of ambient music (0-100), for the specified ship.</p>"},{"location":"api/procedural/","title":"The procedural API","text":"<p>The Procedural API is a set of functions that reduce and limit the uses of object oriented syntax.</p> <p>These functions can be used in Python, Python using the MAST runtime and in the MAST Language. They represent a common way to interact with the Agent model.</p> <p>The procedural API is how most scripters will interact with the system.</p>"},{"location":"api/procedural/behavior/","title":"The behavior tree system","text":""},{"location":"api/procedural/behavior/#sbs_utils.procedural.behavior.bt_export_variable","title":"<code>bt_export_variable(name, value)</code>","text":"<p>sets a variable on the main task of a behavior tree</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The variable name to set</p> required <code>value</code> <code>any</code> <p>The value to set</p> required"},{"location":"api/procedural/behavior/#sbs_utils.procedural.behavior.bt_get_variable","title":"<code>bt_get_variable(name, defa_value=None)</code>","text":"<p>sets a variable on the blackboard data of a behavior tree</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The variable name to set</p> required <code>defa_value</code> <code>any</code> <p>The value if the name is not found</p> <code>None</code>"},{"location":"api/procedural/behavior/#sbs_utils.procedural.behavior.bt_invert","title":"<code>bt_invert(a_bt_promise)</code>","text":"<p>behavior tree invert</p> <p>Parameters:</p> Name Type Description Default <code>a_bt_promise</code> <code>promise</code> <p>Invert the success or failure of a behavior promise</p> required <p>Returns:</p> Name Type Description <code>Promise</code> <p>A Promise that runs until failure or success</p>"},{"location":"api/procedural/behavior/#sbs_utils.procedural.behavior.bt_repeat","title":"<code>bt_repeat(a_bt_promise, count)</code>","text":"<p>reruns behavior tree a number of times Behavior promise has a reset() to rerun</p> <p>Parameters:</p> Name Type Description Default <code>a_bt_promise</code> <code>promise</code> <p>The promise to run</p> required <p>Returns:</p> Name Type Description <code>Promise</code> <p>A Promise that runs until success</p>"},{"location":"api/procedural/behavior/#sbs_utils.procedural.behavior.bt_sel","title":"<code>bt_sel(*args, **kwargs)</code>","text":"<p>behavior tree select returns success if any task has success</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>labels</code> <p>The arguments are labels</p> <code>()</code> <code>kwargs</code> <code>any</code> <p>data = will pass data the the behavior tasks.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Promise</code> <p>A Promise that runs until failure or success</p>"},{"location":"api/procedural/behavior/#sbs_utils.procedural.behavior.bt_seq","title":"<code>bt_seq(*args, **kwargs)</code>","text":"<p>behavior tree sequence only returns success if the whole sequence has success</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>labels</code> <p>The arguments are labels</p> <code>()</code> <code>kwargs</code> <code>any</code> <p>data = will pass data the the behavior tasks.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Promise</code> <p>A Promise that runs until failure or success</p>"},{"location":"api/procedural/behavior/#sbs_utils.procedural.behavior.bt_set_variable","title":"<code>bt_set_variable(name, value)</code>","text":"<p>sets a variable on the blackboard data of a behavior tree</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The variable name to set</p> required <code>value</code> <code>any</code> <p>The value to set</p> required"},{"location":"api/procedural/behavior/#sbs_utils.procedural.behavior.bt_until_fail","title":"<code>bt_until_fail(a_bt_promise)</code>","text":"<p>reruns behavior tree until failure Behavior promise has a reset() to rerun</p> <p>Parameters:</p> Name Type Description Default <code>a_bt_promise</code> <code>promise</code> <p>The promise to run</p> required <p>Returns:</p> Name Type Description <code>Promise</code> <p>A Promise that runs until failure</p>"},{"location":"api/procedural/behavior/#sbs_utils.procedural.behavior.bt_until_success","title":"<code>bt_until_success(a_bt_promise)</code>","text":"<p>reruns behavior tree until success  Behavior promise has a reset() to rerun</p> <p>Parameters:</p> Name Type Description Default <code>a_bt_promise</code> <code>promise</code> <p>The promise to run</p> required <p>Returns:</p> Name Type Description <code>Promise</code> <p>A Promise that runs until success</p>"},{"location":"api/procedural/comms/","title":"The comms system","text":""},{"location":"api/procedural/comms/#sbs_utils.procedural.comms.comms","title":"<code>comms(path=None, buttons=None, timeout=None)</code>","text":"<p>Present the comms buttons. and wait for a choice. The timeout can be any promise, but typically is a made using the timeout function.</p> <p>Parameters:</p> Name Type Description Default <code>buttons</code> <code>dict</code> <p>An dict of button dat key = button properties value label to process button press</p> <code>None</code> <code>timeout</code> <code>Promise</code> <p>The comms will end if this promise finishes. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Promise</code> <p>A Promise that finishes when a comms button is selected</p>"},{"location":"api/procedural/comms/#sbs_utils.procedural.comms.comms_broadcast","title":"<code>comms_broadcast(ids_or_obj, msg, color='#fff')</code>","text":"<p>Send text to the text waterfall The ids can be player ship ids or client/console ids</p> <p>Parameters:</p> Name Type Description Default <code>ids_or_obj</code> <code>id or objecr</code> <p>A set or single id or object to send to, </p> required <code>msg</code> <code>str</code> <p>The text to send</p> required <code>color</code> <code>str</code> <p>The Color for the text. Defaults to \"#fff\".</p> <code>'#fff'</code>"},{"location":"api/procedural/comms/#sbs_utils.procedural.comms.comms_info","title":"<code>comms_info(name, face=None, color=None)</code>","text":"<p>Set the communication information status in the comms console</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name to present</p> required <code>face</code> <code>str</code> <p>The face string of the face. Defaults to None.</p> <code>None</code> <code>color</code> <code>str</code> <p>The colot of the text. Defaults to None.</p> <code>None</code>"},{"location":"api/procedural/comms/#sbs_utils.procedural.comms.comms_message","title":"<code>comms_message(msg, from_ids_or_obj, to_ids_or_obj, title=None, face=None, color='#fff', title_color=None, is_receive=True, from_name=None)</code>","text":"<p>Send a Comms message  This is a lower level function that lets you have more control the sender and receiver</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to send</p> required <code>from_ids_or_obj</code> <code>idset</code> <p>The senders of the message</p> required <code>to_ids_or_obj</code> <code>idset</code> <p>The set or receivers</p> required <code>title</code> <code>str</code> <p>The title text. Defaults to None.</p> <code>None</code> <code>face</code> <code>str</code> <p>The face string to use. Defaults to None.</p> <code>None</code> <code>color</code> <code>str</code> <p>The color of the body text. Defaults to \"#fff\".</p> <code>'#fff'</code> <code>title_color</code> <code>str</code> <p>The color of the title text. Defaults to None.</p> <code>None</code>"},{"location":"api/procedural/comms/#sbs_utils.procedural.comms.comms_receive","title":"<code>comms_receive(msg, title=None, face=None, color='#fff', title_color=None)</code>","text":"<p>Receive a message on a player ship from another ship It uses the current context to determine the sender and receiver. typically from the event that it being handled provide the context.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to send</p> required <code>title</code> <code>str</code> <p>The title text. Defaults to None.</p> <code>None</code> <code>face</code> <code>str</code> <p>The face string of the face to use. Defaults to None.</p> <code>None</code> <code>color</code> <code>str</code> <p>The body text color. Defaults to \"#fff\".</p> <code>'#fff'</code> <code>title_color</code> <code>str</code> <p>The title text color. Defaults to None.</p> <code>None</code>"},{"location":"api/procedural/comms/#sbs_utils.procedural.comms.comms_receive_internal","title":"<code>comms_receive_internal(msg, ids_or_obj=None, from_name=None, title=None, face=None, color='#fff', title_color=None)</code>","text":"<p>Receiver a message within a player ship It uses the current context to determine the sender and receiver. typically from the event that it being handled provide the context.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to send</p> required <code>title</code> <code>str</code> <p>The title text. Defaults to None.</p> <code>None</code> <code>face</code> <code>str</code> <p>The face string of the face to use. Defaults to None.</p> <code>None</code> <code>color</code> <code>str</code> <p>The body text color. Defaults to \"#fff\".</p> <code>'#fff'</code> <code>title_color</code> <code>str</code> <p>The title text color. Defaults to None.</p> <code>None</code>"},{"location":"api/procedural/comms/#sbs_utils.procedural.comms.comms_speech_bubble","title":"<code>comms_speech_bubble(msg, seconds=3, color='#fff', client_id=None, selected_id=None)</code>","text":"<p>Transmits a message from a player ship It uses the current context to determine the sender and receiver. typically from the event that it being handled provide the context.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to send</p> required <code>title</code> <code>str</code> <p>The title text. Defaults to None.</p> required <code>face</code> <code>str</code> <p>The face string of the face to use. Defaults to None.</p> required <code>color</code> <code>str</code> <p>The body text color. Defaults to \"#fff\".</p> <code>'#fff'</code> <code>title_color</code> <code>str</code> <p>The title text color. Defaults to None.</p> required"},{"location":"api/procedural/comms/#sbs_utils.procedural.comms.comms_transmit","title":"<code>comms_transmit(msg, title=None, face=None, color='#fff', title_color=None)</code>","text":"<p>Transmits a message from a player ship It uses the current context to determine the sender and receiver. typically from the event that it being handled provide the context.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to send</p> required <code>title</code> <code>str</code> <p>The title text. Defaults to None.</p> <code>None</code> <code>face</code> <code>str</code> <p>The face string of the face to use. Defaults to None.</p> <code>None</code> <code>color</code> <code>str</code> <p>The body text color. Defaults to \"#fff\".</p> <code>'#fff'</code> <code>title_color</code> <code>str</code> <p>The title text color. Defaults to None.</p> <code>None</code>"},{"location":"api/procedural/comms/#sbs_utils.procedural.comms.comms_transmit_internal","title":"<code>comms_transmit_internal(msg, ids_or_obj=None, to_name=None, title=None, face=None, color='#fff', title_color=None)</code>","text":"<p>Transmits a message within a player ship It uses the current context to determine the sender and receiver. typically from the event that it being handled provide the context.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to send</p> required <code>title</code> <code>str</code> <p>The title text. Defaults to None.</p> <code>None</code> <code>face</code> <code>str</code> <p>The face string of the face to use. Defaults to None.</p> <code>None</code> <code>color</code> <code>str</code> <p>The body text color. Defaults to \"#fff\".</p> <code>'#fff'</code> <code>title_color</code> <code>str</code> <p>The title text color. Defaults to None.</p> <code>None</code>"},{"location":"api/procedural/cosmos/","title":"The cosmos functions","text":""},{"location":"api/procedural/cosmos/#sbs_utils.procedural.cosmos.sim_create","title":"<code>sim_create()</code>","text":"<p>Creates a new simulation</p>"},{"location":"api/procedural/cosmos/#sbs_utils.procedural.cosmos.sim_pause","title":"<code>sim_pause()</code>","text":"<p>pauses the simulation</p>"},{"location":"api/procedural/cosmos/#sbs_utils.procedural.cosmos.sim_resume","title":"<code>sim_resume()</code>","text":"<p>resume the simulation</p>"},{"location":"api/procedural/execution/","title":"The execution system","text":""},{"location":"api/procedural/execution/#sbs_utils.procedural.execution.AWAIT","title":"<code>AWAIT(promise)</code>","text":"<p>Creates a entity to wait (non-blocking) for a promise to complete</p> <p>Parameters:</p> Name Type Description Default <code>Promise</code> <p>A promise</p> required"},{"location":"api/procedural/execution/#sbs_utils.procedural.execution.END","title":"<code>END()</code>","text":"<p>End the current task Returns:     PollResults: The poll results of the jump. used by the task.</p>"},{"location":"api/procedural/execution/#sbs_utils.procedural.execution.get_shared_variable","title":"<code>get_shared_variable(key, default=None)</code>","text":"<p>get the value of a variable at shared scope. Or returns the passed default if it doesn't exist.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>the variable name</p> required <code>default</code> <code>optional</code> <p>What to return if the variable doesn't exist. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>any</code> <p>The value of the variable, or default value</p>"},{"location":"api/procedural/execution/#sbs_utils.procedural.execution.get_variable","title":"<code>get_variable(key, default=None)</code>","text":"<p>get the value of a variable at task scope. Or returns the passed default if it doesn't exist.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>the variable name</p> required <code>default</code> <code>optional</code> <p>What to return if the variable doesn't exist. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>any</code> <p>The value of the variable, or default value</p>"},{"location":"api/procedural/execution/#sbs_utils.procedural.execution.jump","title":"<code>jump(label)</code>","text":"<p>reset the program flow to a label</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str or label</code> <p>The label to jump to</p> required <p>Returns:</p> Name Type Description <code>PollResults</code> <p>The poll results of the jump. used by the task.</p>"},{"location":"api/procedural/execution/#sbs_utils.procedural.execution.log","title":"<code>log(message, name=None, level=None)</code>","text":"<p>generate a log message</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log</p> required <code>name</code> <code>str</code> <p>Name of the logger to log to. Defaults to None.</p> <code>None</code> <code>level</code> <code>str</code> <p>The logging level to use. Defaults to None.</p> <code>None</code>"},{"location":"api/procedural/execution/#sbs_utils.procedural.execution.logger","title":"<code>logger(name=None, file=None, var=None, std_err=False)</code>","text":"<p>create or retreive a looger</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the logger. Defaults to None.</p> <code>None</code> <code>file</code> <code>str</code> <p>The file to log to. Defaults to None.</p> <code>None</code> <code>var</code> <code>str</code> <p>The name of a string variable to log to. Defaults to None.</p> <code>None</code>"},{"location":"api/procedural/execution/#sbs_utils.procedural.execution.set_shared_variable","title":"<code>set_shared_variable(key, value)</code>","text":"<p>set the value of a variable at shared scope. Or returns the passed default if it doesn't exist.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>the variable name</p> required <code>value</code> <code>any</code> <p>The value to set the variable to</p> required"},{"location":"api/procedural/execution/#sbs_utils.procedural.execution.set_variable","title":"<code>set_variable(key, value)</code>","text":"<p>set the value of a variable at task scope. Or returns the passed default if it doesn't exist.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>the variable name</p> required <code>value</code> <code>any</code> <p>The value to set the variable to</p> required"},{"location":"api/procedural/execution/#sbs_utils.procedural.execution.sub_task_all","title":"<code>sub_task_all(*args, **kwargs)</code>","text":"<p>Creates a task for each argument that is a label. Also supports a data named argument to pass the data to all the tasks.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>0..n labels</code> <p>the labels to schedule.</p> <code>()</code> <code>data</code> <code>dict</code> <p>keyword arg to pass data to the tasks.</p> required <p>Returns:     Promise: A promise that is finished when all tasks are completed.</p>"},{"location":"api/procedural/execution/#sbs_utils.procedural.execution.sub_task_schedule","title":"<code>sub_task_schedule(label, data=None, var=None)</code>","text":"<p>create an new task and start running at the specified label</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str or label</code> <p>The label to run</p> required <code>data</code> <code>duct</code> <p>Data to initialie task variables. Defaults to None.</p> <code>None</code> <code>var</code> <code>str</code> <p>Set the variable to the task created. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>MastAsyncTask</code> <p>The MAST task created</p>"},{"location":"api/procedural/execution/#sbs_utils.procedural.execution.task_all","title":"<code>task_all(*args, **kwargs)</code>","text":"<p>Creates a task for each argument that is a label. Also supports a data named argument to pass the data to all the tasks.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>0..n labels</code> <p>the labels to schedule.</p> <code>()</code> <code>data</code> <code>dict</code> <p>keyword arg to pass data to the tasks.</p> required <p>Returns:     Promise: A promise that is finished when all tasks are completed.</p>"},{"location":"api/procedural/execution/#sbs_utils.procedural.execution.task_any","title":"<code>task_any(*args, **kwargs)</code>","text":"<p>Creates a task for each argument that is a label. Also supports a data named argument to pass the data to all the tasks.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>0..n labels</code> <p>the labels to schedule.</p> <code>()</code> <code>data</code> <code>dict</code> <p>keyword arg to pass data to the tasks.</p> required <p>Returns:     Promise: A promise that is finished when any of the tasks completes.</p>"},{"location":"api/procedural/execution/#sbs_utils.procedural.execution.task_cancel","title":"<code>task_cancel(task)</code>","text":"<p>ends the specified task</p> <p>Parameters:</p> Name Type Description Default <code>task</code> <code>MastAsyncTAsk</code> <p>The task to end</p> required"},{"location":"api/procedural/execution/#sbs_utils.procedural.execution.task_schedule","title":"<code>task_schedule(label, data=None, var=None)</code>","text":"<p>create an new task and start running at the specified label</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str or label</code> <p>The label to run</p> required <code>data</code> <code>duct</code> <p>Data to initialie task variables. Defaults to None.</p> <code>None</code> <code>var</code> <code>str</code> <p>Set the variable to the task created. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>MastAsyncTask</code> <p>The MAST task created</p>"},{"location":"api/procedural/grid/","title":"Grid Object system","text":""},{"location":"api/procedural/grid/#sbs_utils.procedural.grid.get_open_grid_points","title":"<code>get_open_grid_points(id_or_obj)</code>","text":"<p>gets a list of open grid location</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>agent id or object to check</p> required <p>Returns:</p> Name Type Description <code>set</code> <p>a set of Vec3 with x and y set</p>"},{"location":"api/procedural/grid/#sbs_utils.procedural.grid.grid_clear_detailed_status","title":"<code>grid_clear_detailed_status(id_or_obj)</code>","text":"<p>clears the detailed status string of a grid object</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>The agent id of object</p> required"},{"location":"api/procedural/grid/#sbs_utils.procedural.grid.grid_clear_speech_bubble","title":"<code>grid_clear_speech_bubble(id_or_obj)</code>","text":"<p>clear the speech bubble for a grid object</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>agent id or object of the grid object</p> required"},{"location":"api/procedural/grid/#sbs_utils.procedural.grid.grid_clear_target","title":"<code>grid_clear_target(grid_obj_or_set)</code>","text":"<p>Clear the target of a grid object</p> <p>Parameters:</p> Name Type Description Default <code>grid_obj_or_set</code> <code>agent</code> <p>the id of the object or set</p> required"},{"location":"api/procedural/grid/#sbs_utils.procedural.grid.grid_close_list","title":"<code>grid_close_list(grid_obj, the_set, max_dist=None, filter_func=None)</code>","text":"<p>Find and target the closest object matching the criteria</p> <p>Parameters:</p> Name Type Description Default <code>grid_obj_or_set</code> <code>agent set</code> <p>The agent </p> required <code>target_set</code> <code>agent set</code> <p>The items to test. Defaults to None.</p> required <code>max_dist</code> <code>float</code> <p>max distance. Defaults to None.</p> <code>None</code> <code>filter_func</code> <code>_type_</code> <p>additional filer function. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[CloseData]</code> <p>CloseData list: The gird close data of the closest objects</p>"},{"location":"api/procedural/grid/#sbs_utils.procedural.grid.grid_closest","title":"<code>grid_closest(grid_obj, target_set=None, max_dist=None, filter_func=None)</code>","text":"<p>Find and target the closest object matching the criteria</p> <p>Parameters:</p> Name Type Description Default <code>grid_obj_or_set</code> <code>agent set</code> <p>The agent </p> required <code>target_set</code> <code>agent set</code> <p>The items to test. Defaults to None.</p> <code>None</code> <code>max_dist</code> <code>float</code> <p>max distance. Defaults to None.</p> <code>None</code> <code>filter_func</code> <code>_type_</code> <p>additional filer function. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>CloseData</code> <code>CloseData</code> <p>The gird close data of the closest object</p>"},{"location":"api/procedural/grid/#sbs_utils.procedural.grid.grid_detailed_status","title":"<code>grid_detailed_status(id_or_obj, status, color=None)</code>","text":"<p>sets the detailed status of a grid object</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>Agent id or object</p> required <code>status</code> <code>str</code> <p>The detailed status string</p> required <code>color</code> <code>str</code> <p>change the color of the detailed status text. None does not change the current value</p> <code>None</code>"},{"location":"api/procedural/grid/#sbs_utils.procedural.grid.grid_get_grid_data","title":"<code>grid_get_grid_data()</code>","text":"<p>get the grid data from all the grid_data.json files</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>a dictionary of grid data objects key is a ship key</p>"},{"location":"api/procedural/grid/#sbs_utils.procedural.grid.grid_get_grid_theme","title":"<code>grid_get_grid_theme()</code>","text":"<p>get the grid data from all the grid_data.json files</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>a dictionary of grid data objects key is a ship key</p>"},{"location":"api/procedural/grid/#sbs_utils.procedural.grid.grid_objects","title":"<code>grid_objects(so_id)</code>","text":"<p>get a set of agent ids of the grid objects on the specified ship</p> <p>Parameters:</p> Name Type Description Default <code>so_id</code> <code>agent</code> <p>agent id or object </p> required <p>Returns:</p> Name Type Description <code>set</code> <p>a set of agent ids</p>"},{"location":"api/procedural/grid/#sbs_utils.procedural.grid.grid_objects_at","title":"<code>grid_objects_at(so_id, x, y)</code>","text":"<p>get a set of agent ids of the grid objects on the specified ship, at the location specified</p> <p>Parameters:</p> Name Type Description Default <code>so_id</code> <code>agent</code> <p>agent id or object </p> required <code>x</code> <code>int</code> <p>The x grid location</p> required <code>y</code> <code>int</code> <p>The y grid location</p> required <p>Returns:</p> Name Type Description <code>set</code> <p>a set of agent ids</p>"},{"location":"api/procedural/grid/#sbs_utils.procedural.grid.grid_short_status","title":"<code>grid_short_status(id_or_obj, status, color=None, seconds=0, minutes=0)</code>","text":"<p>sets the short status (tool tip) and speech bubble text of a grid object</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>Agent id or object</p> required <code>status</code> <code>str</code> <p>The detailed status string</p> required <code>color</code> <code>str</code> <p>change the color of the detailed status text. None does not change the current value</p> <code>None</code> <code>seconds</code> <code>int</code> <p>The seconds for the speech bubble</p> <code>0</code> <code>minutes</code> <p>(int): The minutes for the speech bubble</p> <code>0</code>"},{"location":"api/procedural/grid/#sbs_utils.procedural.grid.grid_speech_bubble","title":"<code>grid_speech_bubble(id_or_obj, status, color=None, seconds=0, minutes=0)</code>","text":"<p>sets the speech bubble text of a grid object. The text will disappear if the seconds/minutes are set</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>Agent id or object</p> required <code>status</code> <code>str</code> <p>The detailed status string</p> required <code>color</code> <code>str</code> <p>change the color of the detailed status text. None does not change the current value</p> <code>None</code> <code>seconds</code> <code>int</code> <p>The seconds for the speech bubble</p> <code>0</code> <code>minutes</code> <p>(int): The minutes for the speech bubble</p> <code>0</code>"},{"location":"api/procedural/grid/#sbs_utils.procedural.grid.grid_target","title":"<code>grid_target(grid_obj_or_set, target_id, speed=0.01)</code>","text":"<p>Set a grid object to target the location of another grid object</p> <p>Parameters:</p> Name Type Description Default <code>grid_obj_or_set</code> <code>agent</code> <p>an id, object or set of agent(s)</p> required <code>target_id</code> <code>agent</code> <p>an agent id or object </p> required <code>speed</code> <code>float</code> <p>the speed to move. Defaults to 0.01.</p> <code>0.01</code>"},{"location":"api/procedural/grid/#sbs_utils.procedural.grid.grid_target_closest","title":"<code>grid_target_closest(grid_obj_or_set, target_set=None, max_dist=None, filter_func=None)</code>","text":"<p>Find and target the closest object matching the criteria</p> <p>Parameters:</p> Name Type Description Default <code>grid_obj_or_set</code> <code>agent set</code> <p>The agent </p> required <code>target_set</code> <code>agent set</code> <p>The items to test. Defaults to None.</p> <code>None</code> <code>max_dist</code> <code>float</code> <p>max distance. Defaults to None.</p> <code>None</code> <code>filter_func</code> <code>_type_</code> <p>additional filer function. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>GridCloseData</code> <p>The gird close data of the closest object</p>"},{"location":"api/procedural/grid/#sbs_utils.procedural.grid.grid_target_pos","title":"<code>grid_target_pos(grid_obj_or_set, x, y, speed=0.01)</code>","text":"<p>Set the grid object go to the target location</p> <p>Parameters:</p> Name Type Description Default <code>grid_obj_or_set</code> <code>agent</code> <p>An id, object or set of grid object agent(s)</p> required <code>x</code> <code>float</code> <p>x location</p> required <code>y</code> <code>float</code> <p>y location</p> required <code>speed</code> <code>float</code> <p>The grid object speed. Defaults to 0.01.</p> <code>0.01</code>"},{"location":"api/procedural/gui/","title":"GUI","text":""},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui","title":"<code>gui(buttons=None, timeout=None)</code>","text":"<p>present the gui that has been queued up</p> <p>Parameters:</p> Name Type Description Default <code>buttons</code> <code>dict</code> <p>description. Defaults to None.</p> <code>None</code> <code>timeout</code> <code>promise</code> <p>A promise that ends the gui. Typically a timeout. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Promise</code> <p>The promise for the gui, promise is done when a button is selected</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_activate_console","title":"<code>gui_activate_console(console)</code>","text":"<p>set the console name for the client</p> <p>Parameters:</p> Name Type Description Default <code>console</code> <code>str</code> <p>The console name</p> required"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_add_console_tab","title":"<code>gui_add_console_tab(id_or_obj, console, tab_name, label)</code>","text":"<p>adds a tab definition </p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>agent id or object</p> required <code>console</code> <code>str</code> <p>Console name</p> required <code>tab_name</code> <code>str</code> <p>Tab name</p> required <code>label</code> <code>label</code> <p>Label to run when tab selected</p> required"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_add_console_type","title":"<code>gui_add_console_type(path, display_name, description, label)</code>","text":"<p>adds a tab definition </p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>agent id or object</p> required <code>console</code> <code>str</code> <p>Console name</p> required <code>tab_name</code> <code>str</code> <p>Tab name</p> required <code>label</code> <code>label</code> <p>Label to run when tab selected</p> required"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_blank","title":"<code>gui_blank(count=1, style=None)</code>","text":"<p>adds an empty column to the current gui ow</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>_type_</code> <p>Style. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_button","title":"<code>gui_button(props, style=None, data=None, on_message=None, jump=None)</code>","text":"<p>Add a gui button</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of columns to use</p> required <code>style</code> <code>_type_</code> <p>Style. Defaults to None.</p> <code>None</code> <code>data</code> <code>object</code> <p>The data to pass to the button's label</p> <code>None</code> <code>on_message</code> <code>label</code> <p>A label to handle a button press</p> <code>None</code> <code>jump</code> <code>label</code> <p>A label to jump to a button press, ending the Await gui</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_change","title":"<code>gui_change(code, label)</code>","text":"<p>Trigger to watch when the specified value changes This is the python version of the mast on change construct</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>Code to evaluate</p> required <code>label</code> <code>label</code> <p>The label to jump to run when the value changes</p> required <p>Returns:</p> Name Type Description <code>trigger</code> <p>A trigger watches something and runs something when the element is clicked</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_checkbox","title":"<code>gui_checkbox(msg, style=None, var=None, data=None)</code>","text":"<p>Draw a checkbox </p> <p>Parameters:</p> Name Type Description Default <code>props</code> <code>str</code> required <code>style</code> <code>style</code> <p>Style. Defaults to None.</p> <code>None</code> <code>var</code> <code>str</code> <p>Variable name to set the value to. Defaults to None.</p> <code>None</code> <code>data</code> <code>object</code> <p>data to pass the handler. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_cinematic_auto","title":"<code>gui_cinematic_auto(client_id)</code>","text":"<p>Will automatically track the consoles assigned ship</p> <p>??? Note:     The tracked ship needs to have excitement values      player ships automatically have that set    </p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>id</code> <p>the console's client ID</p> required"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_click","title":"<code>gui_click(name_or_layout_item=None)</code>","text":"<p>Trigger to watch when the specified layout element is clicked</p> <p>Parameters:</p> Name Type Description Default <code>layout_item</code> <code>layout object</code> <p>The object to watch</p> required <p>Returns:</p> Name Type Description <code>trigger</code> <p>A trigger watches something and runs something when the element is clicked</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_console","title":"<code>gui_console(console, is_jump=False)</code>","text":"<p>Activates a console using the default set of widgets</p> <p>Parameters:</p> Name Type Description Default <code>console</code> <code>str</code> <p>The console name</p> required"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_content","title":"<code>gui_content(content, style=None, var=None)</code>","text":"<p>Place a python code widget e.g. list box using the layout system</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>widget</code> <p>A gui widget code in python</p> required <code>style</code> <code>str</code> <p>Style. Defaults to None.</p> <code>None</code> <code>var</code> <code>str</code> <p>The variable to set the widget's value to. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The layout object</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_drop_down","title":"<code>gui_drop_down(props, style=None, var=None, data=None)</code>","text":"<p>Draw a gui drop down list </p> <p>Parameters:</p> Name Type Description Default <code>props</code> <code>str</code> required <code>style</code> <code>style</code> <p>Style. Defaults to None.</p> <code>None</code> <code>var</code> <code>str</code> <p>Variable name to set the selection to. Defaults to None.</p> <code>None</code> <code>data</code> <code>object</code> <p>data to pass the handler. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_face","title":"<code>gui_face(face, style=None)</code>","text":"<p>queue a gui face element</p> <p>Parameters:</p> Name Type Description Default <code>face</code> <code>str</code> <p>description</p> required <code>style</code> <code>str</code> <p>Style. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_get_console_type","title":"<code>gui_get_console_type(key)</code>","text":"<p>Get the list of consoles defined by @console decorator labels</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_get_console_type_list","title":"<code>gui_get_console_type_list()</code>","text":"<p>Get the list of consoles defined by @console decorator labels path is added as a value</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_get_console_types","title":"<code>gui_get_console_types()</code>","text":"<p>Get the list of consoles defined by @console decorator labels</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_hide","title":"<code>gui_hide(layout_item)</code>","text":"<p>If the item is visible it will make it hidden</p> Note <p>For sections it will recalculate the layout. For individual item or row, it will hide, but not layout.  so you may also need to pair this with a gui_represent of a section</p> <p>Parameters:</p> Name Type Description Default <code>layout_item</code> <code>layout_item</code> required"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_history_back","title":"<code>gui_history_back()</code>","text":"<p>Jump back in history</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_history_clear","title":"<code>gui_history_clear()</code>","text":"<p>Clears the history for the given page</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_history_forward","title":"<code>gui_history_forward()</code>","text":"<p>Jump forward in history</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_history_jump","title":"<code>gui_history_jump(to_label, back_name=None, back_label=None, back_data=None)</code>","text":"<p>Jump to a new gui label, but remember how to return to the current state</p> <p>Parameters:</p> Name Type Description Default <code>to_label</code> <code>label</code> <p>Where to jump to</p> required <code>back_name</code> <code>str</code> <p>A name to use if displayed</p> <code>None</code> <code>back_label</code> <code>label</code> <p>The label to return to defaults to the label active when called</p> <code>None</code> <code>back_data</code> <code>dict</code> <p>A set of value to set when returning back</p> <code>None</code> <p>??? Note:     If there is forward history it will be cleared</p> <p>Returns:</p> Name Type Description <code>results</code> <code>PollResults</code> <p>PollResults of the jump</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_history_store","title":"<code>gui_history_store(back_text, back_label=None)</code>","text":"<p>store the current </p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>A mast label</p> required"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_hole","title":"<code>gui_hole(count=1, style=None)</code>","text":"<p>adds an empty column that is used by the next item</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of columns to use</p> <code>1</code> <code>style</code> <code>_type_</code> <p>Style. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_icon","title":"<code>gui_icon(props, style=None)</code>","text":"<p>queue a gui icon element</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <code>str</code> <p>description</p> required <code>style</code> <code>str</code> <p>Style. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_icon_button","title":"<code>gui_icon_button(props, style=None)</code>","text":"<p>queue a gui icon element</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <code>str</code> <p>description</p> required <code>style</code> <code>str</code> <p>Style. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_image","title":"<code>gui_image(props, style=None, fit=0)</code>","text":"<p>queue a gui image element that draw based on the fit argument. Default is stretch</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <code>str</code> <p>description</p> required <code>style</code> <code>str</code> <p>Style. Defaults to None.</p> <code>None</code> <code>fit</code> <code>int</code> <p>The type of fill, </p> <code>0</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_image_absolute","title":"<code>gui_image_absolute(props, style=None)</code>","text":"<p>queue a gui image element that draw the absolute pixels dimensions</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <code>str</code> <p>description</p> required <code>style</code> <code>str</code> <p>Style. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_image_keep_aspect_ratio","title":"<code>gui_image_keep_aspect_ratio(props, style=None)</code>","text":"<p>queue a gui image element that draw keeping the same aspect ratio, left top justified</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <code>str</code> <p>description</p> required <code>style</code> <code>str</code> <p>Style. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_image_keep_aspect_ratio_center","title":"<code>gui_image_keep_aspect_ratio_center(props, style=None)</code>","text":"<p>queue a gui image element that keeps the aspect ratio and centers when there is extra</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <code>str</code> <p>description</p> required <code>style</code> <code>str</code> <p>Style. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_image_stretch","title":"<code>gui_image_stretch(props, style=None)</code>","text":"<p>queue a gui image element that stretches to fit</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <code>str</code> <p>description</p> required <code>style</code> <code>str</code> <p>Style. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_input","title":"<code>gui_input(props, style=None, var=None, data=None)</code>","text":"<p>Draw a text type in</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <code>str</code> <p>hi, low etc.</p> required <code>style</code> <code>style</code> <p>Style. Defaults to None.</p> <code>None</code> <code>var</code> <code>str</code> <p>Variable name to set the selection to. Defaults to None.</p> <code>None</code> <code>data</code> <code>object</code> <p>data to pass the handler. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_int_slider","title":"<code>gui_int_slider(msg, style=None, var=None, data=None)</code>","text":"<p>Draw an integer slider control</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <code>str</code> <p>hi, low etc.</p> required <code>style</code> <code>style</code> <p>Style. Defaults to None.</p> <code>None</code> <code>var</code> <code>str</code> <p>Variable name to set the selection to. Defaults to None.</p> <code>None</code> <code>data</code> <code>object</code> <p>data to pass the handler. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_layout_widget","title":"<code>gui_layout_widget(widget)</code>","text":"<p>Places a specific console widget in the a layout section. Placing it at a specific location</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>str</code> <p>The gui widget</p> required <p>Returns:</p> Type Description <p>layout element: The layout element</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_message","title":"<code>gui_message(layout_item)</code>","text":"<p>Trigger to watch when the specified layout element has a message</p> <p>Parameters:</p> Name Type Description Default <code>layout_item</code> <code>layout object</code> <p>The object to watch</p> required <p>Returns:</p> Name Type Description <code>trigger</code> <p>A trigger watches something and runs something when the trigger is reached</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_radio","title":"<code>gui_radio(msg, style=None, var=None, data=None, vertical=False)</code>","text":"<p>Draw a radio button list </p> <p>Parameters:</p> Name Type Description Default <code>props</code> <code>str</code> <p>List of buttons to use</p> required <code>style</code> <code>style</code> <p>Style. Defaults to None.</p> <code>None</code> <code>var</code> <code>str</code> <p>Variable name to set the selection to. Defaults to None.</p> <code>None</code> <code>data</code> <code>object</code> <p>data to pass the handler. Defaults to None.</p> <code>None</code> <code>vertical</code> <code>bool</code> <p>Layout vertical if True, default False means horizontal</p> <code>False</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_rebuild","title":"<code>gui_rebuild(region)</code>","text":"<p>prepares a section/region to be build a new layout</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>layout_item</code> <p>a layout/Layout item</p> required <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_refresh","title":"<code>gui_refresh(label)</code>","text":"<p>refresh any gui running the specified label</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>A mast label</p> required"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_region","title":"<code>gui_region(style=None)</code>","text":"<p>Create a new gui section that uses the area specified in the style</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>style</code> <p>Style. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_remove_console_tab","title":"<code>gui_remove_console_tab(id_or_obj, console, tab_name)</code>","text":"<p>removes a tab definition </p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>agent id or object</p> required <code>console</code> <code>str</code> <p>Console name</p> required <code>tab_name</code> <code>str</code> <p>Tab name</p> required"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_remove_console_type","title":"<code>gui_remove_console_type(path, display_name, label)</code>","text":"<p>adds a tab definition </p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Console path</p> required <code>display_name</code> <code>str</code> <p>Display name</p> required <code>label</code> <code>label</code> <p>Label to run when tab selected</p> required"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_represent","title":"<code>gui_represent(layout_item)</code>","text":"<p>redraw an item</p> Note <p>For sections it will recalculate the layout and redraw all items</p> <p>Parameters:</p> Name Type Description Default <code>layout_item</code> <code>layout_item</code> required"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_reroute_clients","title":"<code>gui_reroute_clients(label, data=None, exclude=None)</code>","text":"<p>reroute client guis to run the specified label</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>Label to jump to</p> required <code>exclude</code> <code>set</code> <p>set client_id values to exclude. Defaults to None.</p> <code>None</code>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_reroute_server","title":"<code>gui_reroute_server(label, data=None)</code>","text":"<p>reroute server gui to run the specified label</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>Label to jump to</p> required"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_row","title":"<code>gui_row(style=None)</code>","text":"<p>queue a gui row</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>str</code> <p>Style. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_section","title":"<code>gui_section(style=None)</code>","text":"<p>Create a new gui section that uses the area specified in the style</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>style</code> <p>Style. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_ship","title":"<code>gui_ship(props, style=None)</code>","text":"<p>renders a 3d image of the ship </p> <p>Parameters:</p> Name Type Description Default <code>props</code> <code>str</code> <p>The ship key</p> required <code>style</code> <code>str</code> <p>Style. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_show","title":"<code>gui_show(layout_item)</code>","text":"<p>gui show. If the item is hidden it will make it visible again</p> Note <p>For sections it will recalculate the layout. For individual item or row, it will hide, but not layout.  so you may also need to pair this with a gui_represent of a section</p> <p>Parameters:</p> Name Type Description Default <code>layout_item</code> <code>layout_item</code> required"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_slider","title":"<code>gui_slider(msg, style=None, var=None, data=None, is_int=False)</code>","text":"<p>Draw a slider control</p> <p>Parameters:</p> Name Type Description Default <code>props</code> <code>str</code> <p>hi, low etc.</p> required <code>style</code> <code>style</code> <p>Style. Defaults to None.</p> <code>None</code> <code>var</code> <code>str</code> <p>Variable name to set the selection to. Defaults to None.</p> <code>None</code> <code>data</code> <code>object</code> <p>data to pass the handler. Defaults to None.</p> <code>None</code> <code>is_int</code> <code>bool</code> <p>Use only integers values</p> <code>False</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_sub_section","title":"<code>gui_sub_section(style=None)</code>","text":"<p>Create a new gui section that uses the area specified in the style</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>style</code> <p>Style. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_text","title":"<code>gui_text(props, style=None)</code>","text":"<p>Add a gui text object</p> <p>valid properties      text     color     font</p> <p>props (str): property string  style (style, optional): The style</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_text_area","title":"<code>gui_text_area(props, style=None)</code>","text":"<p>Add a gui text object</p> <p>valid properties      text     color     font</p> <p>props (str): property string  style (style, optional): The style</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_update","title":"<code>gui_update(tag, props, shared=False, test=None)</code>","text":"<p>Update the properties of a current gui element</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>str</code> required <code>props</code> <code>str</code> <p>The new properties to use</p> required <code>shared</code> <code>bool</code> <p>Update all gui screen if true. Defaults to False.</p> <code>False</code> <code>test</code> <code>dict</code> <p>Check the variable (key) update if any value is different than the test. Defaults to None.</p> <code>None</code>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_update_widget_list","title":"<code>gui_update_widget_list(add_widgets=None, remove_widgets=None)</code>","text":"<p>Set the engine widget list. i.e. controls engine controls</p> <p>Parameters:</p> Name Type Description Default <code>console</code> <code>str</code> <p>The console type name</p> required <code>widgets</code> <code>str</code> <p>The list of widgets</p> required"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_update_widgets","title":"<code>gui_update_widgets(add_widgets, remove_widgets)</code>","text":"<p>Set the engine widget list. i.e. controls engine controls</p> <p>Parameters:</p> Name Type Description Default <code>console</code> <code>str</code> <p>The console type name</p> required <code>widgets</code> <code>str</code> <p>The list of widgets</p> required"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_vradio","title":"<code>gui_vradio(msg, style=None, var=None, data=None)</code>","text":"<p>Draw a vertical radio button list </p> <p>Parameters:</p> Name Type Description Default <code>props</code> <code>str</code> <p>List of buttons to use</p> required <code>style</code> <code>style</code> <p>Style. Defaults to None.</p> <code>None</code> <code>var</code> <code>str</code> <p>Variable name to set the selection to. Defaults to None.</p> <code>None</code> <code>data</code> <code>object</code> <p>data to pass the handler. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>layout object: The Layout object created</p>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_widget_list","title":"<code>gui_widget_list(console, widgets)</code>","text":"<p>Set the engine widget list. i.e. controls engine controls</p> <p>Parameters:</p> Name Type Description Default <code>console</code> <code>str</code> <p>The console type name</p> required <code>widgets</code> <code>str</code> <p>The list of widgets</p> required"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_widget_list_clear","title":"<code>gui_widget_list_clear()</code>","text":"<p>clear the widet list on the client</p>"},{"location":"api/procedural/inventory/","title":"The Inventory system","text":""},{"location":"api/procedural/inventory/#sbs_utils.procedural.inventory.get_inventory_value","title":"<code>get_inventory_value(id_or_object, key, default=None)</code>","text":"<p>get inventory value with the given key the the agent  has     this is the way to create a collection in inventory</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>The agent id or object to check</p> required <code>key</code> <code>str</code> <p>The key/name of the inventory item</p> required <code>default</code> <code>any</code> <p>the default value data</p> <code>None</code>"},{"location":"api/procedural/inventory/#sbs_utils.procedural.inventory.get_shared_inventory_value","title":"<code>get_shared_inventory_value(key, default=None)</code>","text":"<p>get inventory value from the shared data agent</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key/name of the inventory item</p> required <code>default</code> <code>any</code> <p>the value to return if not found</p> <code>None</code>"},{"location":"api/procedural/inventory/#sbs_utils.procedural.inventory.has_inventory","title":"<code>has_inventory(key)</code>","text":"<p>get the set of agent ids that have a inventory item with the given key</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key/name of the inventory item</p> required <p>Returns:</p> Name Type Description <code>set</code> <p>set of ids</p>"},{"location":"api/procedural/inventory/#sbs_utils.procedural.inventory.has_inventory_value","title":"<code>has_inventory_value(key, value)</code>","text":"<p>get the object that have a inventory item with the given key</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key/name of the inventory item</p> required <p>Returns:</p> Name Type Description <code>set</code> <p>set of ids</p>"},{"location":"api/procedural/inventory/#sbs_utils.procedural.inventory.inventory_set","title":"<code>inventory_set(source, key)</code>","text":"<p>get the set that inventory items with the given key the the link source has     this is the way to create a collection in inventory</p> <p>Note</p> <p>This is like set_inventory_value bu the value is a set</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>agent</code> <p>The agent id or object to check</p> required <code>key</code> <code>str</code> <p>The key/name of the inventory item</p> required <code>set</code> <p>set of data</p> required"},{"location":"api/procedural/inventory/#sbs_utils.procedural.inventory.inventory_value","title":"<code>inventory_value(id_or_obj, key, default=None)</code>","text":"<p>get inventory value with the given key the the agent  has     this is the way to create a collection in inventory</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>The agent id or object to check</p> required <code>key</code> <code>str</code> <p>The key/name of the inventory item</p> required <code>default</code> <code>any</code> <p>the default value data</p> <code>None</code>"},{"location":"api/procedural/inventory/#sbs_utils.procedural.inventory.set_inventory_value","title":"<code>set_inventory_value(so, key, value)</code>","text":"<p>set inventory value with the given key the the agent  has     this is the way to create a collection in inventory</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>The agent id or object to check</p> required <code>key</code> <code>str</code> <p>The key/name of the inventory item</p> required <code>value</code> <code>any</code> <p>the value</p> required"},{"location":"api/procedural/inventory/#sbs_utils.procedural.inventory.set_shared_inventory_value","title":"<code>set_shared_inventory_value(key, value)</code>","text":"<p>set inventory value with the given key on the shared agent</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key/name of the inventory item</p> required <code>value</code> <code>any</code> <p>the value</p> required"},{"location":"api/procedural/links/","title":"Links","text":""},{"location":"api/procedural/links/#sbs_utils.procedural.links.get_dedicated_link","title":"<code>get_dedicated_link(so, link)</code>","text":"<p>Get the agent linked to</p> <p>Note</p> <p>Dedicated link means there is only one thing linked to 1-1</p> <p>Parameters:</p> Name Type Description Default <code>link</code> <code>str</code> <p>The link name</p> required <p>Returns:</p> Name Type Description <code>agent</code> <p>The single agent or None</p>"},{"location":"api/procedural/links/#sbs_utils.procedural.links.has_link","title":"<code>has_link(key)</code>","text":"<p>get the object that have a link item with the given key</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key/name of the inventory item</p> required <p>Returns:</p> Name Type Description <code>set</code> <p>set of ids</p>"},{"location":"api/procedural/links/#sbs_utils.procedural.links.has_link_to","title":"<code>has_link_to(link_source, link_name, link_target)</code>","text":"<p>check if target and source are linked to for the given key</p> <p>Parameters:</p> Name Type Description Default <code>link_source</code> <code>agent</code> <p>The agent hosting the link</p> required <code>link_name</code> <code>str</code> <p>The key/name of the inventory item</p> required <p>Returns:</p> Type Description <p>set | None: set of ids</p>"},{"location":"api/procedural/links/#sbs_utils.procedural.links.link","title":"<code>link(set_holder, link, set_to)</code>","text":"<p>create a link between agents</p> <p>Parameters:</p> Name Type Description Default <code>set_holder</code> <code>agent | agent set</code> <p>The host (set) of the link</p> required <code>link</code> <code>str</code> <p>The link name</p> required <code>set_to</code> <code>agent|agent set</code> <p>The items to link to</p> required"},{"location":"api/procedural/links/#sbs_utils.procedural.links.linked_to","title":"<code>linked_to(link_source, link_name)</code>","text":"<p>get the set that inventor the source is linked to for the given key</p> <p>Parameters:</p> Name Type Description Default <code>link_source(id)</code> <p>The id object to check</p> required <code>link_name</code> <code>str</code> <p>The key/name of the inventory item</p> required <code>set</code> <code>| None</code> <p>set of ids</p> required"},{"location":"api/procedural/links/#sbs_utils.procedural.links.set_dedicated_link","title":"<code>set_dedicated_link(so, link, to)</code>","text":"<p>Set the agent linked to</p> <p>Note</p> <p>Dedicated link means there is only one thing linked to 1-1</p> <p>Parameters:</p> Name Type Description Default <code>link</code> <code>str</code> <p>The link name</p> required <code>to</code> <code>agent</code> <p>The single agent or None</p> required"},{"location":"api/procedural/links/#sbs_utils.procedural.links.unlink","title":"<code>unlink(set_holder, link, set_to)</code>","text":"<p>removes the link between things</p> <p>Parameters:</p> Name Type Description Default <code>set_holder</code> <code>agent|agent set</code> <p>An agent or set of agents (ids or objects)</p> required <code>link</code> <code>str</code> <p>Link name</p> required <code>set_to</code> <code>agent|agent set</code> <p>The agents(s) to add a link to</p> required"},{"location":"api/procedural/query/","title":"The query module","text":""},{"location":"api/procedural/query/#overview","title":"Overview","text":""},{"location":"api/procedural/query/#api-query","title":"API: query","text":""},{"location":"api/procedural/query/#sbs_utils.procedural.query.all_objects_exists","title":"<code>all_objects_exists(the_set)</code>","text":"<p>tests to see if all the objects in the set exist</p> <p>Parameters:</p> Name Type Description Default <code>the_set</code> <code>set</code> <p>A set, list or single object internally it will assure it is a list</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>False if any object does not exist, True if all exist</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.get_comms_selection","title":"<code>get_comms_selection(id_or_not)</code>","text":"<p>gets the id of the comms selection</p> <p>Parameters:</p> Name Type Description Default <code>id_or_not</code> <code>agent</code> <p>agent id or object</p> required <p>Returns:</p> Type Description <p>agent id | None: The agent id or None</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.get_grid_selection","title":"<code>get_grid_selection(id_or_not)</code>","text":"<p>gets the id of the engineering grid selection</p> <p>Parameters:</p> Name Type Description Default <code>id_or_not</code> <code>agent</code> <p>agent id or object</p> required <p>Returns:</p> Type Description <p>agent id | None: The agent id or None</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.get_science_selection","title":"<code>get_science_selection(id_or_not)</code>","text":"<p>gets the id of the science selection</p> <p>Parameters:</p> Name Type Description Default <code>id_or_not</code> <code>agent</code> <p>agent id or object</p> required <p>Returns:</p> Type Description <p>agent id | None: The agent id or None</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.get_side","title":"<code>get_side(id_or_obj)</code>","text":"<p>gets the side of the agent</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>agent id or object</p> required <p>Returns:</p> Type Description <p>str|None: the side</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.get_weapons_selection","title":"<code>get_weapons_selection(id_or_not)</code>","text":"<p>gets the id of the weapons selection</p> <p>Parameters:</p> Name Type Description Default <code>id_or_not</code> <code>agent</code> <p>agent id or object</p> required <p>Returns:</p> Type Description <p>agent id | None: The agent id or None</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.is_client_id","title":"<code>is_client_id(id)</code>","text":"<p>checks if the agent is a client/console id</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>agent</code> <p>Agent id or object</p> required <p>Returns:</p> Name Type Description <code>bool</code>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.is_grid_object_id","title":"<code>is_grid_object_id(id)</code>","text":"<p>checks if the agent is a grid object id</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>agent</code> <p>Agent id or object</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>grid object</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.is_space_object_id","title":"<code>is_space_object_id(id)</code>","text":"<p>checks if the agent is a space object id</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>agent</code> <p>Agent id or object</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>true if it is a space object</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.is_story_id","title":"<code>is_story_id(id)</code>","text":"<p>checks if the agent is a story id</p> <p>Note</p> <p>Story agent are object not in the engine. e.g. Fleets</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>agent</code> <p>Agent id or object</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the agent is a story object</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.is_task_id","title":"<code>is_task_id(id)</code>","text":"<p>checks if the agent is a task id</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>agent</code> <p>Agent id or object</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the agent is a task</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.object_exists","title":"<code>object_exists(so_id)</code>","text":"<p>check the engine to see if the item exists</p> <p>Parameters:</p> Name Type Description Default <code>so_id</code> <code>agent</code> <p>agent like data converted to id internally</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>if the object exists in the engine</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.random_id","title":"<code>random_id(the_set)</code>","text":"<p>get the object from the set provide</p> <p>Parameters:</p> Name Type Description Default <code>the_set</code> <code>set</code> <p>a set, list etc. of ids or agents</p> required <p>Returns:</p> Name Type Description <code>id</code> <p>The id of one of the objects</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.random_object","title":"<code>random_object(the_set)</code>","text":"<p>get the object from the set provide</p> <p>Parameters:</p> Name Type Description Default <code>the_set</code> <code>set</code> <p>a set, list etc. of ids or agents</p> required <p>Returns:</p> Name Type Description <code>agent</code> <p>The one of the objects</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.random_object_list","title":"<code>random_object_list(the_set, count=1)</code>","text":"<p>get a list of objects selected randomly from the set provided</p> <p>Parameters:</p> Name Type Description Default <code>the_set</code> <code>set</code> <p>Set of Ids</p> required <code>count</code> <code>int</code> <p>The number of objects to pick</p> <code>1</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of Agent</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.safe_int","title":"<code>safe_int(s, defa=0)</code>","text":"<p>gets an integer or None for the passed data</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>The source assumed str, but could also be a number</p> required <code>defa</code> <code>int</code> <p>What to return of cannot get an integer. Defaults to 0.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>int</code> <p>the integer or the default</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.set_comms_selection","title":"<code>set_comms_selection(id_or_not, other_id_or_obj)</code>","text":"<p>sets the id of the comms selection</p> <p>Parameters:</p> Name Type Description Default <code>id_or_not</code> <code>agent</code> <p>agent id or object of the player ship</p> required <code>other_id_or_obj</code> <p>The agent id or object target agent</p> required"},{"location":"api/procedural/query/#sbs_utils.procedural.query.set_grid_selection","title":"<code>set_grid_selection(id_or_not, other_id_or_obj)</code>","text":"<p>sets the id of the engineering grid selection</p> <p>Parameters:</p> Name Type Description Default <code>id_or_not</code> <code>agent</code> <p>agent id or object of the player ship</p> required <code>other_id_or_obj</code> <p>The agent id or object target agent</p> required"},{"location":"api/procedural/query/#sbs_utils.procedural.query.set_science_selection","title":"<code>set_science_selection(id_or_not, other_id_or_obj)</code>","text":"<p>sets the id of the science selection</p> <p>Parameters:</p> Name Type Description Default <code>id_or_not</code> <code>agent</code> <p>agent id or object of the player ship</p> required <code>other_id_or_obj</code> <p>The agent id or object target agent</p> required"},{"location":"api/procedural/query/#sbs_utils.procedural.query.set_weapons_selection","title":"<code>set_weapons_selection(id_or_not, other_id_or_obj)</code>","text":"<p>sets the id of the weapons selection</p> <p>Parameters:</p> Name Type Description Default <code>id_or_not</code> <code>agent</code> <p>agent id or object of the player ship</p> required <code>other_id_or_obj</code> <p>The agent id or object target agent</p> required"},{"location":"api/procedural/query/#sbs_utils.procedural.query.to_blob","title":"<code>to_blob(id_or_obj)</code>","text":"<p>gets the engine dataset of the specified agent</p> <p>Note</p> <p>Same as to_data_set</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>Agent id or object</p> required <p>Returns:</p> Type Description <p>data set| None: Returns the data or None if it does not exist</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.to_data_set","title":"<code>to_data_set(id_or_obj)</code>","text":"<p>gets the engine dataset of the specified agent</p> <p>Note</p> <p>Same as to_data_set</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>Agent id or object</p> required <p>Returns:</p> Type Description <p>data set| None: Returns the data or None if it does not exist</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.to_engine_object","title":"<code>to_engine_object(id_or_obj)</code>","text":"<p>converts the agent to get its engine object pointer</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>agent</code> <p>Agent id or object</p> required <p>Returns:</p> Name Type Description <code>pointer</code> <p>A C++ pointer to the engine object</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.to_id","title":"<code>to_id(other)</code>","text":"<p>converts item passed to an agent id</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Agent | CloseData | int</code> <p>The agent</p> required <p>Returns:</p> Name Type Description <code>id</code> <p>The agent id</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.to_id_list","title":"<code>to_id_list(the_set)</code>","text":"<p>converts a set to a list of ids</p> <p>Parameters:</p> Name Type Description Default <code>the_set</code> <code>set | list</code> <p>a set of agents or ids</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>of agent ids</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.to_list","title":"<code>to_list(other)</code>","text":"<p>converts a single object/id, set ot list of things to a list</p> <p>Parameters:</p> Name Type Description Default <code>the_set</code> <code>set | list</code> <p>a set of agent ids</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>containing whatever was passed in</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.to_object","title":"<code>to_object(other)</code>","text":"<p>converts the item passed to an agent</p> Note <p>Retrun of None could mean the agent no longer exists</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Agent | CloseData | int</code> <p>The agent ID or other agent like data</p> required <p>Returns:</p> Type Description <p>agent | None: The agent or None</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.to_object_list","title":"<code>to_object_list(the_set)</code>","text":"<p>to_object_list converts a set to a list of objects</p> <p>Parameters:</p> Name Type Description Default <code>the_set</code> <code>set | list</code> <p>a set of agent ids</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>of Agents</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.to_py_object_list","title":"<code>to_py_object_list(the_set)</code>","text":"<p>to_py_object_list</p> <p>converts a set of ids to a set of objects</p> <p>Returns:</p> Type Description <p>list Agent</p>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.to_set","title":"<code>to_set(other)</code>","text":"<p>converts a single object/id, set ot list of things to a set of ids</p> <p>Parameters:</p> Name Type Description Default <code>the_set</code> <code>set</code> <p>set, list or single item</p> required <p>Returns:</p> Type Description <p>set of things</p>"},{"location":"api/procedural/roles/","title":"The roles system","text":"<p>The SpaceObject class has methods for assigning and removing 'roles' to objects.</p> <p>Roles are like sides but can be more dynamic and are not seen by the simulation. You can have multiple roles on an object. Roles can be used in targeting etc.</p> <p>** This need more documentation** placing examples for now</p>"},{"location":"api/procedural/roles/#adding-a-role","title":"Adding a role","text":"Python <pre><code>add_role(some_id, 'spy')\n</code></pre>"},{"location":"api/procedural/roles/#remove-a-role","title":"Remove a role","text":"Python <pre><code>remove_role(some_id, 'spy')\n</code></pre>"},{"location":"api/procedural/roles/#check-for-a-role","title":"Check for a role","text":"PyThon <pre><code>if has_role(some_id, 'spy')\n      pass\n</code></pre>"},{"location":"api/procedural/roles/#using-with-targeting","title":"Using with targeting","text":"PyThon <pre><code>close = closest(some_id, role(\"spy\"))\n# class names are included in roles\nclose = closest(some_id, role(\"station\"))\n# side is included in roles\nclose = closest(some_id, role(\"tsn\"))\n</code></pre>"},{"location":"api/procedural/roles/#api-roles","title":"API: Roles","text":""},{"location":"api/procedural/roles/#sbs_utils.procedural.roles.add_role","title":"<code>add_role(set_holder, role)</code>","text":"<p>add a role to a set of agents</p> <p>Parameters:</p> Name Type Description Default <code>set_holder</code> <code>agent set</code> <p>a set of IDs or </p> required <code>role</code> <code>str</code> <p>The role to add</p> required"},{"location":"api/procedural/roles/#sbs_utils.procedural.roles.all_roles","title":"<code>all_roles(roles)</code>","text":"<p>returns a set of all the agents with a given role.</p> <p>Parameters:</p> Name Type Description Default <code>roles</code> <code>str</code> <p>The roles comma separated </p> required <p>Returns:</p> Type Description <p>agent id set: a set of agent IDs</p>"},{"location":"api/procedural/roles/#sbs_utils.procedural.roles.any_role","title":"<code>any_role(roles)</code>","text":"<p>returns a set of all the agents with a any of the given roles.</p> <p>Parameters:</p> Name Type Description Default <code>role</code> <code>str</code> <p>The role</p> required <p>Returns:</p> Type Description <p>agent id set: a set of agent IDs</p>"},{"location":"api/procedural/roles/#sbs_utils.procedural.roles.get_race","title":"<code>get_race(id_or_obj)</code>","text":"<p>get the race of the specified agent</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>an agent id or object</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The race of the object or None</p>"},{"location":"api/procedural/roles/#sbs_utils.procedural.roles.has_role","title":"<code>has_role(so, role)</code>","text":"<p>check if an agent has a role</p> <p>Parameters:</p> Name Type Description Default <code>so</code> <code>an agent</code> <p>an agent id or object</p> required <code>role</code> <code>str</code> <p>the role to test for</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>if the agent has that role</p>"},{"location":"api/procedural/roles/#sbs_utils.procedural.roles.has_roles","title":"<code>has_roles(so, roles)</code>","text":"<p>check if an agent has all the roles specified</p> <p>Parameters:</p> Name Type Description Default <code>so</code> <code>an agent</code> <p>an agent id or object</p> required <code>role</code> <code>str</code> <p>a string comma separated roles</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>if the agent has that role</p>"},{"location":"api/procedural/roles/#sbs_utils.procedural.roles.remove_role","title":"<code>remove_role(agents, role)</code>","text":"<p>remove a role from a set of agents</p> <p>Parameters:</p> Name Type Description Default <code>agents</code> <code>agent set</code> <p>a set of IDs or </p> required <code>role</code> <code>str</code> <p>The role to add</p> required"},{"location":"api/procedural/roles/#sbs_utils.procedural.roles.role","title":"<code>role(role)</code>","text":"<p>returns a set of all the agents with a given role.</p> <p>Parameters:</p> Name Type Description Default <code>role</code> <code>str</code> <p>The role</p> required <p>Returns:</p> Type Description <p>agent id set: a set of agent IDs</p>"},{"location":"api/procedural/routes/","title":"The routes module","text":""},{"location":"api/procedural/routes/#overview","title":"Overview","text":""},{"location":"api/procedural/routes/#api-routes","title":"API: routes","text":""},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteCommsFocus","title":"<code>RouteCommsFocus</code>","text":"<p>               Bases: <code>RouteConsole</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteCommsFocus\n@label\ndef handle_comms_focus():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteCommsMessage","title":"<code>RouteCommsMessage</code>","text":"<p>               Bases: <code>RouteConsole</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteCommsMessage\n@label\ndef handle_comms_message():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteCommsSelect","title":"<code>RouteCommsSelect</code>","text":"<p>               Bases: <code>RouteConsole</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteCommsSelect\n@label\ndef handle_comms_select():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteDamageDestroy","title":"<code>RouteDamageDestroy</code>","text":"<p>               Bases: <code>RouteLifetime</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteDestroy\n@label\ndef handle_destroy():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteDamageHeat","title":"<code>RouteDamageHeat</code>","text":"<p>               Bases: <code>RouteDamageSource</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteDamageHeat\n@label\ndef handle_damage_heat():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteDamageInternal","title":"<code>RouteDamageInternal</code>","text":"<p>               Bases: <code>RouteDamageSource</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteDamageInternal\n@label\ndef handle_damage_internal():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteDamageKilled","title":"<code>RouteDamageKilled</code>","text":"<p>               Bases: <code>RouteLifetime</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteDestroy\n@label\ndef handle_destroy():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteDamageObject","title":"<code>RouteDamageObject</code>","text":"<p>               Bases: <code>RouteDamageSource</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteDamageObject\n@label\ndef handle_damage_object():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteDockHangar","title":"<code>RouteDockHangar</code>","text":"<p>               Bases: <code>RouteLifetime</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteDockHangar\n@label\ndef handle_dock():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteGridFocus","title":"<code>RouteGridFocus</code>","text":"<p>               Bases: <code>RouteConsole</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteGridFocus\n@label\ndef handle_grid_focus():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteGridMessage","title":"<code>RouteGridMessage</code>","text":"<p>               Bases: <code>RouteConsole</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteGridMessage\n@label\ndef handle_grid_message():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteGridPoint","title":"<code>RouteGridPoint</code>","text":"<p>               Bases: <code>RouteConsole</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteGridPoint\n@label\ndef handle_grid_point():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteGridSelect","title":"<code>RouteGridSelect</code>","text":"<p>               Bases: <code>RouteConsole</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteGridSelect\n@label\ndef handle_grid_select():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteGridSpawn","title":"<code>RouteGridSpawn</code>","text":"<p>               Bases: <code>RouteLifetime</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteGridSpawn\n@label\ndef handle_grid_spawn():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteScienceFocus","title":"<code>RouteScienceFocus</code>","text":"<p>               Bases: <code>RouteConsole</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteScienceFocus\n@label\ndef handle_science_focus():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteScienceMessage","title":"<code>RouteScienceMessage</code>","text":"<p>               Bases: <code>RouteConsole</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteScienceMessage\n@label\ndef handle_science_message():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteSciencePoint","title":"<code>RouteSciencePoint</code>","text":"<p>               Bases: <code>RouteConsole</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteSciencePoint\n@label\ndef handle_science_point():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteScienceSelect","title":"<code>RouteScienceSelect</code>","text":"<p>               Bases: <code>RouteConsole</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteScienceSelect\n@label\ndef handle_science_select():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteSpawn","title":"<code>RouteSpawn</code>","text":"<p>               Bases: <code>RouteLifetime</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteSpawn\n@label\ndef handle_spawn():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteWeaponsFocus","title":"<code>RouteWeaponsFocus</code>","text":"<p>               Bases: <code>RouteConsole</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteWeaponsFocus\n@label\ndef handle_weapons_focus():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteWeaponsPoint","title":"<code>RouteWeaponsPoint</code>","text":"<p>               Bases: <code>RouteConsole</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteWeaponsPoint\n@label\ndef handle_weapons_point():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.RouteWeaponsSelect","title":"<code>RouteWeaponsSelect</code>","text":"<p>               Bases: <code>RouteConsole</code></p> <p>decorator for routing to a python function or python class method</p> Note <p>The route is expected to be a label</p> Example <pre><code>@RouteWeaponsSelect\n@label\ndef handle_weapons_select():\n    ....\n    yield PollResults.OK_YIELD\n</code></pre>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.follow_route_select_comms","title":"<code>follow_route_select_comms(origin_id, selected_id)</code>","text":"<p>cause the comms selection route to execute</p> <p>Parameters:</p> Name Type Description Default <code>origin_id</code> <code>agent</code> <p>The agent id of the player ship</p> required <code>selected_id</code> <code>agent</code> <p>The agent id of the target space object</p> required"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.follow_route_select_grid","title":"<code>follow_route_select_grid(origin_id, selected_id)</code>","text":"<p>cause the engineering grid selection route to execute</p> <p>Parameters:</p> Name Type Description Default <code>origin_id</code> <code>agent</code> <p>The agent id of the player ship</p> required <code>selected_id</code> <code>agent</code> <p>The agent id of the target grid object</p> required"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.follow_route_select_science","title":"<code>follow_route_select_science(origin_id, selected_id)</code>","text":"<p>cause the science selection route to execute</p> <p>Parameters:</p> Name Type Description Default <code>origin_id</code> <code>agent</code> <p>The agent id of the player ship</p> required <code>selected_id</code> <code>agent</code> <p>The agent id of the target space object</p> required"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_change_console","title":"<code>route_change_console(label)</code>","text":"<p>called when a  change console button is pressed.</p> Note <p>Typically this redirects the console gui to a console selection gui.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_collision_interactive","title":"<code>route_collision_interactive(label)</code>","text":"<p>called when a space_object takes a collision.</p> Note <p>This is not intended for long running tasks</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_collision_passive","title":"<code>route_collision_passive(label)</code>","text":"<p>called when a space_object takes a collision.</p> Note <p>This is not intended for long running tasks</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_comms_navigate","title":"<code>route_comms_navigate(path, label)</code>","text":"<p>called to extend a comms navigation</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>(str): The navigation path to extend</p> required <code>label</code> <code>label</code> <p>The label to run</p> required"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_console_mainscreen_change","title":"<code>route_console_mainscreen_change(label)</code>","text":"<p>called when a  change to the main screen view occurs</p> Note <p>Typically this redirects the console gui to a gui_console</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_damage_destroy","title":"<code>route_damage_destroy(label)</code>","text":"<p>called when a space_object is destroyed.</p> Note <p>This is not intended for long running tasks</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_damage_heat","title":"<code>route_damage_heat(label)</code>","text":"<p>called when a player ship takes heat damage.</p> Note <p>This is not intended for long running tasks</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_damage_internal","title":"<code>route_damage_internal(label)</code>","text":"<p>called when a player ship takes internal damage.</p> Note <p>This is not intended for long running tasks</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_damage_killed","title":"<code>route_damage_killed(label)</code>","text":"<p>called when a space_object is about to be removed from the engine.</p> Note <p>This is not intended for long running tasks</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_damage_object","title":"<code>route_damage_object(label)</code>","text":"<p>called when a space_object takes hull damage.</p> Note <p>This is not intended for long running tasks</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_dock_hangar","title":"<code>route_dock_hangar(label)</code>","text":"<p>called when a space_object docks.</p> Note <p>This is not intended for long running tasks</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_focus_comms","title":"<code>route_focus_comms(label)</code>","text":"<p>called when comms changes selection.</p> Note <p>The label called should not be long running. Use route_select_comms for long running tasks.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_focus_comms_2d","title":"<code>route_focus_comms_2d(label)</code>","text":"<p>called when comms changes selection.</p> Note <p>The label called should not be long running. Use route_select_comms for long running tasks.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_focus_grid","title":"<code>route_focus_grid(label)</code>","text":"<p>called when engineering grid changes selection.</p> Note <p>The label called should not be long running. Use route_select_grid for long running tasks.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_focus_normal","title":"<code>route_focus_normal(label)</code>","text":"<p>called when comms changes selection.</p> Note <p>The label called should not be long running. Use route_select_comms for long running tasks.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_focus_science","title":"<code>route_focus_science(label)</code>","text":"<p>called when science changes selection.</p> Note <p>The label called should not be long running. Use route_select_science for long running tasks.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_focus_weapons","title":"<code>route_focus_weapons(label)</code>","text":"<p>called when weapons changes selection.</p> Note <p>The label called should not be long running. Use route_select_weapons for long running tasks.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_gui_navigate","title":"<code>route_gui_navigate(path, label)</code>","text":"<p>called to extend a gui navigation</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>(str): The navigation path to extend</p> required <code>label</code> <code>label</code> <p>The label to run</p> required"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_message_science","title":"<code>route_message_science(label)</code>","text":"<p>called when science changes selection.</p> Note <p>Typically used to run a task that uses an await scan</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_object_grid","title":"<code>route_object_grid(label)</code>","text":"<p>called when a grid object event occurs. i.e. grid object reached a location.</p> Note <p>Typically not a long running task</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_point_comms","title":"<code>route_point_comms(label)</code>","text":"<p>called when a a point event occurs in comms.</p> Note <p>No know use for this currently</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_point_comms_2d","title":"<code>route_point_comms_2d(label)</code>","text":"<p>called when a a point event occurs in comms.</p> Note <p>No know use for this currently</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_point_grid","title":"<code>route_point_grid(label)</code>","text":"<p>called when a a point event occurs in the engineering grid.</p> Note <p>This is not intended for long running tasks</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_point_normal","title":"<code>route_point_normal(label)</code>","text":"<p>called when a a point event occurs in comms.</p> Note <p>No know use for this currently</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_point_science","title":"<code>route_point_science(label)</code>","text":"<p>called when a a point event occurs in science by clicking the 2d view.</p> Note <p>This is not intended for long running tasks</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_point_weapons","title":"<code>route_point_weapons(label)</code>","text":"<p>called when a a point event occurs in weapons by clicking the 2d view.</p> Note <p>This is not intended for long running tasks</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_science_navigate","title":"<code>route_science_navigate(path, label)</code>","text":"<p>called to extend a gui navigation</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <p>(str): The navigation path to extend</p> required <code>label</code> <code>label</code> <p>The label to run</p> required"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_select_comms","title":"<code>route_select_comms(label)</code>","text":"<p>called when comms changes selection. Note:     Typically used to run a task that uses an await comms</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_select_comms_2d","title":"<code>route_select_comms_2d(label)</code>","text":"<p>called when comms changes selection. Note:     Typically used to run a task that uses an await comms</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_select_grid","title":"<code>route_select_grid(label)</code>","text":"<p>called when grid changes selection.</p> Note <p>Typically used to run a task that uses an await comms</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_select_normal","title":"<code>route_select_normal(label)</code>","text":"<p>called when comms changes selection. Note:     Typically used to run a task that uses an await comms</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_select_science","title":"<code>route_select_science(label)</code>","text":"<p>called when science changes selection.</p> Note <p>Typically used to run a task that uses an await scan</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_select_weapons","title":"<code>route_select_weapons(label)</code>","text":"<p>called when weapons changes selection.</p> Note <p>No know use for this yet</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_spawn","title":"<code>route_spawn(label)</code>","text":"<p>called when a space_object is spawned.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/routes/#sbs_utils.procedural.routes.route_spawn_grid","title":"<code>route_spawn_grid(label)</code>","text":"<p>called when a grid_object is spawned.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>label</code> <p>The label to run</p> required <p>Returns:</p> Type Description <p>The route: Used rarely to cancel the route</p>"},{"location":"api/procedural/science/","title":"The science module","text":""},{"location":"api/procedural/science/#overview","title":"Overview","text":""},{"location":"api/procedural/science/#api-science","title":"API: science","text":""},{"location":"api/procedural/science/#sbs_utils.procedural.science.scan","title":"<code>scan(path=None, buttons=None, timeout=None, auto_side=True)</code>","text":"<p>Start a science scan</p> <p>Parameters:</p> Name Type Description Default <code>buttons</code> <code>dict</code> <p>dictionary key = button, value = label. Defaults to None.</p> <code>None</code> <code>timeout</code> <code>_type_</code> <p>A promise typically by calling timeout(). Defaults to None.</p> <code>None</code> <code>auto_side</code> <code>bool</code> <p>If true quickly scans thing on the same side. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Promise</code> <p>A promise to wait. Typically passed to an await/AWAIT</p>"},{"location":"api/procedural/science/#sbs_utils.procedural.science.scan_results","title":"<code>scan_results(message, target=None, tab=None)</code>","text":"<p>Set the scan results for the current scan. This should be called when the scan is completed.    This is typically called as part of a scan()    This could also be called in response to a routed science message.    When pair with a scan() the target and tab are not need.    Tab is the variable SCAN_TAB, target is track </p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>scan text for a scan the is in progress</p> required <code>tab</code> <code>str</code> <p>scan tab for a scan the is in progress</p> <code>None</code>"},{"location":"api/procedural/science/#sbs_utils.procedural.science.science_set_scan_data","title":"<code>science_set_scan_data(player_id_or_obj, scan_target_id_or_obj, tabs)</code>","text":"<p>Immediately set the science scan data for a scan target    use this for things that you do not want to have scan delayed.</p> <p>Parameters:</p> Name Type Description Default <code>player_id_or_obj</code> <code>agent</code> <p>The player ship agent id or object</p> required <code>scan_target_id_or_obj</code> <code>agent</code> <p>The target ship agent id or object</p> required <code>tabs</code> <code>dict</code> <p>A dictionary to key = tab, value = scan string</p> required"},{"location":"api/procedural/ship_data/","title":"The ship_data module","text":""},{"location":"api/procedural/ship_data/#overview","title":"Overview","text":""},{"location":"api/procedural/ship_data/#api-ship-data","title":"API: ship data","text":""},{"location":"api/procedural/space_objects/","title":"The space_objects module","text":""},{"location":"api/procedural/space_objects/#overview","title":"Overview","text":""},{"location":"api/procedural/space_objects/#api-space-objects","title":"API: Space Objects","text":""},{"location":"api/procedural/space_objects/#sbs_utils.procedural.space_objects.broad_test","title":"<code>broad_test(x1, z1, x2, z2, broad_type=65520)</code>","text":"<p>returns a set of ids that are in the target rect</p> <p>Parameters:</p> Name Type Description Default <code>x1(float)</code> <p>x location (left)</p> required <code>z1(float)</code> <p>z location (top)</p> required <code>x2(float)</code> <p>x location (right)</p> required <code>z2(float)</code> <p>z location (bottom)</p> required <code>broad_type</code> <code>int</code> <p>-1=All, 0=player, 1=Active, 2=Passive. Defaults to -1.</p> <code>65520</code> <p>Returns:</p> Name Type Description <code>set</code> <p>A set of ids</p>"},{"location":"api/procedural/space_objects/#sbs_utils.procedural.space_objects.broad_test_around","title":"<code>broad_test_around(id_or_obj, width, depth, broad_type=65520)</code>","text":"<p>returns a set of ids that are around the specified object in the target rect</p> <p>Parameters:</p> Name Type Description Default <code>id_obj(agent)</code> <p>The ID or object of an agent</p> required <code>w(float)</code> <p>width</p> required <code>d(float)</code> <p>depth</p> required <code>broad_type</code> <code>int</code> <p>-1=All, 0=player, 1=Active, 2=Passive. Defaults to -1.</p> <code>65520</code> <p>Returns:</p> Name Type Description <code>set</code> <p>A set of ids</p>"},{"location":"api/procedural/space_objects/#sbs_utils.procedural.space_objects.clear_target","title":"<code>clear_target(chasers, throttle=0)</code>","text":"<p>clear the target on an agent or set of agents</p> <p>Parameters:</p> Name Type Description Default <code>chasers</code> <code>set | int | CloseData | SpawnData</code> <p>an agent or set of agents</p> required"},{"location":"api/procedural/space_objects/#sbs_utils.procedural.space_objects.closest","title":"<code>closest(the_ship, the_set, max_dist=None, filter_func=None)</code>","text":"<p>get the  close data that matches the test set, max_dist and optional filter function</p> <p>Parameters:</p> Name Type Description Default <code>the_ship</code> <code>agent</code> <p>The agent ID or object</p> required <code>the_set</code> <code>agent set</code> <p>The set of objects to test against</p> required <code>max_dist</code> <code>float</code> <p>The maximum distance to check. Defaults to None.</p> <code>None</code> <code>filter_func</code> <code>func</code> <p>An additional function to test with. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>CloseData</code> <code>CloseData</code> <p>The close object close data to get the distance</p>"},{"location":"api/procedural/space_objects/#sbs_utils.procedural.space_objects.closest_list","title":"<code>closest_list(source, the_set, max_dist=None, filter_func=None)</code>","text":"<p>get the list of close data that matches the test set, max_dist and optional filter function</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>agent</code> <p>The agent object or id of the agent</p> required <code>the_set</code> <code>agents set</code> <p>a set of ids to check against</p> required <code>max_dist</code> <code>float</code> <p>The maximum distance to include. Defaults to None.</p> <code>None</code> <code>filter_func</code> <code>function</code> <p>an additional function to check against. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[CloseData]</code> <p>list[CloseData]: The list of close objects With close data to get the distance</p>"},{"location":"api/procedural/space_objects/#sbs_utils.procedural.space_objects.closest_object","title":"<code>closest_object(the_ship, the_set, max_dist=None, filter_func=None)</code>","text":"<p>get the  close data that matches the test set, max_dist and optional filter function</p> <p>Parameters:</p> Name Type Description Default <code>the_ship</code> <code>agent</code> <p>The agent ID or object</p> required <code>the_set</code> <code>agent set</code> <p>The set of objects to test against</p> required <code>max_dist</code> <code>float</code> <p>The maximum distance to check. Defaults to None.</p> <code>None</code> <code>filter_func</code> <code>func</code> <p>An additional function to test with. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>agent</code> <code>Agent</code> <p>Return the closest agents or None</p>"},{"location":"api/procedural/space_objects/#sbs_utils.procedural.space_objects.get_engineering_value","title":"<code>get_engineering_value(id_or_obj, name, default=None)</code>","text":"<p>gets an engineering value by name</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>An agent id or object</p> required <code>name</code> <code>str</code> <p>The value to get</p> required <code>default</code> <code>float</code> <p>What to return if not found. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>float</code> <p>A value or the default</p>"},{"location":"api/procedural/space_objects/#sbs_utils.procedural.space_objects.get_pos","title":"<code>get_pos(id_or_obj)</code>","text":"<p>get the position of an agent</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent id | agent</code> <p>The agent to set position on</p> required <p>Returns:</p> Name Type Description <code>Vec3</code> <p>description</p>"},{"location":"api/procedural/space_objects/#sbs_utils.procedural.space_objects.set_engineering_value","title":"<code>set_engineering_value(id_or_obj, name, value)</code>","text":"<p>sets an engineering value by name</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>An agent id or object</p> required <code>name</code> <code>str</code> <p>The value to get</p> required <code>value</code> <code>float</code> <p>The value</p> required"},{"location":"api/procedural/space_objects/#sbs_utils.procedural.space_objects.set_pos","title":"<code>set_pos(id_or_obj, x, y=None, z=None)</code>","text":"<p>set the position of an agent or set of agents</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent|set of agent</code> <p>an agent or set of agent IDs or objects</p> required <code>x</code> <code>float | Cec3</code> <p>The x location or a vector </p> required <code>y</code> <code>float</code> <p>y location. Defaults to None.</p> <code>None</code> <code>z</code> <code>float</code> <p>z location. Defaults to None.</p> <code>None</code>"},{"location":"api/procedural/space_objects/#sbs_utils.procedural.space_objects.target","title":"<code>target(set_or_object, target_id, shoot=True, throttle=1.0, stop_dist=None)</code>","text":"<p>set Target a target for an agent/set of agents</p> <p>Parameters:</p> Name Type Description Default <code>set_or_object</code> <code>(agent, set)</code> <p>the agent or set of object to set the target on</p> required <code>target_id</code> <code>agent</code> <p>agent id or object to target</p> required <code>shoot</code> <code>bool</code> <p>whether to also lock weapons on target. Defaults to True.</p> <code>True</code> <code>throttle</code> <code>float</code> <p>The speed to travel at. Defaults to 1.0.</p> <code>1.0</code>"},{"location":"api/procedural/space_objects/#sbs_utils.procedural.space_objects.target_pos","title":"<code>target_pos(chasers, x, y, z, throttle=1.0, target_id=None, stop_dist=None)</code>","text":"<p>Set the target position of an agent or set of agents</p> <p>Parameters:</p> Name Type Description Default <code>chasers</code> <code>agent id | agent set</code> <p>the agents to set</p> required <code>x</code> <code>float</code> <p>x location</p> required <code>y</code> <code>float</code> <p>y location</p> required <code>z</code> <code>float</code> <p>z location</p> required <code>throttle</code> <code>float</code> <p>The speed to go. Defaults to 1.0.</p> <code>1.0</code> <code>target_id</code> <code>id</code> <p>What to shoot</p> <code>None</code> <code>stop_dist</code> <code>float</code> <p>The distance to stop</p> <code>None</code>"},{"location":"api/procedural/space_objects/#sbs_utils.procedural.space_objects.target_shoot","title":"<code>target_shoot(chasers, target_id=None)</code>","text":"<p>Set the target id only Args:     chasers (agent id | agent set): the agents to set     target_id (id, optional): What to shoot</p>"},{"location":"api/procedural/spawn/","title":"The spawn module","text":""},{"location":"api/procedural/spawn/#overview","title":"Overview","text":""},{"location":"api/procedural/spawn/#api-spawn","title":"API: Spawn","text":""},{"location":"api/procedural/spawn/#sbs_utils.procedural.spawn.grid_spawn","title":"<code>grid_spawn(id, name, tag, x, y, icon, color, roles)</code>","text":"<p>Spawn a grid object on a ship</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>agent</code> <p>The agent to add the grid object to</p> required <code>name</code> <code>str</code> <p>The name of the grid item</p> required <code>tag</code> <code>str</code> <p>The tag/side</p> required <code>x</code> <code>int</code> <p>the x grid location</p> required <code>y</code> <code>int</code> <p>the y grid location</p> required <code>icon</code> <code>int</code> <p>the icon index</p> required <code>color</code> <code>str</code> <p>color </p> required <code>roles</code> <code>str</code> <p>string of comma separated roles</p> required <p>Returns:</p> Name Type Description <code>GridObject</code> <p>The grid object</p>"},{"location":"api/procedural/spawn/#sbs_utils.procedural.spawn.npc_spawn","title":"<code>npc_spawn(x, y, z, name, side, art_id, behave_id)</code>","text":"<p>spawn a non-player ship</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>the x location</p> required <code>y</code> <code>float</code> <p>the y location</p> required <code>z</code> <code>float</code> <p>The z location</p> required <code>name</code> <code>str</code> <p>The name can be None</p> required <code>side</code> <code>str</code> <p>The side the the ship is on</p> required <code>art_id</code> <code>str</code> <p>The art ID to use</p> required <code>behave_id</code> <code>str</code> <p>Behavior type</p> required <p>Returns:</p> Name Type Description <code>SpawnData</code>"},{"location":"api/procedural/spawn/#sbs_utils.procedural.spawn.player_spawn","title":"<code>player_spawn(x, y, z, name, side, art_id)</code>","text":"<p>spawn a player ship</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>the x location</p> required <code>y</code> <code>float</code> <p>the y location</p> required <code>z</code> <code>float</code> <p>The z location</p> required <code>name</code> <code>str</code> <p>The name can be None</p> required <code>side</code> <code>str</code> <p>The side the the ship is on</p> required <code>art_id</code> <code>str</code> <p>The art ID to use</p> required <p>Returns:</p> Name Type Description <code>SpawnData</code>"},{"location":"api/procedural/spawn/#sbs_utils.procedural.spawn.terrain_spawn","title":"<code>terrain_spawn(x, y, z, name, side, art_id, behave_id)</code>","text":"<p>spawn a terrain (passive) object</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>the x location</p> required <code>y</code> <code>float</code> <p>the y location</p> required <code>z</code> <code>float</code> <p>The z location</p> required <code>name</code> <code>str</code> <p>The name can be None</p> required <code>side</code> <code>str</code> <p>The side the the object is on can be None</p> required <code>art_id</code> <code>str</code> <p>The art ID to use</p> required <code>behave_id</code> <code>str</code> <p>Behavior type</p> required <p>Returns:</p> Name Type Description <code>SpawnData</code>"},{"location":"api/procedural/timers/","title":"The timers and counters","text":""},{"location":"api/procedural/timers/#overview","title":"Overview","text":""},{"location":"api/procedural/timers/#api-timers-and-counters","title":"API: Timers and Counters","text":""},{"location":"api/procedural/timers/#sbs_utils.procedural.timers.clear_counter","title":"<code>clear_counter(id_or_obj, name)</code>","text":"<p>removes a counter Args:     id_or_obj (agent): The agent id or object     name (str): The name of the counter</p>"},{"location":"api/procedural/timers/#sbs_utils.procedural.timers.clear_timer","title":"<code>clear_timer(id_or_obj, name)</code>","text":"<p>deactivated a timer</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>The id or object of the agent that has the timer</p> required <code>name</code> <code>str</code> <p>Timer name</p> required"},{"location":"api/procedural/timers/#sbs_utils.procedural.timers.delay_app","title":"<code>delay_app(seconds=0, minutes=0)</code>","text":"<p>creates a Promise that waits for the specified time to elapse this is in app time (i.e. it could NOT get paused)</p> <p>Parameters:</p> Name Type Description Default <code>seconds</code> <code>int</code> <p>The number of seconds. Defaults to 0.</p> <code>0</code> <code>minutes</code> <code>int</code> <p>The number of minutes. Defaults to 0.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>Promise</code> <p>A promise that is done when time has elapsed</p>"},{"location":"api/procedural/timers/#sbs_utils.procedural.timers.delay_sim","title":"<code>delay_sim(seconds=0, minutes=0)</code>","text":"<p>creates a Promise that waits for the specified time to elapse this is in simulation time (i.e. it could get paused)</p> <p>Parameters:</p> Name Type Description Default <code>seconds</code> <code>int</code> <p>The number of seconds. Defaults to 0.</p> <code>0</code> <code>minutes</code> <code>int</code> <p>The number of minutes. Defaults to 0.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>Promise</code> <p>A promise that is done when time has elapsed</p>"},{"location":"api/procedural/timers/#sbs_utils.procedural.timers.delay_test","title":"<code>delay_test(seconds=0, minutes=0)</code>","text":"<p>creates a Promise that waits for the specified time to elapse this is for unit testing and not realtime</p> <p>Parameters:</p> Name Type Description Default <code>seconds</code> <code>int</code> <p>The number of seconds. Defaults to 0.</p> <code>0</code> <code>minutes</code> <code>int</code> <p>The number of minutes. Defaults to 0.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>Promise</code> <p>A promise that is done when time has elapsed</p>"},{"location":"api/procedural/timers/#sbs_utils.procedural.timers.format_time_remaining","title":"<code>format_time_remaining(id_or_obj, name)</code>","text":"<p>Get the remaining time on a timer and return a formatted string</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>The agent id or object</p> required <code>name</code> <code>str</code> <p>The timer name</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>A formatted string with the minutes and seconds left on the timer</p>"},{"location":"api/procedural/timers/#sbs_utils.procedural.timers.get_counter_elapsed_seconds","title":"<code>get_counter_elapsed_seconds(id_or_obj, name)</code>","text":"<p>returns the number of seconds since the counter started</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>The agent id or object </p> required <code>name</code> <code>str</code> <p>The counter name</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The number of seconds since the counter started</p>"},{"location":"api/procedural/timers/#sbs_utils.procedural.timers.get_time_remaining","title":"<code>get_time_remaining(id_or_obj, name)</code>","text":"<p>The number of seconds remaining for a timer</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>The agent id or object</p> required <code>name</code> <code>str</code> <p>The timer name</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The number of seconds remaining</p>"},{"location":"api/procedural/timers/#sbs_utils.procedural.timers.is_timer_finished","title":"<code>is_timer_finished(id_or_obj, name)</code>","text":"<p>check to see if a timer is finished</p> Note <p>if the timer is not set. this function returns true.</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>The id or object of the agent that has the timer</p> required <code>name</code> <code>str</code> <p>Timer name</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if a timer finished</p>"},{"location":"api/procedural/timers/#sbs_utils.procedural.timers.is_timer_set","title":"<code>is_timer_set(id_or_obj, name)</code>","text":"<p>check to see if a timer is running</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>The id or object of the agent that has the timer</p> required <code>name</code> <code>str</code> <p>Timer name</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if a timer exists</p>"},{"location":"api/procedural/timers/#sbs_utils.procedural.timers.is_timer_set_and_finished","title":"<code>is_timer_set_and_finished(id_or_obj, name)</code>","text":"<p>check to see if a timer was set and is finished</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>The id or object of the agent that has the timer</p> required <code>name</code> <code>str</code> <p>Timer name</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if a timer finished and was set</p>"},{"location":"api/procedural/timers/#sbs_utils.procedural.timers.set_timer","title":"<code>set_timer(id_or_obj, name, seconds=0, minutes=0)</code>","text":"<p>set up a timer</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>The agent to set the timer for</p> required <code>name</code> <code>str</code> <p>The name of the timer</p> required <code>seconds</code> <code>int</code> <p>The number of seconds. Defaults to 0.</p> <code>0</code> <code>minutes</code> <code>int</code> <p>The number of minutes. Defaults to 0.</p> <code>0</code>"},{"location":"api/procedural/timers/#sbs_utils.procedural.timers.start_counter","title":"<code>start_counter(id_or_obj, name)</code>","text":"<p>starts counting seconds</p> <p>Parameters:</p> Name Type Description Default <code>id_or_obj</code> <code>agent</code> <p>The agent to set the timer for</p> required <code>name</code> <code>str</code> <p>The name of the timer</p> required"},{"location":"api/procedural/timers/#sbs_utils.procedural.timers.timeout","title":"<code>timeout(seconds=0, minutes=0)</code>","text":"<p>creates a Promise that waits for the specified time to elapse this is in simulation time (i.e. it could NOT get paused)</p> <p>Parameters:</p> Name Type Description Default <code>seconds</code> <code>int</code> <p>The number of seconds. Defaults to 0.</p> <code>0</code> <code>minutes</code> <code>int</code> <p>The number of minutes. Defaults to 0.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>Promise</code> <p>A promise that is done when time has elapsed</p>"},{"location":"api/procedural/timers/#sbs_utils.procedural.timers.timeout_sim","title":"<code>timeout_sim(seconds=0, minutes=0)</code>","text":"<p>creates a Promise that waits for the specified time to elapse this is in simulation time (i.e. it could get paused)</p> <p>Parameters:</p> Name Type Description Default <code>seconds</code> <code>int</code> <p>The number of seconds. Defaults to 0.</p> <code>0</code> <code>minutes</code> <code>int</code> <p>The number of minutes. Defaults to 0.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>Promise</code> <p>A promise that is done when time has elapsed</p>"},{"location":"api/utility/faces/","title":"The Faces module","text":"<p>The faces module is used for creating face images for comms screens.</p> <p>Faces are based off of a set of image textures with a grid of cell images.</p> <p>The set of images is defined in allFaceFiles.txt. This file defines a key name for the texture and an image in the data\\graphics folder. Cells are 512x512 and the total images must be a valid DirectX12 pixel size.</p> <p>This set of images can be extended with new textures added to allFacesFiles.txt</p>"},{"location":"api/utility/faces/#face-generation-functions","title":"Face generation functions","text":"<p>The faces module has a set of functions to generate random faces for the base set of face image textures provided by Artemis Cosmos.</p> <p>=== \"python\"     <pre><code>self.face_desc = random_skaraan()\n</code></pre></p> <p>There are also function to make it easier to create specific faces by passing indexes to define indexes that represent cells containing know art images for things like hair, eyes, mouth etc. It may take some experimentation to find the values for your character, but this is a simplified way to create repeatable characters. Other ways to create consistent faces is to use one of the predefined class:<code>~sbs_utils.faces.Characters</code> or hand code a face string.</p> Python <pre><code>  self.face_desc = skaraan(0, 1,2,1,3)\n</code></pre>"},{"location":"api/utility/faces/#character-faces","title":"Character Faces","text":"<p>The class class:<code>~sbs_utils.faces.Characters</code> has a list of predefined face strings.</p> <p>These are a good examples for creating a face string by hand.</p>"},{"location":"api/utility/faces/#the-faces-string-syntax","title":"The faces string syntax","text":"<p>Face string is a set of layers that reference a cell in a texture separated by a semi-colon. The first layer is the lowest layer.</p> <p>  [] []; <ul> <li> the texture tag specified in allFaceFiles.txt <li> a Tint to add to the layer. e.g. changing skin tone <li> the cell's col <li> the cell's row <li> optional to offset the layer in x <li> optional to offset the layer in y"},{"location":"api/utility/faces/#api-faces-module","title":"API: faces module","text":""},{"location":"api/utility/faces/#sbs_utils.faces.Characters","title":"<code>Characters</code>","text":"<p>A set of predefined faces</p>"},{"location":"api/utility/faces/#sbs_utils.faces.arvonian","title":"<code>arvonian(face_i, eye_i, mouth_i, crown_i, collar_i)</code>","text":"<p>Create an arvonian face</p> <p>Parameters:</p> Name Type Description Default <code>face_i</code> <code> int</code> <p>The index of the face 0</p> required <code>eye_id</code> <code> int</code> <p>The index of the eyes 0-4</p> required <code>mouth_id</code> <code> int</code> <p>The index of the mouth 0-4</p> required <code>crown_id</code> <code> int or None</code> <p>The index of the crown 0-4 or None</p> required <code>collar_id</code> <code> int or None</code> <p>The index of the collar 0-4 or None</p> required <p>Returns:</p> Type Description <code>str</code> <p>A Face string</p>"},{"location":"api/utility/faces/#sbs_utils.faces.clear_face","title":"<code>clear_face(ship_id)</code>","text":"<p>Removes a face string for a specified ID</p> <p>Parameters:</p> Name Type Description Default <code>ship_id</code> <code>agent</code> <p>The id of the ship/object</p> required"},{"location":"api/utility/faces/#sbs_utils.faces.get_face","title":"<code>get_face(ship_id)</code>","text":"<p>returns a face string for a specified ID</p> <p>Parameters:</p> Name Type Description Default <code>ship_id</code> <code>agent</code> <p>The id of the ship/object</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>A Face string</p>"},{"location":"api/utility/faces/#sbs_utils.faces.kralien","title":"<code>kralien(face_i, eye_i, mouth_i, scalp_i, extra_i)</code>","text":"<p>Create an kralien face</p> <p>Parameters:</p> Name Type Description Default <code>face_i</code> <code> int</code> <p>The index of the face 0</p> required <code>eye_id</code> <code> int</code> <p>The index of the eyes 0-4</p> required <code>mouth_id</code> <code> int</code> <p>The index of the mouth 0-4</p> required <code>scalp_id</code> <code> int or None</code> <p>The index of the scalp 0-4 or None</p> required <code>extra_id</code> <code> int or None</code> <p>The index of the extra 0-4 or None</p> required <p>Returns:</p> Type Description <code>str</code> <p>A Face string</p>"},{"location":"api/utility/faces/#sbs_utils.faces.random_arvonian","title":"<code>random_arvonian()</code>","text":"<p>Create a random arvonian face</p> <p>Returns:</p> Type Description <code>str</code> <p>A Face string</p>"},{"location":"api/utility/faces/#sbs_utils.faces.random_face","title":"<code>random_face(race)</code>","text":"<p>Returns a random face for the specified race</p> <p>Parameters:</p> Name Type Description Default <code>race</code> <code>str</code> <p>The Race Terran, Torgoth etc.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The Face String</p>"},{"location":"api/utility/faces/#sbs_utils.faces.random_kralien","title":"<code>random_kralien()</code>","text":"<p>Create a random kralien face</p> <p>Returns:</p> Type Description <code>str</code> <p>A Face string</p>"},{"location":"api/utility/faces/#sbs_utils.faces.random_skaraan","title":"<code>random_skaraan()</code>","text":"<p>Create a random skaraan face</p> <p>Returns:</p> Type Description <code>str</code> <p>A Face string</p>"},{"location":"api/utility/faces/#sbs_utils.faces.random_terran","title":"<code>random_terran(face=None, civilian=None)</code>","text":"<p>Create a random terran face</p> <p>Parameters:</p> Name Type Description Default <code>face</code> <code> int or None</code> <p>The index of the hair 0=male,1=female,2=fluid male, 3=fluid female or None= random</p> <code>None</code> <code>civilian</code> <code> boolean or None</code> <p>The force this to be a civilian=True, For non-civilian=False or None= random</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>A Face string</p>"},{"location":"api/utility/faces/#sbs_utils.faces.random_terran_female","title":"<code>random_terran_female(civilian=None)</code>","text":"<p>Create a random terran female face</p> <p>Parameters:</p> Name Type Description Default <code>civilian</code> <code> boolean or None</code> <p>The force this to be a civilian=True, For non-civilian=False or None= random</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>A Face string</p>"},{"location":"api/utility/faces/#sbs_utils.faces.random_terran_fluid","title":"<code>random_terran_fluid(civilian=None)</code>","text":"<p>Create a random fluid terran face i.e. may have male or female features</p> <p>Parameters:</p> Name Type Description Default <code>civilian</code> <code> boolean or None</code> <p>The force this to be a civilian=True, For non-civilian=False or None= random</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>A Face string</p>"},{"location":"api/utility/faces/#sbs_utils.faces.random_terran_male","title":"<code>random_terran_male(civilian=None)</code>","text":"<p>Create a random terran male face</p> <p>Parameters:</p> Name Type Description Default <code>civilian</code> <code> boolean or None</code> <p>The force this to be a civilian=True, For non-civilian=False or None= random</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>A Face string</p>"},{"location":"api/utility/faces/#sbs_utils.faces.random_torgoth","title":"<code>random_torgoth()</code>","text":"<p>Create a random torgoth face</p> <p>Returns:</p> Type Description <code>str</code> <p>A Face string</p>"},{"location":"api/utility/faces/#sbs_utils.faces.random_ximni","title":"<code>random_ximni()</code>","text":"<p>Create a random ximni face</p> <p>Returns:</p> Type Description <code>str</code> <p>A Face string</p>"},{"location":"api/utility/faces/#sbs_utils.faces.set_face","title":"<code>set_face(ship_id, face)</code>","text":"<p>sets a face string for a specified ID</p> <p>Parameters:</p> Name Type Description Default <code>ship_id</code> <code>agent</code> <p>The id of the ship/object</p> required <code>face</code> <code>str</code> <p>A Face string</p> required"},{"location":"api/utility/faces/#sbs_utils.faces.skaraan","title":"<code>skaraan(face_i, eye_i, mouth_i, horn_i, hat_i)</code>","text":"<p>Create a skaraan face</p> <p>Parameters:</p> Name Type Description Default <code>face_i</code> <code> int</code> <p>The index of the face 0</p> required <code>eye_id</code> <code> int</code> <p>The index of the eyes 0-4</p> required <code>mouth_id</code> <code> int</code> <p>The index of the mouth 0-4</p> required <code>horn_id</code> <code> int or None</code> <p>The index of the horn 0-4 or None</p> required <code>hat_id</code> <code> int or None</code> <p>The index of the hat 0-4 or None</p> required <p>Returns:</p> Type Description <code>str</code> <p>A Face string</p>"},{"location":"api/utility/faces/#sbs_utils.faces.terran","title":"<code>terran(face_i, eye_i, mouth_i, hair_i, longhair_i, facial_i, extra_i, uniform_i, skintone, hairtone)</code>","text":"<p>Create an terran face</p> <p>Parameters:</p> Name Type Description Default <code>face_i</code> <code> int or None </code> <p>The index of the face 0=male, 1=female, 2=fluid_male, 3=fluid_female</p> required <code>eye_i</code> <code> int or None</code> <p>The index of the eyes 0-9</p> required <code>mouth_i</code> <code> int</code> <p>The index of the mouth 0-9</p> required <code>hair_i</code> <code> int or None</code> <p>The index of the hair 0-9 or None</p> required <code>longhair_i</code> <code> int or None</code> <p>The index of the hair 0-7 or None</p> required <code>facial_i</code> <code> int or None</code> <p>The index of the hair 0-11 or None</p> required <code>extra_i</code> <code> int or None</code> <p>The index of the extra 0-5 or None</p> required <code>uniform_i</code> <code> int or None</code> <p>The index of the uniform 0 or None. None = civilian</p> required <code>skintone_i</code> <code> int, str or None</code> <p>The index of the skintone 0-??, string = color string or None. </p> required <code>hairtone_i</code> <code> int, str or None</code> <p>The index of the skintone 0-??, string = color string  or None.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A Face string</p>"},{"location":"api/utility/faces/#sbs_utils.faces.torgoth","title":"<code>torgoth(face_i, eye_i, mouth_i, hair_i, extra_i, hat_i)</code>","text":"<p>Create a torgoth face</p> <p>Parameters:</p> Name Type Description Default <code>face_i</code> <code> int</code> <p>The index of the face 0</p> required <code>eye_id</code> <code> int</code> <p>The index of the eyes 0-4</p> required <code>mouth_id</code> <code> int</code> <p>The index of the mouth 0-4</p> required <code>hair_id</code> <code> int or None</code> <p>The index of the hair 0-4 or None</p> required <code>extra_id</code> <code> int or None</code> <p>The index of the extra 0-4 or None</p> required <code>hat_id</code> <code> int or None</code> <p>The index of the hat 0 or None</p> required <p>Returns:</p> Type Description <code>str</code> <p>A Face string</p>"},{"location":"api/utility/faces/#sbs_utils.faces.ximni","title":"<code>ximni(face_i, eye_i, mouth_i, horns_i, mask_i, collar_i)</code>","text":"<p>Create an ximni face</p> <p>Parameters:</p> Name Type Description Default <code>face_i</code> <code> int</code> <p>The index of the face 0</p> required <code>eye_id</code> <code> int</code> <p>The index of the eyes 0-4</p> required <code>mouth_id</code> <code> int</code> <p>The index of the mouth 0-4</p> required <code>horns_id</code> <code> int or None</code> <p>The index of the horns 0-4 or None</p> required <code>mask_id</code> <code> int or None</code> <p>The index of the mask 0-4 or None</p> required <code>collar_id</code> <code> int or None</code> <p>The index of the collar 0 or None</p> required <p>Returns:</p> Type Description <code>str</code> <p>A Face string</p>"},{"location":"api/utility/scatter/","title":"The Scatter API","text":""},{"location":"api/utility/scatter/#overview","title":"Overview","text":"<ul> <li>scatter </li> <li>scattervec</li> </ul> <p>They contain the same functionality. The only differ in that scattervec takes a single vec (vector) instead of three floats for x,y,z.</p>"},{"location":"api/utility/scatter/#api-scatter","title":"API: scatter","text":""},{"location":"api/utility/scatter/#sbs_utils.scatter.arc","title":"<code>arc(count, x, y, z, r, start=0.0, end=90.0, random=False)</code>","text":"<p>Calculate the points along an circular arc</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of points to generate</p> required <code>x,y,z</code> <code>(float, float, float)</code> <p>the center point/origin</p> required <code>r</code> <code>float</code> <p>radius</p> required <code>start</code> <code>float</code> <p>the angle to start at in degrees. Default 0</p> <code>0.0</code> <code>end</code> <code>float</code> <p>the angle to end at in degrees default 360</p> <code>90.0</code> <p>Returns:</p> Name Type Description <code>points</code> <code>generator</code> <p>A generator of Vec3</p>"},{"location":"api/utility/scatter/#sbs_utils.scatter.box","title":"<code>box(count, x, y, z, x2, y2, z2, centered=False, ax=0, ay=0, az=0, degrees=True)</code>","text":"<p>Calculate the points within a box</p> <p>Args: count (int): The number of points to generate</p> <p>x,y,z (float,float,float): the start point/origin     if center is true this is the center     if center is False this is the left, bottom, front x2y2,z2 (float,float,float): if center is true this is the width, height, depth     if center is false this is the right, top, back </p> <p>center (bool): when true x,y,z and its the center point     when true x2,y2,z2 is the width, height, depth     when false x,y,z is left, bottom, front     when false x2,y2,z2 is right, top, back</p> <p>Returns:</p> Name Type Description <code>points</code> <code>generator</code> <p>A generator of Vec3</p>"},{"location":"api/utility/scatter/#sbs_utils.scatter.box_fill","title":"<code>box_fill(cw, ch, cd, x, y, z, w, h, d, random=False, ax=0, ay=0, az=0, degrees=True)</code>","text":"<p>Calculate the points within a box     the box is subdivide to ideally avoid overlap</p> <p>Parameters:</p> Name Type Description Default <code>cw</code> <code>int</code> <p>The number of points to generate for each line width (x)</p> required <code>ch</code> <code>int</code> <p>The number of points to generate for each line height (y)</p> required <code>cd</code> <code>int</code> <p>The number of points to generate for each line width (z)</p> required <code>x,y,z</code> <code>(float, float, float)</code> <p>the start point/origin</p> required <code>w</code> <code>float</code> <p>the width</p> required <code>h</code> <code>float</code> <p>the height</p> required <code>d</code> <code>float</code> <p>the depth</p> required <code>random</code> <code>bool</code> <p>when true pointw will be randomly placed when false points will be evenly placed</p> <code>False</code> <p>Returns:</p> Name Type Description <code>points</code> <code>generator</code> <p>A generator of Vec3</p>"},{"location":"api/utility/scatter/#sbs_utils.scatter.line","title":"<code>line(count, start_x, start_y, start_z, end_x, end_y, end_z, random=False)</code>","text":"<p>Calculate the points along a line</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of points to generate</p> required <code>start_x</code> <code>float</code> <p>the start point/origin</p> required <code>start_y</code> <code>float</code> <p>the start point/origin</p> required <code>start_z</code> <code>float</code> <p>the start point/origin</p> required <code>end_x</code> <code>float</code> <p>the end point/origin</p> required <code>end_y</code> <code>float</code> <p>the end point/origin</p> required <code>end_z</code> <code>float</code> <p>the end point/origin</p> required <p>Returns:</p> Name Type Description <code>points</code> <code>generator</code> <p>A generator of Vec3</p>"},{"location":"api/utility/scatter/#sbs_utils.scatter.rect_fill","title":"<code>rect_fill(cw, cd, x, y, z, w, d, random=False, ax=0, ay=0, az=0, degrees=True)</code>","text":"<p>Calculate the points within a rect</p> <p>This assumes it to be on y</p> <p>Parameters:</p> Name Type Description Default <code>cw</code> <code>int</code> <p>The number of points to generate for each line width (x)</p> required <code>cd</code> <code>int</code> <p>The number of points to generate for each line depth (z)</p> required <code>xy,z</code> <code>(float, float, float)</code> <p>the start point/origin</p> required <code>w</code> <code>float</code> <p>the width (x)</p> required <code>d</code> <code>float</code> <p>the depth (z)</p> required <code>random</code> <code>bool</code> <p>when true pointw will be randomly placed when false points will be evenly placed</p> <code>False</code> <p>Returns:</p> Name Type Description <code>points</code> <code>generator</code> <p>A generator of Vec3</p>"},{"location":"api/utility/scatter/#sbs_utils.scatter.ring","title":"<code>ring(ca, cr, x, y, z, outer_r, inner_r=0, start=0.0, end=90.0, random=False)</code>","text":"<p>Calculate the points on rings with each ring has same count</p> <p>Parameters:</p> Name Type Description Default <code>ca</code> <code>int</code> <p>The number of points to generate on each ring</p> required <code>cr</code> <code>int</code> <p>The number of rings</p> required <code>x,y,z</code> <code>(float, float, float)</code> <p>the start point/origin</p> required <code>outer_r</code> <code>float</code> <p>the radius</p> required <code>inner_r</code> <code>float</code> <p>the radius inner</p> <code>0</code> <code>start</code> <code>float</code> <p>degrees start angle</p> <code>0.0</code> <code>end</code> <code>float</code> <p>degrees start angle</p> <code>90.0</code> <code>random</code> <code>bool</code> <p>when true pointw will be randomly placed. when false points will be evenly placed</p> <code>False</code> <p>Returns:</p> Name Type Description <code>points</code> <code>generator</code> <p>A generator of Vec3</p>"},{"location":"api/utility/scatter/#sbs_utils.scatter.ring_density","title":"<code>ring_density(counts, x, y, z, outer_r, inner_r=0, start=0.0, end=90.0, random=False)</code>","text":"<p>Calculate the points on rings with each ring specifying count in array</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of points to generate</p> required <code>x,y,z</code> <code>(float, float, float)</code> <p>the start point/origin</p> required <code>outer_r</code> <code>float</code> <p>the radius</p> required <code>inner_r</code> <code>float  = 0 optional</code> <p>the radius inner</p> <code>0</code> <code>start</code> <code>float (degrees</code> <p>start angle</p> <code>0.0</code> <code>end</code> <code>float (degrees</code> <p>start angle</p> <code>90.0</code> <code>random</code> <code>bool</code> <p>when true pointw will be randomly placed.  when false points will be evenly placed</p> <code>False</code> <p>Returns:</p> Name Type Description <code>points</code> <code>generator</code> <p>A generator of Vec3</p>"},{"location":"api/utility/scatter/#sbs_utils.scatter.sphere","title":"<code>sphere(count, x, y, z, r, outer=0, top_only=False, ring=False)</code>","text":"<p>Calculate the points within a sphere or ring</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of points to generate</p> required <code>x,y,z</code> <code>(float, float, float)</code> <p>the start point/origin</p> required <code>r</code> <code>float</code> <p>the radius if outer is spedified this is the inner</p> required <code>outer</code> <code>float = 0 optional</code> <p>the height</p> <code>0</code> <code>top_only</code> <code>bool</code> <p>generate only top hemispher </p> <code>False</code> <code>ring</code> <code>bool</code> <p>generate a flat ring</p> <code>False</code> <p>Returns:</p> Name Type Description <code>points</code> <code>generator</code> <p>A generator of Vec3</p>"},{"location":"api/utility/scatter/#api-scattervec","title":"API: scattervec","text":""},{"location":"api/utility/scatter/#sbs_utils.scattervec.arc","title":"<code>arc(count, v, r, start=0.0, end=90.0, random=False)</code>","text":"<p>Calculate the points along an circular arc</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of points to generate</p> required <code>v</code> <code>Vec3</code> <p>the center point/origin</p> required <code>r</code> <code>float</code> <p>radius</p> required <code>start</code> <code>float</code> <p>the angle to start at in degrees. Default 0</p> <code>0.0</code> <code>end</code> <code>float</code> <p>the angle to end at in degrees default 360</p> <code>90.0</code> <p>Returns:</p> Name Type Description <code>points</code> <code>generator</code> <p>A generator of Vec3</p>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.box","title":"<code>box(count, v1, v2, centered=False, a=None, degrees=True)</code>","text":"<p>Calculate the points within a box</p> <p>Args: count (int): The number of points to generate</p> <p>v1 (Vec2): the start point/origin     if center is true this is the center     if center is False this is the left, bottom, front v2 (Vec3): if center is true this is the width, height, depth     if center is false this is the right, top, back </p> <p>center (bool): when true x,y,z and its the center point     when true x2,y2,z2 is the width, height, depth     when false x,y,z is left, bottom, front     when false x2,y2,z2 is right, top, back</p> <p>Returns:</p> Name Type Description <code>points</code> <code>generator</code> <p>A generator of Vec3</p>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.box_fill","title":"<code>box_fill(cw, ch, cd, v, w, h, d, random=False)</code>","text":"<p>Calculate the points within a box     the box is subdivide to ideally avoid overlap</p> <p>Parameters:</p> Name Type Description Default <code>cw</code> <code>int</code> <p>The number of points to generate for each line width (x)</p> required <code>ch</code> <code>int</code> <p>The number of points to generate for each line height (y)</p> required <code>cd</code> <code>int</code> <p>The number of points to generate for each line width (z)</p> required <code>v</code> <code>Vec3</code> <p>the start point/origin</p> required <code>w</code> <code>float</code> <p>the width</p> required <code>h</code> <code>float</code> <p>the height</p> required <code>d</code> <code>float</code> <p>the depth</p> required <code>random</code> <code>bool</code> <p>when true pointw will be randomly placed when false points will be evenly placed</p> <code>False</code> <p>Returns:</p> Name Type Description <code>points</code> <code>generator</code> <p>A generator of Vec3</p>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.line","title":"<code>line(count, start, end, random=False)</code>","text":"<p>Calculate the points along a line</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of points to generate</p> required <code>start</code> <code>Vec3</code> <p>the start point/origin</p> required <code>end</code> <code>Vec3</code> <p>the end point/origin</p> required <p>Returns:</p> Name Type Description <code>points</code> <code>generator</code> <p>A generator of Vec3</p>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.rect_fill","title":"<code>rect_fill(cw, cd, v, w, d, random=False)</code>","text":"<p>Calculate the points within a rect</p> <p>This assumes it to be on y</p> <p>Parameters:</p> Name Type Description Default <code>cw</code> <code>int</code> <p>The number of points to generate for each line width (x)</p> required <code>cd</code> <code>int</code> <p>The number of points to generate for each line depth (z)</p> required <code>v</code> <code>Vec3</code> <p>the start point/origin</p> required <code>w</code> <code>float</code> <p>the width (x)</p> required <code>d</code> <code>float</code> <p>the depth (z)</p> required <code>random</code> <code>bool</code> <p>when true pointw will be randomly placed when false points will be evenly placed</p> <code>False</code> <p>Returns:</p> Name Type Description <code>points</code> <code>generator</code> <p>A generator of Vec3</p>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.ring","title":"<code>ring(ca, cr, v, outer_r, inner_r=0, start=0.0, end=90.0, random=False)</code>","text":"<p>Calculate the points on rings with each ring has same count</p> <p>Parameters:</p> Name Type Description Default <code>ca</code> <code>int</code> <p>The number of points to generate on each ring</p> required <code>cr</code> <code>int</code> <p>The number of rings</p> required <code>v</code> <code>Vec3</code> <p>the start point/origin</p> required <code>outer_r</code> <code>float</code> <p>the radius</p> required <code>inner_r</code> <code>float</code> <p>the radius inner</p> <code>0</code> <code>start</code> <code>float</code> <p>degrees start angle</p> <code>0.0</code> <code>end</code> <code>float</code> <p>degrees start angle</p> <code>90.0</code> <code>random</code> <code>bool</code> <p>when true pointw will be randomly placed. when false points will be evenly placed</p> <code>False</code> <p>Returns:</p> Name Type Description <code>points</code> <code>generator</code> <p>A generator of Vec3</p>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.ring_density","title":"<code>ring_density(counts, v, outer_r, inner_r=0, start=0.0, end=90.0, random=False)</code>","text":"<p>Calculate the points on rings with each ring specifying count in array</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of points to generate</p> required <code>v</code> <code>Vec3</code> <p>the start point/origin</p> required <code>outer_r</code> <code>float</code> <p>the radius</p> required <code>inner_r</code> <code>float</code> <p>the radius inner</p> <code>0</code> <code>start</code> <code>float</code> <p>(degrees) start angle</p> <code>0.0</code> <code>end</code> <code>float</code> <p>(degrees) start angle</p> <code>90.0</code> <code>random</code> <code>bool</code> <p>when true pointw will be randomly placed.  when false points will be evenly placed</p> <code>False</code> <p>Returns:</p> Name Type Description <code>points</code> <code>generator</code> <p>A generator of Vec3</p>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.sphere","title":"<code>sphere(count, v, r, outer=0, top_only=False, ring=False)</code>","text":"<p>Calculate the points within a sphere or ring</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of points to generate</p> required <code>v</code> <code>Vec3</code> <p>the start point/origin</p> required <code>r</code> <code>float</code> <p>the radius if outer is spedified this is the inner</p> required <code>outer</code> <code>float = 0 optional</code> <p>the height</p> <code>0</code> <code>top_only</code> <code>bool</code> <p>generate only top hemispher </p> <code>False</code> <code>ring</code> <code>bool</code> <p>generate a flat ring</p> <code>False</code> <p>Returns:</p> Name Type Description <code>points</code> <code>generator</code> <p>A generator of Vec3</p>"},{"location":"api/utility/vec/","title":"The vector class","text":""},{"location":"api/utility/vec/#api-vec3-class","title":"API: Vec3 class","text":""},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.xyz","title":"<code>xyz</code>  <code>property</code>","text":"<p>Get the vector as a tuple Useful for passing to arguments e.g. player.spawn(sim, *v.xyz())</p> <p>Returns:</p> Name Type Description <code>values</code> <code>tuple</code> <p>a tuple with x,y,z</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__add__","title":"<code>__add__(v)</code>","text":"<p>operator add immutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3 or number</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__eq__","title":"<code>__eq__(v)</code>","text":"<p>operator equals immutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>bool</code> <p>new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__iadd__","title":"<code>__iadd__(v)</code>","text":"<p>operator inline add (+=) mutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3 or number</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__imul__","title":"<code>__imul__(v)</code>","text":"<p>operator inline multiply mutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3 or number</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__isub__","title":"<code>__isub__(v)</code>","text":"<p>operator inline subtract mutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3 or number</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__itruediv__","title":"<code>__itruediv__(v)</code>","text":"<p>operator inline divide mutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3 or number</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__matmul__","title":"<code>__matmul__(v)</code>","text":"<p>operator matrix multiply (@) dot product immutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3 or number</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__mul__","title":"<code>__mul__(v)</code>","text":"<p>operator multiply immutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3 or number</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__neg__","title":"<code>__neg__()</code>","text":"<p>operator Negate a vector immutable</p> <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector negated version of this one</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__sub__","title":"<code>__sub__(v)</code>","text":"<p>operator sub immutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3 or number</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__truediv__","title":"<code>__truediv__(v)</code>","text":"<p>operator divide immutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3 or number</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.add","title":"<code>add(v)</code>","text":"<p>add immutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3 or number</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.angleTo","title":"<code>angleTo(a)</code>","text":"<p>angle to</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Vec3</code> <p>The other point</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Angle in radians</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.cross","title":"<code>cross(v)</code>","text":"<p>cross product immutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3 or number</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.divide","title":"<code>divide(v)</code>","text":"<p>divide immutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3 or number</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.dot","title":"<code>dot(v)</code>","text":"<p>dot product immutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.equals","title":"<code>equals(v)</code>","text":"<p>equals immutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>bool</code> <p>if they are equal</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.length","title":"<code>length()</code>","text":"<p>length immutable</p> <p>Returns:</p> Type Description <code>float</code> <p>The length of the vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.max","title":"<code>max()</code>","text":"<p>max of x,y,z</p> <p>Returns:</p> Type Description <code>float</code> <p>max of x,y,z</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.min","title":"<code>min()</code>","text":"<p>min of x,y,z</p> <p>Returns:</p> Type Description <code>float</code> <p>min of x,y,z</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.multiply","title":"<code>multiply(v)</code>","text":"<p>multiply immutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3 or number</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.neg","title":"<code>neg()</code>","text":"<p>Negate a vector immutable</p> <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector negated version of this one</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.rand_in_sphere","title":"<code>rand_in_sphere(radius, outer=0, only_top_half=False, ring=False)</code>","text":"<p>random within a sphere</p> <p>Parameters:</p> Name Type Description Default <code>radius</code> <code> float</code> <p>radius</p> required <code>outer</code> <code> float</code> <p>outer radius if 0 r is outer, if non-zero r is inner radius. default=0</p> <code>0</code> <code>only_top_half</code> <code> bool</code> <p>limit to top half</p> <code>False</code> <code>ring</code> <code> bool</code> <p>limit to 2d ring</p> <code>False</code> <p>Returns:</p> Type Description <code>Vec3</code> <p>A randomly offset vector within the sphere/ring</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.rand_offset","title":"<code>rand_offset(r, outer=0, top_only=False, ring=False)</code>","text":"<p>random spherical offset</p> <p>Parameters:</p> Name Type Description Default <code>r</code> <code> float</code> <p>radius</p> required <code>outer</code> <code> float</code> <p>outer radius if 0 r is outer, if non-zero r is inner radius. default=0</p> <code>0</code> <code>top_only</code> <code> bool</code> <p>limit to top half</p> <code>False</code> <code>ring</code> <code> bool</code> <p>limit to 2d ring</p> <code>False</code> <p>Returns:</p> Type Description <code>Vec3</code> <p>A randomly offset vector within the sphere/ring</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.rotate_around","title":"<code>rotate_around(o, ax, ay, az, degrees=True)</code>","text":"<p>Rotate around a point</p> <p>Parameters:</p> Name Type Description Default <code>o</code> <code>Vec3</code> <p>origin </p> required <code>ax</code> <code>float</code> <p>x angle</p> required <code>ay</code> <code>float</code> <p>y angle</p> required <code>az</code> <code>float</code> <p>z angle</p> required <code>degrees</code> <code>bool</code> <p>Use degrees if true, radians if false. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Vec3</code> <p>The new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.subtract","title":"<code>subtract(v)</code>","text":"<p>subtract immutable</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code> Vec3 or number</code> <p>the other vector</p> required <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.toAngles","title":"<code>toAngles()</code>","text":"<p>polar angles</p> <p>Returns:</p> Type Description <p>theta, phi (float, float):  tuple containing theta and phi</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.unit","title":"<code>unit()</code>","text":"<p>unit vector immutable</p> <p>Returns:</p> Type Description <code>Vec3</code> <p>new vector</p>"},{"location":"cosmos/","title":"Index","text":""},{"location":"cosmos/#artemis-cosmos-specific-functionality","title":"Artemis: Cosmos specific functionality","text":""},{"location":"cosmos/comms/","title":"Mast Communication syntax","text":"<p>The mast language provides labels an commands for processing communications.</p> <p>This is a work in progress, currently it documenting the idea, and not what exists.</p>"},{"location":"cosmos/comms/#enabling-comms-for-agents","title":"Enabling comms for Agents","text":"Mast <pre><code>//enable/comms if COMMS_SELECTED &amp; \"tsn, station\"\n# Other code can be here to initialize data, add invemtory etc.\n# e.g. The station has three apples, three oranges\n#\n# Note this is a proposed simplified get_inventory_value(COMMS_SELECTED_ID, \"Apples\", 3)\n#\nCOMMS_SELECTED[\"Apples\"] =  3\nCOMMS_SELECTED[\"Oranges\"] = 3\n</code></pre>"},{"location":"cosmos/comms/#providing-comms-buttons","title":"Providing Comms buttons","text":""},{"location":"cosmos/comms/#providing-comms-button-to-the-root-comms-path","title":"Providing comms button to the root comms path","text":"Mast <pre><code>//comms if COMMS_SELECTED_ID &amp; \"tsn, station\"\n+ \"Buy\" //comms/buy\n</code></pre>"},{"location":"cosmos/comms/#providing-comms-button-to-the-comms-branch-path","title":"Providing comms button to the comms branch path","text":"<p>notice this branch the comms to the \"buy\" path</p> Mast <pre><code>//comms/buy if COMMS_SELECTED_ID &amp; \"tsn, station\"\n+ \"Buy apple\" if COMMS_SELECTED[\"Apples\"] &gt; 0:\n    COMMS_SELECTED[\"Apples\"] -= 1\n+ \"Buy orange\" if COMMS_SELECTED[\"Apples\"] &gt; 0:\n    COMMS_SELECTED[\"Oranges\"] -= 1\n</code></pre>"},{"location":"cosmos/comms/#providing-choices-of-buttons","title":"Providing choices of buttons","text":"Mast <pre><code>//comms/buy if COMMS_SELECTED &amp; \"tsn, station\"\n+ if COMMS_SELECTED.inv[\"Apples\"] &gt; 0:\n    % \"Buy a tasty Apple\"\n    % \"How about an Apple\"\n    COMMS_SELECTED[\"Apples\"] -= 1\n+ if COMMS_SELECTED[\"Apples\"] &gt; 0:\n    % \"Buy a sweet Orange\"\n    % \"Need some vitamin C\"\n    COMMS_SELECTED[\"Oranges\"] -= 1\n</code></pre>"},{"location":"cosmos/comms/#providing-choices-of-buttons-based-on-reputation","title":"Providing choices of buttons based on reputation","text":"Mast <pre><code>//comms/buy if COMMS_SELECTED &amp; \"tsn, station\"\n+ if COMMS_SELECTED.inv[\"Apples\"] &gt; 0:\n    %+ \"Free tasty Apple\"\n    %+ \"How about a free Apple\"\n    %= \"Buy a tasty Apple\"\n    %= \"How about an Apple\"\n    %- \"Buy a day old Apple\"\n    %- \"How about half an Apple\"\n    . . .\n</code></pre>"},{"location":"cosmos/comms/#providing-choices-of-buttons-based-on-reputation-levels","title":"Providing choices of buttons based on reputation levels","text":"<p>Multiple reputation indicators create 'bands' </p> Mast <pre><code>//comms/buy if COMMS_SELECTED &amp; \"tsn, station\"\n+ if COMMS_SELECTED.inv[\"Apples\"] &gt; 0:\n    %+++ \"Free tasty Apple\"\n    %+++ \"How about a free Apple\"\n    %++ \"Buy a tasty Apple\"\n    %++ \"How about an Apple\"\n    %+ \"Buy a day old Apple\"\n    %+ \"How about half an Apple\"\n    . . .\n</code></pre>"},{"location":"cosmos/comms/#providing-choices-of-buttons-based-on-reputation-levels-weighting","title":"Providing choices of buttons based on reputation levels, weighting","text":"<p>Multiple reputation indicators create 'bands'  Adding a weight number increases the chances</p> Mast <pre><code>//comms/buy if COMMS_SELECTED &amp; \"tsn, station\"\n+ if COMMS_SELECTED.inv[\"Apples\"] &gt; 0:\n    %+++3 \"Free tasty Apple\"\n    %+++ \"How about a free Apple\"\n    %++3 \"Buy a tasty Apple\"\n    %++ \"How about an Apple\"\n    %+4 \"Buy a day old Apple\"\n    %+ \"How about half an Apple\"\n    . . .\n</code></pre>"},{"location":"cosmos/comms/#providing-choices-of-via-data","title":"Providing choices of via data","text":"<p>What data is need tbd</p> Mast <pre><code>//comms/buy if COMMS_SELECTED &amp; \"tsn, station\"\n+ apple_options if COMMS_SELECTED[\"Apples\"] &gt; 0:\n    COMMS_SELECTED[\"Apples\"] -= 1\n+ orange_options if COMMS_SELECTED[\"Apples\"] &gt; 0:\n    COMMS_SELECTED[\"Oranges\"] -= 1\n</code></pre>"},{"location":"cosmos/comms/#providing-via-data-with-limits-and-validity","title":"Providing via data with limits, and validity","text":"<p>What data is need tbd</p> <p>You can provide a number to pick and the number of those that are valid You can shuffle them once or every time</p> Mast <pre><code>//comms if COMMS_SELECTED &amp; \"tsn, station\"\n+ taunt_options choose once 3 validate 1 handle_taunt\n+ complement_options choose once 3 validate 2 handle_complement\n+ salutation_options choose always 3  handle_salutation\n</code></pre>"},{"location":"cosmos/comms/#comms-messages","title":"comms messages","text":""},{"location":"cosmos/comms/#receive-message","title":"Receive message","text":"Mast <pre><code>&lt;&lt;[$info] Title\n    \" this is a multiline \n    \" message\n    \" here\n</code></pre>"},{"location":"cosmos/comms/#transmit-message","title":"Transmit message","text":"Mast <pre><code>&gt;&gt;[$info] Title\n    \" this is a multiline \n    \" message\n    \" here\n</code></pre>"},{"location":"cosmos/comms/#speech-bubble-message","title":"Speech Bubble message","text":"Mast <pre><code>&lt;&gt;[$info] Title\n    \" this is a multiline \n    \" message\n    \" here\n</code></pre>"},{"location":"cosmos/comms/#message-with-options","title":"Message with options","text":"Mast <pre><code>&lt;&lt;[$info] Title\n    % option 1\n    \" message\n    % option 2\n    \" here\n</code></pre>"},{"location":"cosmos/comms/#message-with-options-with-rep","title":"Message with options with rep","text":"Mast <pre><code>&lt;&lt;[$info] Title\n    %+ option good\n    \" message\n    %= option neutral\n    \" here\n    %- option neutral\n    \" here\n</code></pre>"},{"location":"cosmos/comms/#message-with-options-with-rep-level-bands","title":"Message with options with rep level bands","text":"Mast <pre><code>&lt;&lt;[$info] Title\n    %+++ option good\n    \" message\n    %++ option neutral\n    \" here\n    %+ option neutral\n    \" here\n</code></pre>"},{"location":"cosmos/comms/#message-with-options-with-rep-level-bands_1","title":"Message with options with rep level bands","text":"Mast <pre><code>&lt;&lt;[$info] Title\n    %+++3 option good most likely\n    \" message\n    %+++3 option good most likely\n    \" message\n    %+++2 option good more likely\n    \" message\n    %+++2 option good more likely\n    \" message\n    %+++ option good less likely\n    \" message\n    %+++ option good less likely\n    \" message\n    %++ option good etc.\n    \" message\n    %++ option good etc.\n    \" message\n    %+ option good etc.\n    \" message\n    %+ option good etc.\n    \" message\n</code></pre>"},{"location":"cosmos/gui/","title":"Gui","text":"<p>Gui Components</p>"},{"location":"cosmos/gui/#_1","title":"Gui","text":"<p>The MAST Story Components are used to create GUI elements.</p> <p>This can be part of a console, </p> <ul> <li>Layout</li> <li>Layout components</li> <li>Form Controls</li> </ul>"},{"location":"cosmos/gui/#gui-layout","title":"Gui Layout","text":""},{"location":"cosmos/gui/#await-gui-choices","title":"await gui (choices)","text":"<p>def await_gui (self,      buttons=None,      timeout=None,      on_message=None,      test_refresh=None,      test_end_await=None,      on_disconnect=None):</p> <p>.. tabs::     .. code-tab:: mast</p> <pre><code>    await gui\n\n.. code-tab:: py PyMast\n\n    self.await_gui()\n</code></pre>"},{"location":"cosmos/gui/#section","title":"Section","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    section style=\"\"\n\n.. code-tab:: py PyMast\n\n    self.gui_section(\"\")\n</code></pre>"},{"location":"cosmos/gui/#row","title":"Row","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    row\n    row style=\"\"\n\n.. code-tab:: py PyMast\n\n    self.gui_row()\n    self.gui_row(\"\")\n</code></pre>"},{"location":"cosmos/gui/#row_1","title":"Row","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    blank\n\n.. code-tab:: py PyMast\n\n    self.gui_blank()\n</code></pre>"},{"location":"cosmos/gui/#hole","title":"Hole","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    hole\n\n.. code-tab:: py PyMast\n\n    self.gui_hole()\n</code></pre>"},{"location":"cosmos/gui/#text-and-text-append","title":"Text and Text append","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    \"\"\"TEXT \"\"\"\n\n    ^^^ Append ^^^\n\n\n.. code-tab:: py PyMast\n\n    self.gui_text(\"\")\n</code></pre>"},{"location":"cosmos/gui/#text-input","title":"Text Input","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    input message \"Make a toast\"\n\n.. code-tab:: py PyMast\n\n    self.gui_text_input(\"\", \"Hint\" label)\n</code></pre>"},{"location":"cosmos/gui/#button","title":"Button","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    button \"Text\":\n       ... code...\n    end_button\n\n.. code-tab:: py PyMast\n\n    self.gui_button(\"Text\", label)\n</code></pre>"},{"location":"cosmos/gui/#checkbox","title":"Checkbox","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    checkbox var \"Text\"\n\n.. code-tab:: py PyMast\n\n    self.gui_checkbox(\"Text\", value)\n</code></pre>"},{"location":"cosmos/gui/#dropdown","title":"Dropdown","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    dropdown var \"val1,val2\":\n        ... code...\n    end_dropdown\n\n.. code-tab:: py PyMast\n\n    self.gui_dropdown(\"val1,val2\", value)\n    # Handle change in on_message\n</code></pre>"},{"location":"cosmos/gui/#face","title":"Face","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    face var\n\n.. code-tab:: py PyMast\n\n    self.gui_face(\"Face Text\")\n</code></pre>"},{"location":"cosmos/gui/#slider","title":"Slider","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    intslider var low high value\n    slider var low high value\n\n.. code-tab:: py PyMast\n\n    def gui_slider (self, val, low, high, show_number=True, label=None, style=None):\n    self.gui_slider(\"Face Text\")\n</code></pre>"},{"location":"cosmos/gui/#radio-buttons","title":"Radio buttons","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    radio var \"b1, b2, b3\"\n    vradio var \"b1, b2, b3\"\n\n.. code-tab:: py PyMast\n\n    self.gui_radio(\"b1, b2, b3\")\n    self.gui_radio(\"b1, b2, b3\", True)\n</code></pre>"},{"location":"cosmos/gui/#ship","title":"Ship","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    ship val # this isn't support when write this\n    ship \"val\"\n\n.. code-tab:: py PyMast\n\n    self.gui_ship(ship)\n</code></pre>"},{"location":"cosmos/gui/#image","title":"Image","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    ship val # this isn't support when write this\n    ship \"val\"\n\n.. code-tab:: py PyMast\n\n    self.gui_image(file, color)\n</code></pre>"},{"location":"cosmos/gui/#sprite","title":"Sprite","text":"<p>This doesn't exists as I write this</p> <p>.. tabs::     .. code-tab:: mast</p> <pre><code>    sprite val # this isn't support when write this\n\n\n.. code-tab:: py PyMast\n\n    self.gui_sprite(ship, x,y, w,h)\n</code></pre>"},{"location":"cosmos/gui/#full-console","title":"Full console","text":"<p>For building console widget by widget.  Call this to specify which console.</p> <p>.. tabs::     .. code-tab:: mast</p> <pre><code>    console \"helm\"\n    console var\n\n\n.. code-tab:: py PyMast\n\n    self.gui_console(\"helm\")\n</code></pre>"},{"location":"cosmos/gui/#activate-console","title":"Activate console","text":"<p>For building console widget by widget.  Call this to specify which console.</p> <p>.. tabs::     .. code-tab:: mast</p> <pre><code>    console activate \"helm\"\n\n\n.. code-tab:: py PyMast\n\n    self.gui_activate_console(\"helm\")\n</code></pre>"},{"location":"cosmos/gui/#layout-console-widget","title":"Layout console widget","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    console widget \"2dview\"\n\n\n.. code-tab:: py PyMast\n\n    self.gui_console_widget(\"2dview\")\n</code></pre>"},{"location":"cosmos/gui/#layout-console-widget_1","title":"Layout console widget","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    widget_list \"norm_helm\"  \"2dview^throttle\"\n\n\n.. code-tab:: py PyMast\n\n    self.gui_console_widget+list(\"norm_helm\", \"2dview^throttle\")\n</code></pre>"},{"location":"cosmos/gui/#layout-python-coded-widget","title":"Layout python coded widget","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    gui control func()\n\n\n.. code-tab:: py PyMast\n\n    self.gui_content(listbox())\n</code></pre>"},{"location":"cosmos/science/","title":"Await Science","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    await scan():\n        scan tab \"scan\":\n            scan results \"Scan\"\n        scan tab \"bio\":\n            scan results \"Bio\"\n    end_await\n\n\n\n.. code-tab:: py PyMast\n\n          self.await_science({\n            \"scan\": self.scan_default,\n            \"bio\": self.scan_bio,\n            \"intel\": self.scan_intel,\n            \"signl\": self.scan_signl\n        })\n\n\n    def scan_default(self, event):\n        return \"This space object is now scanned, in the most general way. This text was generated by the script.\"\n\n    def scan_intel(self, event):\n        return \"This space object is detailed in the ship's computer banks. This text was generated by the script.\"\n\n    def scan_bio(self, event):\n        return \"This space object has indeterminate life signs. This text was generated by the script.\"\n    def scan_signl(self, event):\n        return \"This space object radiating signals. This text was generated by the script.\"\n</code></pre>"},{"location":"home/start/","title":"Getting Started","text":""},{"location":"mast/","title":"Index","text":""},{"location":"mast/#what-is-mast","title":"What is MAST","text":"<p>MAST (Multiple Agent Story Telling) is a programming language used in Artemis: Cosmos to create Game Mastered and Story driven Missions. </p> <p>MAST provides a new simple programming language that enables:</p> <ul> <li>Language that flows more like a narrative or film script</li> <li>Easy and rich GUIs for the pause scene and the Artemis: Cosmos consoles</li> <li>A Task/State driven system managing multiple tasks in parallel e.g. a quest with side quests</li> <li>Complex AI </li> <li>Interactive choices and dialog</li> <li>Similar capabilities to Visual Novel systems, such as RenPy, Inkle Ink, and Choice script</li> </ul>"},{"location":"mast/#multiple-agent-story-telling","title":"Multiple Agent Story Telling","text":""},{"location":"mast/#multiple-agents","title":"Multiple Agents","text":"<p>The multiple agents of a MAST story (players, non-player characters, etc.) each have their own story and those stories can have multiple side plots.</p> <p>In MAST for Artemis: Cosmos, the multiple agents are the player consoles, the ships, various characters that can be on ships, etc. Artemis: Cosmos has the ability to add many more characters to the game. For example there can be multiple characters on a space station that you may interact with. The Damage Control teams can have richer stories and each can be unique.</p>"},{"location":"mast/#storytelling","title":"Storytelling","text":"<p>Stories have a forward moving flow; there is a beginning, a middle and an end. MAST's programming flow keeps the story moving forward. MAST also facilitates an interactive narrative which allows for choice and branching of the story, revisiting aspects of the story etc. while still flowing the story on a single path.</p>"},{"location":"mast/#multiple-stories","title":"Multiple stories","text":"<p>An Artemis: Cosmos mission is not just one story about one thing; it is many. </p> <p>Artemis: Spaceship Bridge Simulator may be familiar with the <code>&lt;event&gt;</code>. </p> <p>Artemis: Cosmos has the concept of Task.</p> <p>Tasks run a single script. From beginning to end.</p> <p>Tasks run in (pseudo) parallel. Unlike the Artemis: SBS events, Task can be scheduled, canceled, and can end.</p> <p>Tasks are described in detail in the MAST Language </p>"},{"location":"mast/#why-a-language-other-than-python","title":"Why a language other than python?","text":"<p>Artemis: Cosmos engine allows for scripting missions using Python. Python is a productive and easy to learn programming language. To help script writers, the sbs_utils library was created. This is a powerful and viable option to create Artemis: Cosmos scripts.</p> <p>While working with several script writers familiar with the Artemis: Spaceship Bridge Simulator XML mission scripting some found the python daunting and far less productive. Many of these script writers are authors, educators and are not full time programmers. </p>"},{"location":"mast/#markup-language-vs-programming-language","title":"Markup language vs. programming language","text":"<p>MAST is a hybrid of a markup language and a programming language. </p> <p>Markup languages provide a simple text document that simplifies a more complex system.</p> <p>Inspiration for MAST are languages like Inkle Ink, choice script, renPy.</p>"},{"location":"mast/#reuse-and-add-ons","title":"Reuse and add-ons","text":"<p>The MAST system makes it easy to extend things and package these extensions to be shared by other missions.</p> <p>For example, Artemis: Cosmos ships with the Secret Meeting and Walk the Line missions. They appear very small, but they use code from Legendary Missions that are packaged as mastlib add-ons (found in the __lib__ folder)</p> <p>As more scripts are written it should be easy to create a side mission as an add on and allow it to be dropped into many other missions to share.</p>"},{"location":"mast/#hierarchical-flow-vs-sequential-flow","title":"Hierarchical flow vs. Sequential flow","text":"<p>Early programming languages like BASIC were more approachable to hobbyists and non-programmers. They would run in a sequential flow from beginning to end in a simple script that was easier to follow. However, reusing and reorganizing code was difficult to manage as projects grew larger and more complex.</p> <p>Python and other object oriented languages tend to have a complicated interconnected execution flow, where the hierarchy of which functions are calling other functions isn\u2019t always clear. </p>"},{"location":"mast/#state-and-state-machine","title":"State and State machine","text":"<p>Games in general tend to manage the state of items in the world and respond to changes to change the state. </p> <p>Programmers often create a pattern called a State Machine to deal with this.</p> <p>The Artemis: Spaceship Bridge Simulator XML language was a simplified markup 'language' that ran a series of state machines, where each <code>&lt;event&gt;</code> tag was its own state machine. The state conditions are checked in order, and if the conditions are met the event runs.</p> <p>The Artemis: Spaceship Bridge Simulator XML language is inefficient in that all events always run every tick, and it had no concept of reuse. Script writers copy and pasted events to 'reuse' them. </p> <p>Even in other programming languages State Machines require boiler plate code to add new states and transitions. This also requires copy and pasting code.</p> <p>MAST is intended to enabling creating state driven programming that is:</p> <ul> <li>More efficient because only needed things are executed</li> <li>script writers do not write state machine and management code</li> </ul>"},{"location":"mast/model/","title":"Agent Model","text":""},{"location":"mast/model/#_1","title":"Agent Model","text":"<p>SBS Utils Object Model</p>"},{"location":"mast/model/#_2","title":"Agent Model","text":"<p>Sbs Utils creates an oObject model. This Object Model is used by Mast and PyMast.</p> <p>Mast needs participants in the story. In stories Artemis Cosmos these participants are:</p> <ul> <li>The Story itself (aka the server, the game, the engine or the world)</li> <li>Bridge Crew (The player consoles)</li> <li>The Player ships (Ships control by the Bridge Crew)</li> <li>Non-Player ships Starbases, Enemy Ships, Friendly Ships (Things controled by script)</li> <li>The terrain element asteroids, pickups, nebula etc.</li> <li>Non-Player Crew and Characters (Seen as faces in engineering, Comms etc.)</li> <li>Internals ship location (Rooms and other things)</li> </ul> <p>These agents/participants are the things in the Artemis Cosmos world. Each of this agents can have stories and tasks associated with them. </p> <ul> <li>Engine objects<ul> <li>engine data set</li> </ul> </li> <li>Script Objects<ul> <li>roles</li> <li>Inventory</li> <li>Linked</li> </ul> </li> </ul> <p>Engine, script and persisted</p> <p>The object model is designed to work with three sets of the model data: </p> <ul> <li>Engine</li> <li>Script</li> <li>Persisted</li> </ul>"},{"location":"mast/model/#engine-data","title":"Engine data","text":"<p>Engine data are in memory objects that the engine manages.</p> <p>Engine data is the data the the Artemis Cosmos game engine deals with. This the data that get ships, etc drawn on screen and the engine manages low level behavior (e.g. moving a ship from a pont a to point b)</p> <p>Engine data has:</p> <ul> <li>The object its self</li> <li>A engine type (Player, Active, Passive)</li> <li>data tag</li> <li>tick type / behavior</li> <li>A data set</li> </ul>"},{"location":"mast/model/#engine-object","title":"Engine object","text":"<p>The engine object provides the raw object in the engine.</p> <p>There are two types of engine objects </p> <ul> <li>class:<code>~sbs.space_object</code></li> <li>class:<code>~sbs.grid_object</code></li> </ul> <p>It has data the is common to all engine objects.</p> <ul> <li>side</li> <li>position</li> <li>steering properties</li> </ul> <p>An engine data has a 'data set' this is data that can be different for space objects. e.g. a player ship data set may have ship systems, while an asteroid does not.</p> <p>The engine 'type' is the high level behavior type of player, active, and passive. </p> <ul> <li>player are player ships.</li> <li>Active are npc, space docks, friendly and enemy ships etc.</li> <li>Passive are terrain e.g. nebula, asteroids etc.</li> </ul> <p>The data tag relates to the artwork and other properties that are assigned to the object. The values are defined in ship_dat.json. The values are used by the engine, and some of these values are available in the data set.</p> <p>The tick type is a engine level behavior setting. For example specifying the object is a player ship, npc ship, vs. a space dock.</p> <p>that script can get and set data that the engine uses. Scripts can change this data and see those change reflected in the engine (e.g. Add torpedoes to a ship.)</p>"},{"location":"mast/model/#script-data","title":"Script data","text":"<p>Script data are python object in memory that script manages.</p> <p>Script data is a reflection of the Engine Data, and can also be used to synchronize with a persisted model.</p> <ul> <li>class:<code>~sbs_utils.spaceobject.SpaceObject</code></li> <li> <p>class:<code>~sbs_utils.gridobject.GridObject</code></p> </li> <li> <p>class:<code>~sbs_utils.objects.PlayerShip</code></p> </li> <li>class:<code>~sbs_utils.objects.Npc</code> </li> <li>class:<code>~sbs_utils.objects.Active</code></li> <li>class:<code>~sbs_utils.objects.Terrain</code></li> <li>class:<code>~sbs_utils.objects.Passive</code></li> </ul>"},{"location":"mast/model/#role","title":"role","text":"<p>Script object can have multiple \"roles\". Roles are similar to 'hashtags' in social media apps. You can tag script objects with a role. </p>"},{"location":"mast/model/#links","title":"Links","text":"<p>Links are named relationship between two objects.</p>"},{"location":"mast/model/#inventory","title":"Inventory","text":"<p>Inventory is data that can be added to any object.</p>"},{"location":"mast/model/#persisted-data","title":"Persisted data","text":"<p>NOTE: This is speculative of how the persisted data will work in the future. NOTE: This is just really notes on what is hoped to accomplish</p> <p>Persistence will persist:</p> <ul> <li>Engine Objects </li> <li>roles</li> <li>Links</li> <li>Inventory</li> </ul> <p>There should be a db_query that has similar functions to the query module. e.g. so that you can retrieve from the data base using similar set operation</p> <p>sector_objects = db_query.broadtest(100000, 100000, 150000, 150000, -1) db_query.spawn(sector_objects)</p> <p>.. tabs::</p> <p>.. code-tab:: sqlite3 SqlLite</p> <pre><code>    CREATE TABLE engine_object (\n        db_id INTEGER NOT NULL PRIMARY KEY,\n        data JSON NOT NULL\n        -- What else \n    );\n</code></pre> <p>.. code-tab:: js Firebase</p> <pre><code> \"engine_objects\": {\n    \"&lt;db_id&gt;\": {\n        \"data\": { . . .}\n    }\n }\n</code></pre> <p>.. tabs::</p> <p>.. code-tab:: sqlite3 SqlLite</p> <pre><code>    CREATE TABLE role (\n    role TEXT NOT NULL,\n    FOREIGN KEY (db_id) REFERENCES engine_object (db_id) \n                ON DELETE CASCADE ON UPDATE NO ACTION,\n    PRIMARY KEY(role, db_id)\n    );\n</code></pre> <p>.. code-tab:: js Firebase</p> <pre><code>    \"roles\": {\n        \"&lt;role&gt;\": {1,2,3,}\n     }\n</code></pre> <p>.. tabs::</p> <p>.. code-tab:: sqlite3 SqlLite</p> <pre><code>    CREATE TABLE link (\n    link TEXT NOT NULL,\n    FOREIGN KEY (from_db_id) REFERENCES engine_object (db_id) \n                ON DELETE CASCADE ON UPDATE NO ACTION,\n    FOREIGN KEY (to_db_id) REFERENCES engine_object (db_id) \n                ON DELETE CASCADE ON UPDATE NO ACTION,\n    PRIMARY KEY(role, from_db_id, to_db_id)\n    );\n</code></pre> <p>.. code-tab:: js Firebase</p> <pre><code>    \"links\":{\n        \"&lt;link&gt;\":  {(1,9), (2,7) , (3,8)}\n    }\n</code></pre> <p>.. tabs::</p> <p>.. code-tab:: sqlite3 SqlLite</p> <pre><code>    CREATE TABLE inventory (\n    name TEXT NOT NULL,\n    FOREIGN KEY (db_id) REFERENCES engine_object (db_id) \n                ON DELETE CASCADE ON UPDATE NO ACTION,\n    value JSON NOT NULL,\n    PRIMARY KEY(role, db_id, value)\n    );\n</code></pre> <p>.. code-tab:: js Firebase</p> <pre><code>// Not sure this one is right\n\"inventory\":{\n    \"&lt;key&gt;\":  {\n        \"&lt;db_id&gt;\": &lt;value&gt;\n    }\n}\n</code></pre>"},{"location":"mast/overview/","title":"MAST Language","text":""},{"location":"mast/overview/#mast-execution-flow","title":"MAST execution flow","text":"<p>The goal of MAST is to enable non-programmers to be productive in creating interactive narratives.</p> <p>The MAST language is a programming language that simplifies many of the programming language concepts to help make writing interactive narratives easier as well as provide an easier-to-follow syntax.</p> <p>The intent is to be approachable to non-programmers. It is not intended to be 'structured' programming language like C++ or Python. </p> <p>The flow of MAST is similar to the original BASIC programming language. The code executes moving forward, it can branch by jumping to new locations (labels). This can be called 'unstructured' programming. MAST was also influenced by choice script, Inkle's Ink, and others.</p>  MASTOutput <pre><code>========= start =======\nlog(\"Hello, world\")\n-&gt; goodbye\n====== not_here =======\nlog(\"I get jumped over\")\n======= goodbye =======\nlog(\"Goodbye\")\n</code></pre> <pre><code>Hello, world\nGoodbye\n</code></pre>"},{"location":"mast/overview/#mast-and-pymast","title":"MAST and pyMAST","text":"<p>MAST is a standalone language running inside of the python system provided by Artemis Cosmos.</p> <p>pyMAST is python code that runs using the MAST execution flow. This gives python programmers the benefits of MAST's simple flow while enabling greater access to the native python.</p>  MAST pyMASTOutput <pre><code>========= start =======\nlog(\"Hello, world\")\n-&gt; goodbye\n====== not_here =======\nlog(\"I get jumped over\")\n======= goodbye =======\nlog(\"Goodbye\")\n</code></pre> <pre><code>@label()\ndef start():\n    print(\"Hello, world\")\n    yield jump(goodbye)\n\n@label()\ndef not_here():\n    print(\"I get jumped over\")\n\n@label()\ndef goodbye():\n    print(\"Goodbye\")\n</code></pre> <pre><code>    Hello, world\n    Goodbye\n</code></pre>"},{"location":"mast/overview/#mast-and-pausing-the-flow","title":"MAST and pausing the flow","text":"<p>MAST is running as part of a game engine. The engine only gives MAST a small amount of time to run. If MAST ran unconditionally it would not allow the engine to run and stall the game. However, there are times a story cannot continue until conditions are met. e.g. A comms button is press, a science scan it started etc.</p> <p>MAST can \"pause\" execution and yield control back to the engine. The engine keeps calling MAST and it yields until the condition is met then the flow can continue.</p> <p>This example prints \"Hello, world\" and five seconds later it prints \"Goodbye\". During that five seconds the engine is able to run because MAST yields control back since it cannot move forward.</p> <p>This ability to yield control back to the engine is a reason that MAST flow can be enable users to focus on the flow of the story and not how to get the programming language to deal with this.</p>  MAST pyMASTOutput <pre><code>========= start =======\nlog(\"Hello, world\")\ndelay_app(5)\nlog(\"Goodbye\")\n</code></pre> <pre><code>@label()\ndef start():\n    log(\"Hello, world\")\n    yield delay_app(5)\n    log(\"Goodbye\")\n</code></pre> <pre><code>|    Hello, world\n|    Goodbye\n</code></pre> <p>Yielding control is handled by MAST. If there ever is a time you need to force a yield you can us the MAST 'yeild' command. In pyMAST the python keyword yield is used, however you must specify how to yield by providing a PollResults.OK_RUN_AGAIN. There are other types of yields in pyMAST. This is not the time to detail those uses. </p>  MAST pyMASTOutput <pre><code>========= start =======\nlog(\"Hello, world\")\nyield\nlog(\"Goodbye\")\n</code></pre> <pre><code>@label()\ndef start():\n    log(\"Hello, world\")\n    yield PollResults.OK_RUN_AGAIN\n    log(\"Goodbye\")\n</code></pre> <pre><code>|    Hello, world\n|    Goodbye\n</code></pre> <p>In future topics there will be other times descibed when MAST yields. Typically this is when MAST is waiting for something to occur. For example:</p> <ul> <li>time (e.g. the delay used in the examples)</li> <li>awaiting a choice to be made in the gui </li> <li>awaiting a comms button to be selected</li> <li>awaiting a science scan </li> </ul>"},{"location":"mast/overview/#sub-plots-aka-tasks","title":"Sub plots aka Tasks","text":"<p>MAST is MULTI Agent Story Telling so each agent has their own story or event stories.</p> <p>MAST allows multiple storylines to run in \"parallel\". </p> <p>MAST in Artemis Cosmos is inherently a single thread of execution. These storylines do not run exactly in parallel, but you can run multiple things and make sure they run at the same time. These are called Tasks, and tasks can be scheduled so that multiple tasks can run on the same tick. A 'tick' is a very short piece of time where the game engine checks for input from the clients, calculates how everything in the game is supposed to move, processes damage and other internal logic, and then sends updated information to the clients. </p> <p>For example a Player Ship can run a Task for handling Comms messages, another for Science scan. This player ship could in fact run multiple tasks for handling comms with different sets of ships.</p> <p>These tasks themselves act as small side stories, They run as long as needed.</p> <p>In MAST tasks are scheduled in MAST with a parallel jump, and in pyMAST with a task_schedule</p> <p>If you have programmed Artemis 2.x scripts, tasks are similar to the  tags. Unlike the  tags, task only run when needed. They are scheduled, and when they end they are unscheduled they can also be canceled.  MAST pyMASTOutput <pre><code>===== start ====\n# Run another task\nawait task_schedule(count_to_ten)\nlog(\"done\")\n\n===== count_to_ten ======\nfor x in range(10):\n    log(\"{x}\")\n    yield\n</code></pre> <pre><code>@label()\ndef start():\n    yield AWAIT(task_schedule(count_to_ten))\n    log(\"done\")\n\n@label()\ndef count_to_ten():\n    for x in range(10):\n        print(x)\n        yield PollResults.OK_RUN_AGAIN\n</code></pre> <pre><code>|    1\n|    2\n|    3\n|    4\n|    5\n|    6\n|    7\n|    8\n|    9\n|    10\n|    done\n</code></pre>"},{"location":"mast/overview/#schedulers","title":"Schedulers","text":"<p>MAST and pyMAST run all the tasks using schedulers. This process is mostly hidden to the writer of MAST and pyMAST code.</p> <p>Tasks are run on 'Schedulers' and to put it simply for now, the Server and each Console has a scheduler. Additional schedulers can be created but typically the Server runs most of the tasks and the Consoles run a few tasks associated with that particular Console.</p> <p>For example, the Server runs a scheduler that may have a task for presenting its User Interface/GUI, and maybe have other tasks to manage the world creation, handling comms, science etc. Consoles typically have a scheduler as a single task for handling the User Interface/GUI.</p> <p>The more complex the script, the more tasks that will run. And if the complexity warrants it, more schedulers can be created. e.g. schedulers for each player ships etc.</p> <p>When Artemis Cosmos calls the scripting engine, MAST/pyMAST will run al the Schedulers and each scheduler runs all of its Tasks. </p> <p>As tasks are finished, they are removed. If a scheduler runs and no longer has tasks it is removed.</p>"},{"location":"mast/overview/#xml-events-vs-label-and-tasks","title":"XML Events vs label, and tasks","text":"<p>If you ever programmed Artemis 2.x, Tasks are similar to events. XML is NOT supported, but used as examples for those familiar with Artemis 2.x scripting.</p> <ul> <li> <p>XML events </p> <ul> <li>are always scheduled</li> <li>and always run</li> <li>never stop</li> </ul> </li> <li> <p>Tasks </p> <ul> <li>need to be scheduled or they don't run</li> <li>They can end</li> <li>They can be canceled</li> </ul> </li> </ul> XML  MAST pyMAST <pre><code>&lt;event name=\"do_some_thing\"&gt;\n&lt;/event&gt;\n</code></pre> <pre><code># To schedule the task\ntask_schedule(do_some_thing)\n# To end a task\n-&gt;END\n\n\n==== do_some_thing ====\nlog(\"Hello\")\n</code></pre> <pre><code>@label()\ndef start():\n    task_schedule(do_some_thing)\n\n@label()\ndef do_some_thing():\n    log(\"Hello\")\n</code></pre>"},{"location":"mast/overview/#setting-data-vs-xml-variable","title":"Setting data vs. XML Variable","text":"<p>With MAST you can set data that is shared by the server, all client consoles and all tasks. You can scope variables or pass data to a specific task. This allows tasks to be scheduled multiple times. pyMAST has the added ability to scope data to a label since it is a function in python.</p> <p>In contrast to an XML event, every variable was always shared. Also, events did not have scoped data. Events could not be reused. This meant to schedule events multiple times, you had to copy and paste the event and create new variables. </p> XML  MAST pyMAST <pre><code>&lt;event name=\"do_some_thing\"&gt;\n    &lt;set_variable name=\"some_data\" value=\"1\"/&gt; \n    &lt;set_variable name=\"some_data_one\" value=\"1\"/&gt; \n    &lt;set_variable name=\"some_data_two\" value=\"1\"/&gt; \n&lt;/event&gt;\n</code></pre> <pre><code># create shared data\nshared say_what = \"Hello\"\nlocal_data = \"I'm different\"\n\n# When run outputs Hello, World So Long Goodbye\ntask_schedule(do_some_thing, {\"passed_data\": \"World\"})\n# When run outputs Hello, Cosmos So Long Goodbye\ntask_schedule(do_some_thing, {\"passed_data\": \"Cosmos\"})\n\n-&gt;END\n\n==== do_some_thing ====\n# set a local variable \nlocal_data = \"Goodbye\"\n\nlog(f\"{say_what}, {passed_data}\")\nlog(f\"{local_data}\")\n</code></pre> <pre><code>@label()\ndef start():\n    # Shared data is added to the story\n    set_shared_variable(\"say_what\", \"Hello\")\n\n    # When run out puts Hello, World So Long Goodbye\n    task_schedule(do_some_thing, {\"passed_data\": \"World\"})\n    # When run out puts Hello, Cosmos So Long Goodbye\n    task_schedule(do_some_thing, {\"passed_data\": \"Cosmos\"})\n\n@label()\ndef do_some_thing():\n    say_what = get_shared_variable(\"say_what\")\n    # To share with the task\n    # so it can be used in other labels run by this task\n    set_variable(\"local_data\", \"So Long\")\n    task_local_data = get_variable(\"local_data\")\n    # a label is a function in python so it can also have\n    # data local to the function/label\n    label_data = \"Goodbye\"\n\n\n    log(f\"{say_what}, {passed_data}\")\n    log(f\"{task_local_data}\")\n    log(f\"{label_data}\")\n</code></pre>"},{"location":"mast/overview/#delaying-things-and-xml-timers","title":"Delaying things and XML Timers","text":"<p>There are times that a delay is needed before the next thing happens. There are multiple reasons for this:</p> <ul> <li>pause between steps e.g. showing credits, spawning different waves of enemies</li> <li>delay something to not overwhelm the users, periodically report game state</li> </ul> <p>Example one delaying credits.</p> XML  MAST pyMAST <pre><code>    &lt;start&gt;\n        . . .\n        &lt;set_timer name=\"credits_timer\"/&gt;\n        &lt;set_variable name=\"credits\" comparator=\"EQUALS\" value=\"0\"/&gt;\n    &lt;/start&gt;\n\n    &lt;event name=\"Credits 1\"&gt;\n        &lt;if_timer_finished name=\"credits_timer\"/&gt;\n        &lt;if_variable name=\"credits\" comparator=\"EQUALS\" value=\"0\"/&gt;\n        &lt;big_message title=\"This is the first page of credits\" subtitle2=\"\"/&gt;\n        &lt;set_variable name=\"credits\" value=\"1\"/&gt;\n    &lt;/event&gt;\n    &lt;event name=\"Credits 2\"&gt;\n        &lt;if_timer_finished name=\"credits_timer\"/&gt;\n        &lt;if_variable name=\"credits\" comparator=\"EQUALS\" value=\"1\"/&gt;\n        &lt;big_message title=\"This is the second page of credits\" subtitle2=\"\"/&gt;\n        &lt;set_variable name=\"credits\" value=\"2\"/&gt;\n    &lt;/event&gt;\n    &lt;event name=\"Credits 3\"&gt;\n        &lt;if_timer_finished name=\"credits_timer\"/&gt;\n        &lt;if_variable name=\"credits\" comparator=\"EQUALS\" value=\"2\"/&gt;\n        &lt;big_message title=\"This is the third page of credits\" subtitle2=\"\"/&gt;\n        &lt;set_variable name=\"credits\" value=\"999\"/&gt;\n    &lt;/event&gt;\n</code></pre> <pre><code>==== show_credits ====\n\n\"\"\" This is the first page of credits\"\"\"\nawait gui(timeout=delay_sim(10))\n\"\"\" This is the second page of credits\"\"\"\nawait gui(timeout=delay_sim(10))\n\"\"\" This is the third page of credits\"\"\"\nawait gui(timeout=delay_sim(10))\n</code></pre> <pre><code>@label()\ndef start():\n    gui_text(\"this is the first page of credits\")\n    yield AWAIT(gui(timeout=delay_sim(10)))\n    gui_text(\"this is the second page of credits\")\n    yield AWAIT(gui(timeout=delay_sim(10)))\n    gui_text(\"this is the third page of credits\")\n    yield AWAIT(gui(timeout=delay_sim(10)))\n</code></pre> <p>Another use is to spawn enemy waves. The XML for this would be very verbose.</p> xml  MAST pyMAST <pre><code>&lt;Skipping/&gt;\n</code></pre> <pre><code>==== spawn_wave ====\nenemyTypeNameList = [\"kralien_dreadnaught\",\"kralien_battleship\",\"skaraan_defiler\",\"cargo_ship\",\"arvonian_carrier\",\"torgoth_behemoth\"]\nenemy_prefix = \"KLMNQ\"\n\n\n# this gets a radom span location just outside the view of the sctor \nspawn_points = scatter_sphere(int(enemy_count), 0,0,0, 6000, 6000+250*enemy_count, ring=True)\n\nfor v in spawn_points:\n    r_type = random.choice(enemyTypeNameList)\n    r_name = f\"{random.choice(enemy_prefix)}_{enemy}\"\n    spawn_data = npc_spawn(v.x, v.y, v.z, r_name, \"RAIDER\", r_type, \"behav_npcship\")\n    raider = spawn_data.py_object\n    set_face(raider.id, random_kralien())\n    add_role(raider.id, \"Raider\")\n    enemy = enemy + 1\n\n\ndelay_sim(minutes=8)\n</code></pre> <pre><code>@label()\ndef spawn_wave():\n    enemyTypeNameList = [\"kralien_dreadnaught\",\"kralien_battleship\",\"skaraan_defiler\",\"cargo_ship\",\"arvonian_carrier\",\"torgoth_behemoth\"]\n    enemy_prefix = \"KLMNQ\"\n\n    # this gets a radom span location just outside the view of the sector \n    spawn_points = scatter_sphere(int(enemy_count), 0,0,0, 6000, 6000+250*enemy_count, ring=True)\n\n    for v in spawn_points:\n        r_type = random.choice(enemyTypeNameList)\n        r_name = f\"{random.choice(enemy_prefix)}_{enemy}\"\n        spawn_data = npc_spawn(v.x, v.y, v.z, r_name, \"RAIDER\", r_type, \"behav_npcship\")\n        raider = spawn_data.py_object\n        set_face(raider.id, random_kralien())\n        add_role(raider.id, \"Raider\")\n        enemy = enemy + 1\n    yield AWAIT(delay_sim(minutes=8))\n</code></pre>"},{"location":"mast/python/","title":"pyMAST","text":"<p>The MAST Runtime is written in python.</p> <p>pyMAST is a version where you do not need to write in mast. You can write in just native python.</p> <p>The remote_mission_pick mission is written this way.</p> <p>The MAST language has been the current focus so this part of the runtime is experimental.</p> <p>Labels are functions, but they still run as a flow and allow jumps and awaitable futures.</p> <p>It does not use python native await or future since that requires multi-threading.</p>"},{"location":"mast/routes/","title":"Behavior Components","text":""},{"location":"mast/routes/#sequence","title":"Sequence","text":"MastPython <pre><code>bt seq label1 &amp; label2\n</code></pre> <pre><code>self.behave_seq (label1, label2):\n</code></pre>"},{"location":"mast/routes/#select","title":"Select","text":"MastPython <pre><code>bt  sel label1 | label2\n</code></pre> <pre><code>self.behave_seq (label1, label2):\n</code></pre>"},{"location":"mast/routes/#until","title":"Until","text":"MastPython <pre><code>bt until my_label\nbt until fail my_label\n</code></pre> <pre><code>self.behave_until (my_label)\nself.behave_until (my_label, PollResults.OK_END)\nself.behave_until (my_label, PollResults.OK_FAIL)\n</code></pre>"},{"location":"mast/routes/#invert","title":"Invert","text":"MastPython <pre><code>bt invert my_label\n</code></pre> <pre><code>self.behave_invert (my_label):\n</code></pre>"},{"location":"mast/routes/#yield","title":"yield","text":"MastPython <pre><code>yield FAIL\nyield SUCCESS\n</code></pre> <pre><code>yield PollResults.BT_FAIL\nyield PollResults.BT_SUCCESS\n</code></pre>"},{"location":"mast/syntax/","title":"Language Basics","text":"<ul> <li>Data</li> <li>Task flow</li> <li>Conditional</li> <li>Loops </li> <li>Scheduling Tasks</li> </ul>"},{"location":"mast/syntax/#data","title":"Data","text":"<p>You can create data that is any valid python type. This data can be used in your MAST tasks.</p>"},{"location":"mast/syntax/#simple-assignment","title":"Simple assignment","text":"<p>To do so you use the assignment statement::</p> <pre><code>fred = 3\n</code></pre> <p>Assignment has a variable name an equals followed by a value.</p>"},{"location":"mast/syntax/#using-python-with-assignment","title":"Using python with assignment","text":"<p>The assignment is simple and has trouble with more complex python statements e.g. a list of list, etc. To allow more complex assignments you can wrap the value in 'snakes' to have the python compiler used::</p> <pre><code>players_inventory = ~~ [ [2,3], [4,5]] ~~\n</code></pre> <p>You need at least 2 'snakes' (the tilde character), before and after the python values. But you can have more tha two, and the number doesn't need to be exactly the same, as long as you have at least two::</p> <pre><code>players_inventory = \n    ~~~~~~~~~ \n    [\n        [2,3], \n        [4,5]\n    ] \n    ~~~~~~\n</code></pre>"},{"location":"mast/syntax/#shared-data-assignment","title":"Shared data assignment","text":"<p>Data has multiple scopes. Data can be at the scope of a MAST story, a scheduler, a task, or a label.</p> <p>There are times you want data to be shared by all tasks within a story. To share data you add the 'shared' marked in front of the assignment::</p> <pre><code>shared enemy_count = 20\nshared beer_count = 8\n</code></pre> <p>When using Data, scope is automatically handled. You only need to specify shared at assignment::</p> <pre><code>shared beer_count = 8\nmy_beer = 0\n\n# Drink all the beer\nmy_beer = my_beer + beer_count\nshare beer_count = 0\n</code></pre>"},{"location":"mast/syntax/#task-flow-story-sections-via-labels","title":"Task Flow: Story sections via labels","text":"<p>A MAST story is broken into sections using labels. You also can have comments, and there are also other 'markers' that can help organizing sections and help have them stand out in the file.</p>"},{"location":"mast/syntax/#labels","title":"Labels","text":"<p>Labels have a Name with no spaces and are  enclosed in 2 or more equals</p> <pre><code>    ====== GotoBar ====\n     . . .\n    == ShowHelm ==\n     . . .\n\n    ========================================== MoreStuff ===========================\n     . . .\n```\n\nThere are two labels that are implied: main and END.\n\nThe label \"main\" is the very start of the script.\nThe label \"END\" end the current task.\n\nThey are predefined and don't need to be defined in script.\n\nLabels are not 'functions', one label passes into the next label\n\n```\n    ======== One =====\n    log(\"One\")\n    ======== Two =====\n    log(\"Two\")\n    ===== Three ====\n    log(\"Three\")\n</code></pre> <p>Expected output</p> <pre><code> One\n Two\n Three\n</code></pre>"},{"location":"mast/syntax/#stateflow-changes-jump","title":"State/Flow changes: Jump","text":"<p>There are times you will want to change what part of a task is running. This is done by redirecting the flow to a label.</p>"},{"location":"mast/syntax/#jump","title":"Jump","text":"<p>This can be done by a Jump command. Which is a 'thin arrow' followed by the label name.::</p> <pre><code>    -&gt; Here\n\n    ======== NotHere =====\n    log(\"Got here later\")\n    -&gt; End\n\n    ======== Here =====\n    log(\"First\")\n    -&gt; NotHere\n\n    ======== End =====\n    log(\"Done\")\n    -&gt;END\n    ======== Never =====\n    log(\"Can never reach\")\n</code></pre> <p>The expected output</p> <pre><code>First\nGot Here later\nDone\n</code></pre>"},{"location":"mast/syntax/#jump-to-end","title":"Jump to End","text":"<p>To immediately end a task you can use a Jump to End.</p> <p>Jump to end looks like a Jump with a thin arrow and the label \"END\"</p>  MAST pyMASTOutput <pre><code>===== start ====\n\nlog(\"See you later\")\n-&gt;END\nlog(\"Never gets here\")\n</code></pre> <pre><code>@label()\ndef start(self):\n    print(\"See you later\")\n    yield END()\n</code></pre> <pre><code>See you later\n</code></pre> <p>Jump to End ends the task. If that task the only task, the whole story ends.</p>"},{"location":"mast/syntax/#scheduling-tasks-and-waiting-for-them-to-complete","title":"Scheduling tasks and waiting for them to complete","text":"<p>A story can have multiple tasks running in parallel.</p> <p>For example, a ship maybe have multiple Tasks associated with it.  One tracking it comms, several for its client consoles, and several related to 'quest' it is involved in.</p> <p>To do so, new task can be scheduled. Either in python or via Mast.</p>"},{"location":"mast/syntax/#scheduling-tasks-in-mast","title":"Scheduling tasks in mast","text":"<p>Schedule a task is similar to a Jump, but it uses the Fat arrow. The difference is another task begins, and the original task continues on.</p>  MAST pyMASTOutput <pre><code>log(\"before\")\n#\ntask_schedule(ATask)\nlog(\"after\")\n\n=== ATask ===\nlog(\"in task\")\n</code></pre> <pre><code>@label()\ndef start(self):\n    logger()\n    log(\"before\")\n    task_schedule(self.a_task)\n    log(\"after\")\n\n@label()\ndef a_task(self):\n    log(\"in task\")\n</code></pre> <pre><code>before\nafter\nin task\n</code></pre>"},{"location":"mast/syntax/#passing-data-to-a-task","title":"passing data to a task","text":"<p>You can pass data to a new task. The data passed is different than the original task.</p>  MAST pyMASTOutput <pre><code>message = \"Different\"\ntask_schedule(ATask, {\"message\": \"Hello\"})\nlog(f\"{message}\")\n\n=== ATask ===\nlog(f\"{message}\")\nmessage = \"Who cares\"\n</code></pre> <pre><code>@label()\ndef start():\n    logger()\n\n    task_schedule(a_task, {\"message\": \"Hello\"})\n    message = get_variable(\"message\")\n    log(f\"{message}\")\n\n@label()\ndef a_task():\n    log(task.message)\n    set_variable(\"message\", \"Should not change original\")\n</code></pre> <pre><code>different\nHello\n</code></pre>"},{"location":"mast/syntax/#named-task-and-waiting-for-a-task-or-tasks","title":"Named task and waiting for a Task or Tasks","text":"<p>You can assign a task to a variable by putting a name in front of the fat arrow.</p> <p>This can be used to await the task later.</p> <p>Example scheduling a task</p>  MASTOutput <pre><code>log(\"Start\")\ntask1 task_schedule(ATask)\nawait task1\nlog(\"Done\")\n\n=== ATask ===\nlog(\"task run\")\n</code></pre> <pre><code>Start\ntask run\nDone\n</code></pre>"},{"location":"mast/syntax/#awaiting-for-any-or-all-tasks","title":"Awaiting for any or all tasks","text":"<p>This can be used to await a list of tasks. You can await for ay task to complete. And you can await for all tasks to finish.</p> <p>Example await all</p>  MASTOutput  MASTOutput <pre><code>log(\"Start\")\ntask1 = task_schedule(ATask, data= {\"say\": \"Task1\"})\ntask2 = task_schedule(ATask, data= {\"say\": \"Task2\"})\n#### This needs to be refactored it isn't valid yet\nawait task_all(task1,task2)\nlog(\"Done\")\n\n=== ATask ===\nlog(\"{say}\")\n</code></pre> <pre><code>Start\nTask1\nTask2\nDone\n</code></pre> <pre><code>log(\"Start\")\ntask1 = task_schedule(ATask, data= {\"say\": \"Task1\"})\ntask2 = task_schedule(ATask, data= {\"say\": \"Task2\"})\n#### This needs to be refactored\nawait task_any(task1,task2)\nlog(\"Done\")\n\n=== ATask ===\nlog(\"{say}\")\"\n</code></pre> <pre><code>Start\nTask1\nTask2\nDone\n</code></pre> <p>The order maybe be different based on timing of the tasks.</p> <p>For an await any if any task end, the await is satisfied.</p>"},{"location":"mast/syntax/#canceling-a-task","title":"Canceling a task","text":"<p>You can cancel a tasks by name from another task.</p>  MAST pyMASTOutput <pre><code>log(\"Start\")\ntask1 task_schedule(ATask)\ntask_cancel(task1)\nlog(\"Done\")\n\n=== ATask ===\nlog(\"May not run\")\n</code></pre> <pre><code>@label()\ndef start(self):\n    logger()\n    log(\"Start\")\n    task1 = task_schedule(a_task)\n    task_cancel(task1)\n    log(\"Done\")\n\n@label()\ndef a_task(self):\n    log(\"May not run\")\n</code></pre> <p>Start Done</p>"},{"location":"mast/syntax/#conditional-statements","title":"Conditional Statements","text":"<p>MAST supports both if and match statements similar to python syntax. pyMAST simply uses the python statements.</p>"},{"location":"mast/syntax/#if-statements","title":"If statements","text":"<p>MAST supports if statements similar to python with if, elif, and else.</p> <p>If conditionals can be nested as well.</p>  MAST pyMASTOutput <pre><code>===== start ====\nvalue = 300\n\nif value &lt; 300:\n    log(\"less\")\nelif value &gt; 300:\nlog(\"more\")\nelse:\n    log(\"equal\")\n</code></pre> <pre><code>class Story(PyMastStory):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    @label()\n    def start(self):\n        value = 300\n        if value &lt; 300:\n            log(\"less\")\n        elif value &gt; 300:\n            log(\"more\")\n        else:\n            log(\"equal\")\n</code></pre> <pre><code>equal\n</code></pre>"},{"location":"mast/syntax/#match-statements","title":"Match statements","text":"<p>MAST supports match statements similar to python with match, case.</p>  MAST pyMASTOutput <p>```` ===== start ==== value = 300</p> <p>match value:     case 200:         log(\"200\")     case 300:         log(\"300\")     case _:         log*(\"something else\") ```</p> <pre><code>@label()\ndef start(self):\n    value = 300\n    match value:\n        case 200:\n            log(\"200\")\n        case 300:\n            log(\"300\")\n        case _:\n            log(\"something else\")\n</code></pre> <pre><code>300\n</code></pre>"},{"location":"mast/syntax/#for-loops","title":"For loops","text":"<p>MAST supports for loop similar to python with for, break, continue .</p> <p>pyMAST uses the standard python for or while loop.</p> <p>However, MAST support a for ... in loop and a for .. while loop.</p>  MAST pyMASTOutput <p>``` for x in range(3):     log(\"{x}\")</p> <p>y = 10 for z while y &lt; 30:     log(\"{z} {y}\")     y += 10</p> <pre><code>for x in range(3):\n    log(\"{x}\")\n\ny = 10\nz = 0\nwhile y &lt; 30:\n    log(\"{z} {y}\")\n    y += 10\n    z += 1\n</code></pre> <p>1 2 3 0 10 1 20 2 30</p>"},{"location":"mast/syntax/#comments","title":"Comments","text":"<p>Comments provide code extra information to help make it more understandable.</p>"},{"location":"mast/syntax/#comments_1","title":"Comments","text":"<p>Single line comments start with a # and go until the end of the line.</p> <p>Comments use the # like python does</p>  MAST <pre><code>fred = 10 # set fred to 10\n</code></pre>"},{"location":"mast/syntax/#multi-line-comments-aka-block-comments","title":"Multi line Comments aka block comments","text":"<p>You can have a c style block comment</p>  MAST <pre><code>/*********\nBeware\nThis is the tricky part\n****/\n</code></pre> <p>Using block comments to 'disable' code it can quickly get confusing. Therefore, an additional block comment is supported.</p>"},{"location":"mast/syntax/#importing","title":"Importing","text":"<p>You can break up mast content into multiple files and use import to included them</p>  MAST <pre><code>import story_two.mast\n</code></pre> <p>The import command also supports importing from a zip fill</p>  MAST <pre><code>from my_lib.zip import bar.mast\n</code></pre> <p>One use of the zip file concept it to create a sharable library of things.</p>"},{"location":"mast/syntax/#logging","title":"Logging","text":"<p>MAST supports syntax to simplify pythons logging features.</p>"},{"location":"mast/syntax/#logger-command","title":"logger command","text":"<p>The logger command sets up logging. </p> <p>Logging needs to be enabled</p> <p>Logging can enabled for stdout, to a string stream (stringIO) variable, and a file</p>  MAST pyMAST <pre><code># enable logging to stdout\nlogger()\n# enable logging to stdout, and a string\nlogger(var=\"string my_string_logger\")\n# enable logging to stdout, and a file\nlogger(file=\"{mission_dir}/my_log.log\")\n# enable logging to stdout, a string and a file\nlogger(var=\"my_string_logger\", file=\"{mission_dir}/my_log.log\")\n</code></pre> <pre><code>@label\ndef some_label(self):\n    # Logging to stdout\n    logger()\n    # Logging to string IO\n    logger(var=\"my_string_logger\")\n    # Logging to file\n    logger(file=\"{mission_dir}/my_log.log\")\n    logger()\n</code></pre> <p>You can have multiple loggers, each logger can have separate strings, or files.</p> <p>The default logger does not need to specify the name.</p> <p>To create a new loggers by using the logger command specifying a name</p>  MAST <pre><code>logger(name=\"tonnage\")\nlogger(name=\"tonnage\", var=\"tonnage\")\nlogger(name=\"tonnage\",file=\"{get_mission_dir()}/tonnage.txt\")\n</code></pre> <p>==== \" pyMAST\"     <pre><code># this import is needed for get_mission_dir\nfrom sbs_utils.fs import get_mission_dir\n\n@label\ndef some_label(self):\n    logger(name=\"tonnage\")\n    logger(name=\"tonnage\", var=\"tonnage\")\n    logger(name=\"tonnage\",file=\"{get_mission_dir()}/tonnage.txt\")\n</code></pre></p>"},{"location":"mast/syntax/#log-command","title":"log command","text":"<p>The log command is how you send messages to the log.</p>  MAST pyMAST <pre><code># no logger name defaults to name \"mast\"\nlog(\"Hello, World\")\n# Specify a name to log to a secondary logger\nlog(\"Tonnage score {tonnage}\", name=\"tonnage\")\n</code></pre> <pre><code>@label\ndef some_label(self):\n    # no logger name defaults to name \"mast\"\n    log(\"Hello, World\")\n    # Specify a name to log to a secondary logger\n    log(\"Tonnage score {tonnage}\", name=\"tonnage\")\n</code></pre> <p>The log command can accept levels. These are visible is the stdout messages.</p>  MAST pyMAST <pre><code>log(\"Hello, World\", level=\"info\")\nlog(\"Hello, World\", level= \"debug\")\nlog(\"Hello, World\", level= \"error\")\n</code></pre> <pre><code>@label\ndef some_label(self):\n\n    log(\"Hello, World\", level=\"info\")\n    log(\"Hello, World\", level= \"debug\")\n    log(\"Hello, World\", level= \"error\")\n</code></pre>"},{"location":"mast/syntax/#delay-commands","title":"Delay commands","text":"<p>The delay command continues to execute for a period of time.</p> <p>A Delay needs a clock to use. Artemis Cosmos has two clocks: gui and sim. The gui clock is running continuously (realtime). The sim clock can be paused when the simulation is not running (game time).</p> <p>For gui and other things use the gui clock. If you want to delay 10s of game time use sim.</p> <p>Delay can specify minutes and seconds.</p>  MAST pyMAST <pre><code>await delay_app(minutes=1)\nawait delay_app(seconds=10)\nawait delay_app(seconds=5, minutes=1)\nawait delay_sim(0, 10)\n</code></pre> <pre><code>yield AWAIT(delay_app(minutes=1))\nyield AWAIT(delay_app(seconds=10))\nyield AWAIT(delay_app(seconds=5, minutes=1))\nyield AWAIT(delay_sim(0, 10))\n</code></pre> <p>Delay can delay the flow of the code</p>  MAST pyMASTOutput <pre><code>for x in range(3):\n    log(\"{x}\")\n    await delay_app(1)\n</code></pre> <pre><code>for x in range(3):\n    log(\"{x}\")\n    yield AWAIT(delay_app(1))\n</code></pre> <pre><code>1\n2\n3\n</code></pre>"},{"location":"mast/tutorial/","title":"Getting Started","text":"<p>This tutorial is intended to create a small mission in Artemis: Cosmos. It will describe the folder structure and files required to create the mission. The tutorial leverages the sbs_utils library and the MAST scripting language.</p> <p>The map created will result in a smaller version of the Siege scenario included as part of the Legendary Missions. It leverages a lot of reusable code provided by add-ons that are created from the Legendary Missions files that ship with the game.</p>"},{"location":"mast/tutorial/#mission-structure","title":"Mission structure","text":"<p>Missions in Artemis: Cosmos are not just a single file. It takes several files. MAST further adds a couple more files. MAST scripts can be written once the file structure is in place.</p>"},{"location":"mast/tutorial/#mission-required-files","title":"Mission required files","text":"<p>A mission script requires </p> <ul> <li>script.py</li> <li>description.txt</li> </ul> <p>The description.txt file holds information for displaying scenario select list. Which contains:</p> <ul> <li>A category for the mission. When this list grows, future versions will display or filter based on category. It is not used now.</li> <li>The description of the mission.</li> <li>a list of up to 6 icons and their color. MAST missions for example show an acorn icon.</li> </ul> <p></p> <p>The script.py file is how the Artemis: Cosmos engine communicates with the scripting system. The engine calls the function cosmos_event_handler with engine events.</p>  python <pre><code>def  cosmos_event_handler(sim, event):\n    pass\n</code></pre> <p>Script writers can write there own entire from scratch python missions this way.</p> <p>Libraries like sbs_utils should help by providing reusable code to build off of.</p> <p>sbs_utils can be used without MAST and provides many low level systems to do so.</p>"},{"location":"mast/tutorial/#mast-required-files","title":"MAST Required files","text":"<p>A MAST mission script requires a couple more files.</p> <ul> <li>description (like above)</li> <li>script.py (A specific common boilerplate version)</li> <li>story.mast</li> <li>story.json</li> </ul> <p>It is recommended to start with the script.py from another MAST mission like the one linked.</p> <p>It provides all the code needed to load the sbs_utils library, provide a default cosmos_event_handler, and bootstraps the MAST runtime by running story.mast. It also provides a top level exception handler which helps prevent bugs from crashing the application from python and MAST errors.</p> <p>story.mast can be were your mission script is written. Later in this tutorial it is recommended to create a folder to hold most of mission script code.</p> <p>story.json specifies the libraries and addons the mission is dependent on. Missions written using MAST require at least the sbs_utils library. Many missions will also use items from the core add-ons created by Legendary Missions.</p> <p>A mission can copy the Secret Meeting story.json as a good start. </p> <p>The script.py will likely not need any changes and is used to bootstrap the MAST runtime.</p>"},{"location":"mast/tutorial/#creating-a-map","title":"Creating a map","text":"<p>Missions need content. The library and addons work together to present maps to pick from. Maps are discovered at runtime by finding a map label.</p> <p>A map label starts with \"@map\" followed by an identifier e.g. first map. A map label is similar to other route labels and the use the \"/\" separator to distinguish parts of the identity of the label.</p> <p>The map label also includes a string Display Name. The display name is what is seen by the crew on the mission selections screen.</p> <p>The label can also have a number of description lines. Each starts with a quote followed by text. Each line starts with a quote, and there is no ending quote.</p>  MAST <pre><code>@map/first_map \"Hello Cosmos\"\n\" This is my first map\n\" and it's description\n</code></pre>"},{"location":"mast/tutorial/#mast-optional-files","title":"MAST Optional files","text":"<ul> <li>README.md</li> <li>setup.json</li> </ul> <p>README.md should describe the mission. Missions that are put on github will have the README.md display on the github repository.</p> Github is a place to manage source code <p>Github is used by many software developers. Artemis: Cosmos has features to get missions from github with a simple command line. Using github is encouraged for it version control abilities and providing a simple single place for downloadable content for the game: Missions, Libraries, Addons and mods.</p>"},{"location":"mast/tutorial/#finished-step-one-first-map","title":"Finished step one: First Map","text":"<p>Running this code should result in seeing the mission \"Hello Cosmos\" when the missions is selected.</p> <p></p> <p>The finished code for this step is here:</p> <p>code</p>"},{"location":"mast/tutorial/#creating-a-module-within-a-mission","title":"Creating a module within a mission","text":"<p>Missions can become complex. Putting all code in story.mast is not the best method for larger projects.</p> <p>On startup, the MAST runtime will run story.mast then it will look for modules and load them. A module is a folder with a __init__.mast file and any other .mast or .py files. To be included, the files need to be imported by placing an import command in __init__.mast.</p> <p>See the example folder in the Secret Meeting mission.</p> <p>Create a module for the mission.</p> <ul> <li>Create a folder in the mission folder called maps</li> <li>create an __init__.mast file</li> <li>create one or more MAST files or python files in the folder</li> <li>move the code from story.mast to map.mast if the module folder maps</li> <li>add an import statement </li> </ul>"},{"location":"mast/tutorial/#___import___mast","title":"___import___.mast","text":"MAST <pre><code>import map.mast\n</code></pre>"},{"location":"mast/tutorial/#mapmast","title":"map.mast","text":"MAST <pre><code>@map/first_map \"Hello Cosmos\"\n\" This is my first map\n\" and it's description\n</code></pre> <p>story.mast should now be empty except for those three lines, but keep it for later since the system expects it to exist. It can also be used for code in the future.</p>"},{"location":"mast/tutorial/#fished-step-two-modular-map","title":"Fished step two: Modular map","text":"<p>The finished code for this step is here:</p> <p>code</p>"},{"location":"mast/tutorial/#multiple-maps-and-a-mission-overview","title":"Multiple maps and a mission overview","text":"<p>Multiple map labels can be create. Each of these will be discovered and presented as option in the mission selection carousel.</p> <p>Additionally, the mission overview text (the title and description at the top of the selections screen) can be set using a specific __overview_ map label.</p>  MAST <pre><code>@map/__overview__ \"My episodic mission\"\n\" This is an epic journey \n\" told over several episodes\n</code></pre>"},{"location":"mast/tutorial/#run-the-mission","title":"run the mission","text":"<p>Running the mission should now show the overview as well as the first map.</p> <p></p>"},{"location":"mast/tutorial/#fished-step-two-modular-map_1","title":"Fished step two: Modular map","text":"<p>The finished code for this step is here:</p> <p>code</p>"},{"location":"mast/tutorial/#modules-addon-library-files","title":"Modules / Addon / Library Files","text":"<p>The map folder created to hold the maps is called a module. Multiple modules can be created in folders in the mission. </p> <p>Module folders can have folders however the content of those sub folders are not 'discovered' by the system. Files in those sub folders would need to be imported via the module __init__.mast</p> <p>A module can be used to create an addon. Addons are simply zip files of a module folder typically renaming the extension from \".zip\" to \".mastlib\". </p> <p>The __lib__ folder in the Artemis: Cosmos missions folder contains the several modules from LegendryMissions as addons. These addons are created using the build_addons.bat and build_addons.py.</p> <p>The __lib__ folder can also contain python libraries. Files with the \".sbslib\" extension are python libraries. These are also simply zip files of python modules. While python has several methods for managing libraries, this sbslib method was picked for an Artemis: Cosmos simplified method for sharing code.</p> <p>Addons and libraries are not discoverd by the system. The dependency on a library or addon must be listed in the  story.json file.</p> <p>There are two sections one for. sbslib files and one for mastlib files. Note that the file name is included so you can use any extension you wish. e.g. use \".zip\" when creating and testing your own addons.</p> <p>Addons present an interesting ways to share partial missions, Gamemaster/Admiral comm commands etc.</p> <p>The libraries and addons that ship with Artemis: Cosmos have a specific naming scheme that include their github user name, github repository name and a version number. This naming can help avoid naming conflicts and version mismatches.</p>"},{"location":"mast/tutorial/#adding-some-map-content","title":"Adding some map content","text":"<p>To fill out the map, station and NPC ships need to be spawned. This can be done individually with some low level functions. This tutorial will use a couple of python functions defined in the addons.</p> <p>To spawn at a lower level see the spawn module.</p>"},{"location":"mast/tutorial/#creating-some-stations","title":"Creating some stations","text":"<p>To create a spread of stations, use the terrain_spawn_stations, passing it the difficulty level and the lethal terrain value. The higher the difficulty, the fewer stations that will spawn. The lethal terrain value tells the function how many mines to generate around the station.</p>  MAST <pre><code>terrain_spawn_stations(5, 2)\n</code></pre>"},{"location":"mast/tutorial/#handle-the-player-ships","title":"Handle the player ships","text":"<p>The following task schedules a MAST label that handles spawning the player ships.</p>  MAST <pre><code>await task_schedule(spawn_players)\n</code></pre>"},{"location":"mast/tutorial/#creating-some-enemies","title":"Creating some enemies","text":"<p>The create_siege_fleet function. This function takes a race for the fleet to spawn. The difficult level 0 - 10. and a position. This example picks random points in a ring around 0,0,0. </p>  MAST <pre><code>for a in range(10):\n    fleet_pos = Vec3.rand_in_sphere(39990, 40000, False, True)\n    create_siege_fleet(\"Kralien\", 5, fleet_pos.x, fleet_pos.y, fleet_pos.z)\n</code></pre>"},{"location":"mast/tutorial/#end-game-conditions","title":"End game conditions","text":"<p>Script writers can create their own end game logic or use the Admiral (Game Master) console. The Admiral has a command to end the game.</p> <p>The default end game logic for Legendary Missions watches for failure when all stations or players are destroyed, and victory if all enemies are defeated. It will also end the game if the mission timer runs out. Explaining this code goes beyond the intent of a simple tutorial like this.</p> <p>The code is not in an add-on, so it needs to be copied.</p> <p>To have an end game like this:</p> <ul> <li>copy the watch_for_end.mast file to this tutorial mission map module.</li> <li>Add an import watch_for_end.mast to __init__.mast</li> <li>add a task_schedule to run the logic</li> </ul>  MAST <pre><code>task_schedule(task_end_game)\n</code></pre> Taunts may not work <p>At this time taunts will not work unless the taunt.json file is in the mission. The taunt.json can be copied from Legendary Missions. This will be addressed in a future update.</p>"},{"location":"mast/tutorial/#finish-step-four-simple-game","title":"Finish: Step four simple game","text":"<p>This ends this \"getting started\" tutorial. Running the script should be a playable game fighting of some enemy fleets.</p> <p>The finished code for this step is here:</p> <p>code</p>"},{"location":"mast/tutorial/#more-complex-examples","title":"More complex examples","text":"<p>The Legendary Mission, Secret Meeting and the WalkTheLine have their own maps and are a good reference.</p> <ul> <li>Legendary Mission maps</li> <li>Secret Meeting map</li> <li>Walk The Line map</li> </ul>"},{"location":"sbs/","title":"SBS","text":"<p>SBS is the Python API exposed by the Artemis: Cosmos engine.</p> <p>Missions scripts can be created by just accessing this API, and the sbs Utils library is not required.</p>"},{"location":"sbs_utils/","title":"SBS Utils","text":"<p>This is a lower level part of the system written in pure python.</p> <p>The Mast runtime uses this functionality.</p> <p>The sbs utils aspects can be used without mast as well. So creating pure python scripts can be created, and use many of the functions used by mast.</p> <p>Python coding can be more complex than mast, but if you know python you may find this method useful.</p>"},{"location":"tutorial/ai/complex_ai/","title":"complex","text":"<p>===================================</p> <p>Uses behavior trees</p> <p>Do friendly patrol Do harvester</p> <p>Create mission </p> <p>Create the mission from using a starter mission.</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>.\\fetch artemis-sbs mast_starter simple_ai\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>.\\fetch artemis-sbs pymast_starter simple_ai\n</code></pre> <p>Add more enemies</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>#TODO\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>#TODO\n</code></pre>"},{"location":"tutorial/ai/simple_ai/","title":"simple","text":""},{"location":"tutorial/ai/simple_ai/#_1","title":"simple","text":""},{"location":"tutorial/ai/simple_ai/#create-mission","title":"Create mission","text":"<p>Create the mission from using a starter mission.</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>.\\fetch artemis-sbs mast_starter simple_ai\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>.\\fetch artemis-sbs pymast_starter simple_ai\n</code></pre>"},{"location":"tutorial/ai/simple_ai/#add-more-stations","title":"Add more stations","text":"<p>.. tabs::    .. code-tab:: mast mast       :emphasize-lines: 3</p> <pre><code>  # Create a space station\n  ds1 = npc_spawn(1000,0,1000, \"DS1\", \"tsn\", \"starbase_command\", \"behav_station\")\n  ds2 = npc_spawn(1000,0,-1000, \"DS2\", \"tsn\", \"starbase_command\", \"behav_station\")\n</code></pre> <p>.. code-tab:: py PyMast       :emphasize-lines: 3</p> <pre><code>  # Create a space station\n  ds1 = Npc().spawn(self.sim, 1000,0,1000, \"DS1\", \"tsn\", \"starbase_command\", \"behav_station\")\n  ds2 = Npc().spawn(self.sim, -1000,0,1000, \"DS2\", \"tsn\", \"starbase_command\", \"behav_station\")\n</code></pre>"},{"location":"tutorial/ai/simple_ai/#add-role","title":"Add role","text":"<p>.. tabs::    .. code-tab:: mast mast       :emphasize-lines: 4</p> <pre><code>  # Create a space station\n  ds1 = npc_spawn(1000,0,1000, \"DS1\", \"tsn\", \"starbase_command\", \"behav_station\")\n  ds2 = npc_spawn(1000,0,-1000, \"DS2\", \"tsn\", \"starbase_command\", \"behav_station\")\n  do add_role({ds1.id, ds2.id}, \"Station\")\n</code></pre> <p>.. code-tab:: py PyMast       :emphasize-lines: 4</p> <pre><code>  # Create a space station\n  ds1 = Npc().spawn(self.sim, 1000,0,1000, \"DS1\", \"tsn\", \"starbase_command\", \"behav_station\")\n  ds2 = Npc().spawn(self.sim, 1000,0,-1000, \"DS2\", \"tsn\", \"starbase_command\", \"behav_station\")\n  query.add_role({ds1.id, ds2.id}, \"Station\")\n</code></pre> <p>Add a router for ai</p> <p>Routers create tasks automatically a needed and starts running at a specific label. That label that uses logic to route to other labels based on certain conditions.</p> <p>.. tabs::    .. code-tab:: mast Mast</p> <pre><code>     # at the top of the mast file add \n     # Configure the label where comms routing occurs\n     route spawn route_ai\n</code></pre> <p>.. code-tab:: py PyMast</p> <pre><code>   # in the __init__ of the story add \n   self.route_spawn(self.route_ai)\n</code></pre>"},{"location":"tutorial/ai/simple_ai/#add-a-task-to-route-ai","title":"Add a task to route AI","text":"<p>.. tabs::    .. code-tab:: mast mast</p> <pre><code>  ========== route_ai =========\n  #\n  # SPAWNED_ID is a special value of the ID of the thing spawned\n  #\n  if has_role(SPAWNED_ID, \"raider\"):\n     jump npc_targeting_ai\n  end_if\n  #if not a raider end the task\n  -&gt;END\n</code></pre> <p>.. code-tab:: py PyMast</p> <pre><code>  @label()    \n  def route_ai(self):\n     #\n     # SPAWNED_ID is a special value of the ID of the thing spawned\n     #\n     if query.has_role(self.task.SPAWNED_ID, \"raider\"):\n           yield self.jump(self.npc_targeting_ai)\n</code></pre>"},{"location":"tutorial/ai/simple_ai/#add-a-task-to-do-npc-targeting-ai","title":"Add a task to do npc targeting AI","text":"<p>.. tabs::    .. code-tab:: mast mast</p> <pre><code>  =====  npc_targeting_ai   =========\n\n  the_target = closest(SPAWNED_ID, role(\"__PLAYER__\"), 2000)\n  if the_target is None:\n     the_target = closest(SPAWNED_ID, role(\"Station\"))\n  end_if\n  if the_target is not None:\n     do target(sim, SPAWNED_ID, the_target, True)\n  end_if\n\n  delay sim 5s\n  jump npc_targeting_ai\n</code></pre> <p>.. code-tab:: py PyMast</p> <pre><code>  @label()    \n  def npc_targeting_ai(self):\n     the_target = query.closest(self.task.SPAWNED_ID, query.role(\"__PLAYER__\"), 2000)\n     if the_target is None:\n           the_target = query.closest(self.task.SPAWNED_ID, query.role(\"Station\"))\n     if the_target is not None:\n           query.target(self.sim, self.task.SPAWNED_ID, the_target, True)\n\n     yield self.delay(5)\n     yield self.jump(self.npc_targeting_ai)\n</code></pre>"},{"location":"tutorial/comms/complex_comms/","title":"complex","text":"<p>===================================</p> <p>Uses behavior trees</p> <p>Do friendly patrol Do harvester</p> <p>Create mission </p> <p>Create the mission from using a starter mission.</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>.\\fetch artemis-sbs mast_starter simple_ai\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>.\\fetch artemis-sbs pymast_starter simple_ai\n</code></pre> <p>Add more enemies</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>#TODO\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>#TODO\n</code></pre>"},{"location":"tutorial/comms/simple_comms/","title":"Macro Syntax Error","text":"<p>File: <code>tutorial\\comms\\simple_comms.md</code></p> <p>Line 155 in Markdown file: expected token 'end of print statement', got ':' <pre><code>            \"Hail\": button_hail,\n</code></pre></p>"},{"location":"tutorial/gui/simple_gui/","title":"simple","text":"<p>===================================</p> <p>Create mission </p> <p>Create the mission from using a starter mission.</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>.\\fetch artemis-sbs mast_starter simple_ai\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>.\\fetch artemis-sbs pymast_starter simple_ai\n</code></pre> <p>Add more enemies</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>#TODO\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>#TODO\n</code></pre>"},{"location":"tutorial/science/simple_science/","title":"simple","text":"<p>===================================</p> <p>Create mission </p> <p>Create the mission from using a starter mission.</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>.\\fetch artemis-sbs mast_starter simple_ai\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>.\\fetch artemis-sbs pymast_starter simple_ai\n</code></pre> <p>Add more enemies</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>#TODO\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>#TODO\n</code></pre>"}]}