from sbs_utils.pages.layout.bounds import Bounds
from sbs_utils.pages.layout.clickable import Clickable
from sbs_utils.pages.layout.column import Column
from sbs_utils.helpers import FrameContext
from sbs_utils.pages.layout.hole import Hole
from enum import IntEnum
from sbs_utils.mast.parsers import LayoutAreaParser
from sbs_utils.pages.layout.row import Row
def calc_bounds (att, aspect_ratio, font_size):
    ...
def calc_float_attribute (name, col, row, sec, aspect_ratio_axis, font_size):
    ...
def cascade_attribute (name, col, row, sec):
    ...
def get_client_aspect_ratio (cid):
    ...
def get_font_size (font):
    ...
class Layout(Clickable):
    """class Layout"""
    def __init__ (self, tag=None, rows=None, left=0, top=0, right=100, bottom=50, region_type=<RegionType.SECTION_AREA_ABSOLUTE: 0>) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _post_present (self, event):
        ...
    def add (self, row: sbs_utils.pages.layout.row.Row):
        ...
    def calc (self, client_id):
        ...
    @property
    def color (self):
        ...
    @color.setter
    def color (self, v):
        ...
    @property
    def drawing_region_tag (self):
        ...
    @property
    def font (self):
        ...
    @font.setter
    def font (self, v):
        ...
    def get_content_bounds (self, merge_self):
        ...
    def invalidate_all (self):
        ...
    def invalidate_children (self):
        ...
    def invalidate_regions (self):
        ...
    @property
    def is_hidden (self):
        ...
    @property
    def justify (self):
        ...
    @justify.setter
    def justify (self, v):
        ...
    def on_begin_presenting (self, client_id):
        ...
    def on_end_presenting (self, client_id):
        ...
    def on_message (self, event):
        ...
    def present (self, event):
        ...
    def rebuild (self):
        ...
    def region_begin (self, client_id):
        ...
    def region_end (self, client_id):
        ...
    @property
    def region_tag (self):
        ...
    @region_tag.setter
    def region_tag (self, t):
        ...
    def represent (self, event):
        ...
    def resize_to_content (self):
        ...
    def set_border (self, border):
        ...
    def set_bounds (self, bounds):
        ...
    def set_col_width (self, width):
        ...
    def set_margin (self, margin):
        ...
    def set_orientation (self, s):
        ...
    def set_padding (self, padding):
        ...
    def set_row_height (self, height):
        ...
    def show (self, _show):
        ...
class RegionType(IntEnum):
    """int([x]) -> integer
    int(x, base=10) -> integer
    
    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.
    
    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4"""
    REGION_ABSOLUTE : 100
    REGION_RELATIVE : 200
    SECTION_AREA_ABSOLUTE : 0
