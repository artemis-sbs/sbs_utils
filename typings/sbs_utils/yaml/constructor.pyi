from sbs_utils.yaml.nodes import CollectionNode
from sbs_utils.yaml.nodes import MappingNode
from sbs_utils.yaml.nodes import Node
from sbs_utils.yaml.nodes import ScalarNode
from sbs_utils.yaml.nodes import SequenceNode
from sbs_utils.yaml.error import Mark
from sbs_utils.yaml.error import MarkedYAMLError
from sbs_utils.yaml.error import YAMLError
class BaseConstructor(object):
    """class BaseConstructor"""
    def __init__ (self):
        """Initialize self.  See help(type(self)) for accurate signature."""
    def add_constructor (tag, constructor):
        ...
    def add_multi_constructor (tag_prefix, multi_constructor):
        ...
    def check_data (self):
        ...
    def check_state_key (self, key):
        """Block special attributes/methods from being set in a newly created
        object, to prevent user-controlled methods from being called during
        deserialization"""
    def construct_document (self, node):
        ...
    def construct_mapping (self, node, deep=False):
        ...
    def construct_object (self, node, deep=False):
        ...
    def construct_pairs (self, node, deep=False):
        ...
    def construct_scalar (self, node):
        ...
    def construct_sequence (self, node, deep=False):
        ...
    def get_data (self):
        ...
    def get_single_data (self):
        ...
class Constructor(UnsafeConstructor):
    """class Constructor"""
    def add_constructor (tag, constructor):
        ...
    def add_multi_constructor (tag_prefix, multi_constructor):
        ...
class ConstructorError(MarkedYAMLError):
    """Common base class for all non-exit exceptions."""
class FullConstructor(SafeConstructor):
    """class FullConstructor"""
    def add_constructor (tag, constructor):
        ...
    def add_multi_constructor (tag_prefix, multi_constructor):
        ...
    def construct_python_bytes (self, node):
        ...
    def construct_python_complex (self, node):
        ...
    def construct_python_long (self, node):
        ...
    def construct_python_module (self, suffix, node):
        ...
    def construct_python_name (self, suffix, node):
        ...
    def construct_python_object (self, suffix, node):
        ...
    def construct_python_object_apply (self, suffix, node, newobj=False):
        ...
    def construct_python_object_new (self, suffix, node):
        ...
    def construct_python_str (self, node):
        ...
    def construct_python_tuple (self, node):
        ...
    def construct_python_unicode (self, node):
        ...
    def find_python_module (self, name, mark, unsafe=False):
        ...
    def find_python_name (self, name, mark, unsafe=False):
        ...
    def get_state_keys_blacklist (self):
        ...
    def get_state_keys_blacklist_regexp (self):
        ...
    def make_python_instance (self, suffix, node, args=None, kwds=None, newobj=False, unsafe=False):
        ...
    def set_python_instance_state (self, instance, state, unsafe=False):
        ...
class SafeConstructor(BaseConstructor):
    """class SafeConstructor"""
    def add_constructor (tag, constructor):
        ...
    def add_multi_constructor (tag_prefix, multi_constructor):
        ...
    def construct_mapping (self, node, deep=False):
        ...
    def construct_scalar (self, node):
        ...
    def construct_undefined (self, node):
        ...
    def construct_yaml_binary (self, node):
        ...
    def construct_yaml_bool (self, node):
        ...
    def construct_yaml_float (self, node):
        ...
    def construct_yaml_int (self, node):
        ...
    def construct_yaml_map (self, node):
        ...
    def construct_yaml_null (self, node):
        ...
    def construct_yaml_object (self, node, cls):
        ...
    def construct_yaml_omap (self, node):
        ...
    def construct_yaml_pairs (self, node):
        ...
    def construct_yaml_seq (self, node):
        ...
    def construct_yaml_set (self, node):
        ...
    def construct_yaml_str (self, node):
        ...
    def construct_yaml_timestamp (self, node):
        ...
    def flatten_mapping (self, node):
        ...
class UnsafeConstructor(FullConstructor):
    """class UnsafeConstructor"""
    def add_constructor (tag, constructor):
        ...
    def add_multi_constructor (tag_prefix, multi_constructor):
        ...
    def find_python_module (self, name, mark):
        ...
    def find_python_name (self, name, mark):
        ...
    def make_python_instance (self, suffix, node, args=None, kwds=None, newobj=False):
        ...
    def set_python_instance_state (self, instance, state):
        ...
