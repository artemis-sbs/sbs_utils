from sbs_utils.yaml.nodes import CollectionNode
from sbs_utils.yaml.nodes import MappingNode
from sbs_utils.yaml.nodes import Node
from sbs_utils.yaml.nodes import ScalarNode
from sbs_utils.yaml.nodes import SequenceNode
from sbs_utils.yaml.error import Mark
from sbs_utils.yaml.error import MarkedYAMLError
from sbs_utils.yaml.error import YAMLError
class BaseRepresenter(object):
    """class BaseRepresenter"""
    def __init__ (self, default_style=None, default_flow_style=False, sort_keys=True):
        """Initialize self.  See help(type(self)) for accurate signature."""
    def add_multi_representer (data_type, representer):
        ...
    def add_representer (data_type, representer):
        ...
    def ignore_aliases (self, data):
        ...
    def represent (self, data):
        ...
    def represent_data (self, data):
        ...
    def represent_mapping (self, tag, mapping, flow_style=None):
        ...
    def represent_scalar (self, tag, value, style=None):
        ...
    def represent_sequence (self, tag, sequence, flow_style=None):
        ...
class Representer(SafeRepresenter):
    """class Representer"""
    def add_multi_representer (data_type, representer):
        ...
    def add_representer (data_type, representer):
        ...
    def represent_complex (self, data):
        ...
    def represent_module (self, data):
        ...
    def represent_name (self, data):
        ...
    def represent_object (self, data):
        ...
    def represent_ordered_dict (self, data):
        ...
    def represent_tuple (self, data):
        ...
class RepresenterError(YAMLError):
    """Common base class for all non-exit exceptions."""
class SafeRepresenter(BaseRepresenter):
    """class SafeRepresenter"""
    def add_multi_representer (data_type, representer):
        ...
    def add_representer (data_type, representer):
        ...
    def ignore_aliases (self, data):
        ...
    def represent_binary (self, data):
        ...
    def represent_bool (self, data):
        ...
    def represent_date (self, data):
        ...
    def represent_datetime (self, data):
        ...
    def represent_dict (self, data):
        ...
    def represent_float (self, data):
        ...
    def represent_int (self, data):
        ...
    def represent_list (self, data):
        ...
    def represent_none (self, data):
        ...
    def represent_set (self, data):
        ...
    def represent_str (self, data):
        ...
    def represent_undefined (self, data):
        ...
    def represent_yaml_object (self, tag, data, cls, flow_style=None):
        ...
