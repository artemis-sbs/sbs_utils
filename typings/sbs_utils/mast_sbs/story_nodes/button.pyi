from sbs_utils.mast.core_nodes.await_cmd import Await
from sbs_utils.mast.core_nodes.decorator_label import DecoratorLabel
from sbs_utils.mast_sbs.story_nodes.define_format import DefineFormat
from sbs_utils.mast.mast_node import MastNode
from sbs_utils.mast.mast_node import ParseData
from sbs_utils.mast.mast_runtime_node import MastRuntimeNode
from sbs_utils.mast.pollresults import PollResults
from sbs_utils.mast_sbs.story_nodes.route_label import RouteDecoratorLabel
from sbs_utils.mast.core_nodes.yield_cmd import Yield
def mast_node (append=True):
    ...
def mast_runtime_node (parser_node):
    ...
class Button(MastNode):
    """class Button"""
    def __init__ (self, message=None, button=None, if_exp=None, format=None, label=None, clone=False, q=None, weight=None, priority=None, new_task=None, data=None, path=None, block=None, promise=None, loc=None, compile_info=None):
        """Initialize self.  See help(type(self)) for accurate signature."""
    def been_here (self, id_tuple):
        ...
    def clone (self):
        ...
    def create_end_node (self, loc, dedent_obj, compile_info):
        """cascade the dedent up to the start"""
    def expand (self):
        ...
    def is_indentable (self):
        ...
    def must_indent (self):
        ...
    def parse (lines):
        ...
    def resolve_data_context (self, task):
        ...
    def run (self, task, button_promise):
        ...
    def should_present (self, id_tuple):
        ...
    def visit (self, id_tuple):
        ...
    @property
    def weight (self):
        ...
class ButtonRuntimeNode(MastRuntimeNode):
    """class ButtonRuntimeNode"""
    def enter (self, mast: 'Mast', task: 'MastAsyncTask', node: sbs_utils.mast_sbs.story_nodes.button.Button):
        ...
    def poll (self, mast: 'Mast', task: 'MastAsyncTask', node: sbs_utils.mast_sbs.story_nodes.button.Button):
        ...
