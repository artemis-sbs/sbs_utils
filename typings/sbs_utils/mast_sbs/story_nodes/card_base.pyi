from sbs_utils.mast.core_nodes.decorator_label import DecoratorLabel
from sbs_utils.mast.mast_node import MastNode
def STRING_REGEX_NAMED (name):
    ...
def mast_node (append=True):
    ...
class CardLabelBase(DecoratorLabel):
    """class CardLabelBase"""
    def __init__ (self, purpose, path, display_name=None, if_exp=None, loc=None, compile_info=None):
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _add (id, obj):
        ...
    def _remove (id):
        ...
    def apply_metadata (self, data):
        ...
    def can_fallthrough (self, parent):
        ...
    def clear ():
        ...
    def generate_label_end_cmds (self, compile_info=None):
        ...
    def get (id):
        ...
    def get_as (id, as_cls):
        ...
    def get_objects_from_set (the_set):
        ...
    def get_role_object (link_name):
        ...
    def get_role_objects (role):
        ...
    def get_role_set (role):
        ...
    def has_inventory_list (collection_name):
        ...
    def has_inventory_set (collection_name):
        ...
    def has_links_list (collection_name):
        ...
    def has_links_set (collection_name):
        ...
    def parse (lines):
        ...
    def remove_id (id):
        ...
    def resolve_id (other: 'Agent | CloseData | int'):
        ...
    def resolve_py_object (other: 'Agent | CloseData | int'):
        ...
    def test (self, task):
        ...
class InlineRoute(MastNode):
    """class InlineRoute"""
    def __init__ (self, path, m=None, loc=None, compile_info=None):
        """Initialize self.  See help(type(self)) for accurate signature."""
    def is_indentable (self):
        ...
    def never_indent (self):
        ...
    def parse (lines):
        ...
