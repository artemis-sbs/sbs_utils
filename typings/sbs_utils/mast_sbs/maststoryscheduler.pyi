from sbs_utils.agent import Agent
from sbs_utils.helpers import FakeEvent
from sbs_utils.helpers import FrameContext
from sbs_utils.gui import Gui
from sbs_utils.mast.mast import Mast
from sbs_utils.mast.mast_globals import MastGlobals
from sbs_utils.mast.mastscheduler import MastScheduler
from sbs_utils.mast.mast_node import Scope
def format_exception (message, source):
    ...
class StoryScheduler(MastScheduler):
    """class StoryScheduler"""
    def __init__ (self, mast: sbs_utils.mast.mast.Mast, overrides=None):
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _add (id, obj):
        ...
    def _remove (id):
        ...
    def clear ():
        ...
    def get (id):
        ...
    def get_as (id, as_cls):
        ...
    def get_objects_from_set (the_set):
        ...
    def get_role_object (link_name):
        ...
    def get_role_objects (role):
        ...
    def get_role_set (role):
        ...
    def get_symbols (self):
        ...
    def get_value (self, key, defa=None):
        """_summary_
        
        Args:
            key (_type_): _description_
            defa (_type_, optional): _description_. Defaults to None.
        
        Returns:
            _type_: _description_"""
    def has_inventory_list (collection_name):
        ...
    def has_inventory_set (collection_name):
        ...
    def has_links_list (collection_name):
        ...
    def has_links_set (collection_name):
        ...
    def is_server (self):
        ...
    def refresh (self, label):
        ...
    def resolve_id (other: 'Agent | CloseData | int'):
        ...
    def resolve_py_object (other: 'Agent | CloseData | int'):
        ...
    def run (self, client_id, page, label='main', inputs=None, task_name=None, defer=False):
        ...
    def runtime_error (self, message):
        ...
    def set_value (self, key, value, scope):
        ...
    def story_tick_tasks (self, client_id):
        ...
