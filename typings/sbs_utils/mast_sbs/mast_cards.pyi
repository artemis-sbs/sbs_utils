from sbs_utils.mast.core_nodes.decorator_label import DecoratorLabel
from sbs_utils.mast.mast_node import MastNode
def STRING_REGEX_NAMED (name):
    ...
def mast_node (append=True):
    ...
class CardLabel(CardLabelBase):
    """class CardLabel"""
    def __init__ (self, path, display_name=None, q=None, if_exp=None, loc=None, compile_info=None):
        """Initialize self.  See help(type(self)) for accurate signature."""
    def apply_meta_data (self, data):
        ...
    def generate_label_end_cmds (self, compile_info=None):
        ...
    def parse (lines):
        ...
class CardLabelBase(DecoratorLabel):
    """class CardLabelBase"""
    def __init__ (self, purpose, path, display_name=None, if_exp=None, loc=None, compile_info=None):
        """Initialize self.  See help(type(self)) for accurate signature."""
    def apply_meta_data (self, data):
        ...
    def can_fallthrough (self, parent):
        ...
    def generate_label_end_cmds (self, compile_info=None):
        ...
    def parse (lines):
        ...
    def test (self, task):
        ...
class InlineRoute(MastNode):
    """class InlineRoute"""
    def __init__ (self, path, m=None, loc=None, compile_info=None):
        """Initialize self.  See help(type(self)) for accurate signature."""
    def is_indentable (self):
        ...
    def never_indent (self):
        ...
    def parse (lines):
        ...
class ObjectiveLabel(CardLabelBase):
    """class ObjectiveLabel"""
    def __init__ (self, path, display_name=None, q=None, if_exp=None, loc=None, compile_info=None):
        """Initialize self.  See help(type(self)) for accurate signature."""
    def apply_meta_data (self, data):
        ...
    def generate_label_end_cmds (self, compile_info=None):
        ...
    def parse (lines):
        ...
class UpgradeLabel(CardLabelBase):
    """class UpgradeLabel"""
    def __init__ (self, path, display_name=None, q=None, if_exp=None, loc=None, compile_info=None):
        """Initialize self.  See help(type(self)) for accurate signature."""
    def apply_meta_data (self, data):
        ...
    def generate_label_end_cmds (self, compile_info=None):
        ...
    def parse (lines):
        ...
