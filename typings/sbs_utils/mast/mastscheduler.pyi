from sbs_utils.agent import Agent
from sbs_utils.mast.core_nodes.assign import Assign
from sbs_utils.mast.core_nodes.comment import Comment
from enum import Enum
from sbs_utils.mast.mast import ExpParseData
from sbs_utils.mast.mast import InlineData
from sbs_utils.mast.mast import Mast
from sbs_utils.mast.mast import Rule
from sbs_utils.mast.mast import SourceMapData
from sbs_utils.helpers import FrameContext
from sbs_utils.mast.core_nodes.inline_label import InlineLabel
from sbs_utils.mast.core_nodes.label import Label
from sbs_utils.mast.mast_globals import MastGlobals
from sbs_utils.mast.mast_node import MastNode
from sbs_utils.mast.mast_node import Scope
from sbs_utils.mast.mast_runtime_node import MastRuntimeNode
from pathlib import Path
from sbs_utils.mast.pollresults import PollResults
from sbs_utils.futures import Promise
from sbs_utils.futures import Waiter
from zipfile import ZipFile
from functools import partial
def DEBUG (msg):
    ...
def find_exp_end (s, expect_block):
    ...
def first_newline_index (s):
    ...
def first_non_newline_index (s):
    ...
def first_non_space_index (s):
    ...
def first_non_whitespace_index (s):
    ...
def format_exception (message, source):
    ...
def get_fall_through (inner):
    ...
def get_task_id ():
    ...
class ChangeRuntimeNode(MastRuntimeNode):
    """class ChangeRuntimeNode"""
    def enter (self, mast: 'Mast', task: 'MastAsyncTask', node):
        ...
    def poll (self, mast: 'Mast', task: 'MastAsyncTask', node):
        ...
    def test (self):
        ...
class MastAsyncTask(Agent, Promise):
    """class MastAsyncTask"""
    def __init__ (self, main: "'MastScheduler'", inputs=None, name=None):
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _add (id, obj):
        ...
    def _remove (id):
        ...
    @property
    def active_label (self):
        ...
    @property
    def active_label_object (self):
        ...
    def add_dependency (id, task):
        ...
    def are_variables_defined (self, keys):
        ...
    def cancel (self, msg=None):
        ...
    def clear ():
        ...
    def compile_and_format_string (self, value):
        ...
    def emit_signal (self, name, sender_task, label_info, data):
        ...
    def end (self):
        ...
    def eval_code (self, code, end_on_exception=True):
        ...
    def exec_code (self, code, vars, gbls):
        ...
    def format_string (self, message):
        ...
    def get (id):
        ...
    def get_active_node (self):
        ...
    def get_active_node_source_map (self):
        ...
    def get_as (id, as_cls):
        ...
    def get_objects_from_set (the_set):
        ...
    def get_role_object (link_name):
        ...
    def get_role_objects (role):
        ...
    def get_role_set (role):
        ...
    def get_runtime_error_info (self, rte):
        ...
    def get_scoped_value (self, key, defa, scope):
        ...
    def get_shared_variable (self, key, default=None):
        ...
    def get_symbols (self):
        ...
    def get_value (self, key, defa=None):
        ...
    def get_variable (self, key, default=None):
        ...
    def has_inventory_list (collection_name):
        ...
    def has_inventory_set (collection_name):
        ...
    def has_links_list (collection_name):
        ...
    def has_links_set (collection_name):
        ...
    @property
    def is_observable (self):
        ...
    def jump (self, label='main', activate_cmd=0, respect_inline=False):
        ...
    def jump_restart_task (self, label='main', activate_cmd=0):
        """Used by the mission runner to run multiple labels"""
    def poll (self):
        ...
    def pop_label (self, inc_loc=True, true_pop=False):
        ...
    def push_inline_block (self, label, activate_cmd=0, data=None):
        ...
    def push_label (self, label, activate_cmd=0, data=None):
        ...
    def queue_on_change (self, runtime_node):
        ...
    def remove_all_sub_tasks (self):
        ...
    def remove_id (id):
        ...
    def remove_sub_task (self, t):
        ...
    def resolve_id (other: 'Agent | CloseData | int'):
        ...
    def resolve_py_object (other: 'Agent | CloseData | int'):
        ...
    def run_on_change (self):
        ...
    def runtime_error (self, msg):
        ...
    def set_shared_variable (self, key, value):
        ...
    def set_value (self, key, value, scope):
        ...
    def set_value_keep_scope (self, key, value):
        ...
    def set_variable (self, key, value):
        ...
    def start_sub_task (self, label='main', inputs=None, task_name=None, defer=False, active_cmd=0) -> 'MastAsyncTask':
        ...
    def start_task (self, label='main', inputs=None, task_name=None, defer=False, inherit=True, unscheduled=False) -> 'MastAsyncTask':
        ...
    def stop_for_dependency (id):
        ...
    def swap_on_change (self):
        ...
    def tick (self):
        ...
    def tick_in_context (self):
        ...
    @property
    def tick_result (self):
        ...
    def tick_subtasks (self):
        ...
class MastScheduler(Agent):
    """class MastScheduler"""
    def __init__ (self, mast: 'Mast', overrides=None):
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _add (id, obj):
        ...
    def _remove (id):
        ...
    def _start_task (self, label='main', inputs=None, task_name=None) -> 'MastAsyncTask':
        ...
    def cancel_task (self, name):
        ...
    def clear ():
        ...
    def get (id):
        ...
    def get_as (id, as_cls):
        ...
    def get_inventory_value (self, collection_name, default=None):
        ...
    def get_objects_from_set (the_set):
        ...
    def get_role_object (link_name):
        ...
    def get_role_objects (role):
        ...
    def get_role_set (role):
        ...
    def get_seconds (self, clock):
        """Gets time for a given clock default is just system """
    def get_symbols (self):
        ...
    def get_value (self, key, defa=None):
        """MastStoryScheduler completely overrided this so changes here should go there"""
    def get_variable (self, key, defa=None):
        ...
    def has_inventory_list (collection_name):
        ...
    def has_inventory_set (collection_name):
        ...
    def has_links_list (collection_name):
        ...
    def has_links_set (collection_name):
        ...
    def is_running (self):
        ...
    def is_server (self):
        ...
    def on_start_task (self, t):
        ...
    def remove_id (id):
        ...
    def resolve_id (other: 'Agent | CloseData | int'):
        ...
    def resolve_py_object (other: 'Agent | CloseData | int'):
        ...
    def runtime_error (self, message):
        ...
    def schedule (self, task):
        ...
    def set_inventory_value (self, collection_name, value):
        ...
    def set_value (self, key, value, scope):
        ...
    def set_variable (self, key):
        ...
    def start_task (self, label='main', inputs=None, task_name=None, defer=False, unscheduled=False, loc=0) -> 'MastAsyncTask':
        ...
    def tick (self):
        ...
class MastTicker(object):
    """class MastTicker"""
    def __init__ (self, task, main):
        """Initialize self.  See help(type(self)) for accurate signature."""
    def call_leave (self):
        ...
    def do_jump (self, label='main', activate_cmd=0):
        ...
    def do_resume (self, label, activate_cmd, runtime_node):
        ...
    def end (self):
        ...
    def get_active_node (self):
        ...
    def get_runtime_error_info (self, rte):
        ...
    def jump (self, label='main', activate_cmd=0):
        ...
    def next (self):
        ...
    def pop_label (self, inc_loc=True, true_pop=False):
        ...
    def push_inline_block (self, label, activate_cmd=0, data=None):
        ...
    def push_label (self, label, activate_cmd=0, data=None):
        ...
    def runtime_error (self, rte):
        ...
    def tick (self):
        ...
class PushData(object):
    """class PushData"""
    def __init__ (self, label, active_cmd, data=None, resume_node=None):
        """Initialize self.  See help(type(self)) for accurate signature."""
class PyTicker(object):
    """class PyTicker"""
    def __init__ (self, task) -> 'None':
        """Initialize self.  See help(type(self)) for accurate signature."""
    @property
    def active_label (self):
        ...
    def do_jump (self):
        ...
    def end (self):
        ...
    def get_active_node (self):
        ...
    def get_gen (self, label):
        ...
    def get_runtime_error_info (self, rte):
        ...
    def jump (self, label):
        ...
    def pop (self):
        ...
    def pop_label (self, inc_loc=True, true_pop=False):
        ...
    def push (self, label):
        ...
    def push_inline_block (self, label, _loc=0, data=None):
        ...
    def quick_push (self, func):
        ...
    def runtime_error (self, rte):
        ...
    def tick (self):
        ...
